complete -c git -l 'pretty'
complete -c git -l 'abbrev' -d 'Show only a partial prefix instead of the full 40-byte hexadecimal object name'
complete -c git -l 'binary' -d 'Output a binary diff that can be applied with "git-apply"'
complete -c git -l 'check' -d 'Warn if changes introduce conflict markers or whitespace errors'
complete -c git -l 'color' -d 'Show colored diff'
complete -c git -l 'color-moved' -d 'Moved lines of code are colored differently'
complete -c git -l 'color-moved-ws' -d 'Ignore whitespace when using --color-moved'
complete -c git -l 'color-words' -d 'Equivalent to --word-diff=color plus --word-diff-regex=<regex>'
complete -c git -l 'compact-summary' -d 'Output a condensed summary of extended header information'
complete -c git -l 'dst-prefix' -d 'Show the given destination prefix instead of "b/"'
complete -c git -l 'ext-diff' -d 'Allow an external diff helper to be executed'
complete -c git -l 'find-copies-harder' -d 'Inspect unmodified files as candidates for the source of copy'
complete -c git -l 'find-object' -d 'Look for differences that change the number of occurrences of the object'
complete -c git -l 'full-index' -d 'Show the full pre- and post-image blob object names on the "index" line'
complete -c git -l 'histogram' -d 'Generate a diff using the "histogram diff" algorithm'
complete -c git -l 'ignore-blank-lines' -d 'Ignore changes whose lines are all blank'
complete -c git -l 'ignore-cr-at-eol' -d 'Ignore carrige-return at the end of line when doing a comparison'
complete -c git -l 'ignore-space-at-eol' -d 'Ignore changes in whitespace at EOL'
complete -c git -l 'indent-heuristic' -d 'Enable the heuristic that shift diff hunk boundaries'
complete -c git -l 'inter-hunk-context' -d 'Show the context between diff hunks, up to the specified number of lines'
complete -c git -l 'ita-invisible-in-index' -d 'Make the entry appear as a new file in "git diff" and non-existent in "git diff -l cached"'
complete -c git -l 'line-prefix' -d 'Prepend an additional prefix to every line of output'
complete -c git -l 'minimal' -d 'Spend extra time to make sure the smallest possible diff is produced'
complete -c git -l 'name-only' -d 'Show only names of changed files'
complete -c git -l 'name-status' -d 'Show only names and status of changed files'
complete -c git -l 'no-color' -d 'Turn off colored diff'
complete -c git -l 'no-ext-diff' -d 'Disallow external diff drivers'
complete -c git -l 'no-indent-heuristic' -d 'Disable the indent heuristic'
complete -c git -l 'no-prefix' -d 'Do not show any source or destination prefix'
complete -c git -l 'no-renames' -d 'Turn off rename detection'
complete -c git -l 'no-textconv' -d 'Disallow external text conversion filters to be run when comparing binary files'
complete -c git -l 'numstat' -d 'Shows number of added/deleted lines in decimal notation'
complete -c git -l 'patch-with-raw' -d 'Synonym for -p --raw'
complete -c git -l 'patch-with-stat' -d 'Synonym for -p --stat'
complete -c git -l 'patience' -d 'Generate a diff using the "patience diff" algorithm'
complete -c git -l 'pickaxe-all' -d 'When -S or -G finds a change, show all the changes in that changeset'
complete -c git -l 'pickaxe-regex' -d 'Treat the <string> given to -S as an extended POSIX regular expression to match'
complete -c git -l 'relative' -d 'Exclude changes outside the directory and show relative pathnames'
complete -c git -l 'shortstat' -d 'Output only the last line of the --stat format containing the total'
complete -c git -l 'src-prefix' -d 'Show the given source prefix instead of "a/"'
complete -c git -l 'stat' -d 'Generate a diffstat'
complete -c git -l 'stat' -d 'Generate a diffstat'
complete -c git -l 'summary' -d 'Output a condensed summary of extended header information'
complete -c git -l 'textconv' -d 'Allow external text conversion filters to be run when comparing binary files'
complete -c git -l 'word-diff' -d 'Show a word diff'
complete -c git -l 'word-diff-regex' -d 'Use <regex> to decide what a word is'
complete -c git -s 'a' -l 'text' -d 'Treat all files as text'
complete -c git -s 'B' -l 'break-rewrites' -d 'Break complete rewrite changes into pairs of delete and create'
complete -c git -s 'b' -l 'ignore-space-change' -d 'Ignore changes in amount of whitespace'
complete -c git -s 'C' -l 'find-copies' -d 'Detect copies as well as renames'
complete -c git -s 'D' -l 'irreversible-delete' -d 'Omit the preimage for deletes'
complete -c git -s 'G' -d 'Look for differences where <regex> matches the patch'"'"'s added/removed lines'
complete -c git -s 'M' -l 'find-renames' -d 'Detect and report renames'
complete -c git -s 'R' -d 'Swap inputs to create a reverse diff'
complete -c git -s 'S' -d 'Look for differences that change the number of occurrences of the string'
complete -c git -s 'W' -l 'function-context' -d 'Show whole surrounding functions of changes'
complete -c git -s 'w' -l 'ignore-all-space' -d 'Ignore whitespace when comparing lines'
complete -c git -s 'z' -d 'Use NULs as output field/commit terminators'
complete -c git -s 'O' -d 'Control the order in which files appear in the output'
complete -c git -l 'anchored' -d 'Generate a diff using the "anchored diff" algorithm'
complete -c git -s 'l' -d 'Prevents rename/copy detection when rename/copy targets exceed the given number'
complete -c git -l 'diff-filter' -d 'Choose diff filters'
complete -c git -l 'diff-algorithm' -d 'Choose a diff algorithm'
complete -c git -l 'dirstat' -d 'Output the distribution of relative amount of changes for each sub-directory'
complete -c git -l 'ignore-submodules' -d 'Ignore changes to submodules in the diff generation'
complete -c git -l 'submodule' -d 'Specify how differences in submodules are shown'
complete -c git -l 'ws-error-highlight' -d 'Highlight whitespace errors in lines of the diff'
complete -c git -l 'unshallow' -d 'Convert a shallow repository to a complete one'
complete -c git -l 'set-upstream' -d 'Add upstream (tracking) reference'
complete -c git -d 'Download objects from another repo'
complete -c git -d 'Remote'
complete -c git -s 'q' -l 'quiet' -d 'Be more quiet'
complete -c git -s 'v' -l 'verbose' -d 'Be more verbose'
complete -c git -s 'a' -l 'append' -d 'Append to .git/FETCH_HEAD instead of overwriting'
complete -c git -l 'upload-pack' -d 'Path to upload pack on remote end'
complete -c git -s 'f' -l 'force' -d 'Force update of local branches'
complete -c git -s 'p' -l 'prune' -d 'Prune remote-tracking branches no longer on remote'
complete -c git -l 'all' -d 'Fetch all remotes'
complete -c git -l 'atomic' -d 'Use atomic transfer to update references'
complete -c git -s 'm' -l 'multiple' -d 'Fetch from multiple remotes'
complete -c git -s 't' -l 'tags' -d 'Fetch all tags and associated objects'
complete -c git -s 'P' -l 'prune-tags' -d 'Prune local tags no longer on remote and clobber changed tags'
complete -c git -l 'prefetch' -d 'Modify the refspec to replace all refs within refs/prefetch/'
complete -c git -s 'j' -l 'jobs' -d 'Numbers of submodules fetched in parallel'
complete -c git -s 'n' -d 'Do not fetch all tags (--no-tags)'
complete -c git -l 'dry-run' -d 'Dry run'
complete -c git -l 'depth' -d 'Limit number of commits'
complete -c git -l 'with-fetch-head' -d 'Write fetched references to the FETCH_HEAD file'
complete -c git -l 'update-shallow' -d 'Accept refs that update .git/shallow'
complete -c git -s 'k' -l 'keep' -d 'Keep downloaded pack'
complete -c git -s 'u' -l 'update-head-ok' -d 'Allow updating of HEAD ref'
complete -c git -l 'progress' -d 'Force progress reporting'
complete -c git -l 'deepen' -d 'Deepen history of shallow clones'
complete -c git -l 'shallow-since' -d 'Deepen history of shallow repository based on time'
complete -c git -l 'shallow-exclude' -d 'Deepen history of shallow clone, excluding rev'
complete -c git -l 'unshallow' -d 'Convert to a complete repository'
complete -c git -l 'refetch' -d 'Re-fetch without negotiating common commits'
complete -c git -l 'negotiation-tip' -d 'Only report commits reachable from these tips'
complete -c git -l 'negotiate-only' -d 'Don'"'"'t fetch, only show commits in common with the server'
complete -c git -l 'filter' -d 'Request a subset of objects from server'
complete -c git -d 'Rewrite branches'
complete -c git -l 'env-filter' -d 'Filter for rewriting env vars like author name/email'
complete -c git -l 'tree-filter' -d 'Filter for rewriting the tree and its contents'
complete -c git -l 'index-filter' -d 'Filter for rewriting the index'
complete -c git -l 'parent-filter' -d 'Filter for rewriting the commit'
complete -c git -l 'msg-filter' -d 'Filter for rewriting the commit messages'
complete -c git -l 'commit-filter' -d 'Filter for performing the commit'
complete -c git -l 'tag-name-filter' -d 'Filter for rewriting tag names'
complete -c git -l 'subdirectory-filter' -d 'Only look at the history which touches the given subdirectory'
complete -c git -l 'prune-empty' -d 'Ignore empty commits generated by filters'
complete -c git -l 'original' -d 'Use this option to set the namespace where the original commits will be stored'
complete -c git -s 'd' -d 'Use this option to set the path to the temporary directory used for rewriting'
complete -c git -s 'f' -l 'force' -d 'Filter even with refs in refs/original or existing temp directory'
complete -c git -d 'Manage tracked repositories'
complete -c git -s 'v' -l 'verbose' -d 'Be verbose'
complete -c git -d 'Adds a new remote'
complete -c git -d 'Removes a remote'
complete -c git -d 'Removes a remote'
complete -c git -d 'Shows a remote'
complete -c git -d 'Deletes all stale tracking branches'
complete -c git -d 'Fetches updates'
complete -c git -d 'Renames a remote'
complete -c git -d 'Sets the default branch for a remote'
complete -c git -d 'Changes URLs for a remote'
complete -c git -d 'Retrieves URLs for a remote'
complete -c git -d 'Changes the list of branches tracked by a remote'
complete -c git -s 'f' -d 'Once the remote information is set up git fetch <name> is run'
complete -c git -l 'tags' -d 'Import every tag from a remote with git fetch <name>'
complete -c git -l 'no-tags' -d 'Don'"'"'t import tags from a remote with git fetch <name>'
complete -c git -l 'add' -d 'Add to the list of currently tracked branches instead of replacing it'
complete -c git -l 'push' -d 'Manipulate push URLs instead of fetch URLs'
complete -c git -l 'add' -d 'Add new URL instead of changing the existing URLs'
complete -c git -l 'delete' -d 'Remove URLs that match specified URL'
complete -c git -l 'push' -d 'Query push URLs rather than fetch URLs'
complete -c git -l 'all' -d 'All URLs for the remote will be listed'
complete -c git -s 'n' -d 'Remote heads are not queried, cached information is used instead'
complete -c git -l 'dry-run' -d 'Report what will be pruned but do not actually prune it'
complete -c git -l 'prune' -d 'Prune all remotes that are updated'
complete -c git -d 'Show the last commit of a branch'
complete -c git -d 'Tag'
complete -c git -l 'format' -d 'Pretty-print the contents of the commit logs in a given format'
complete -c git -l 'abbrev-commit' -d 'Show only a partial hexadecimal commit object name'
complete -c git -l 'no-abbrev-commit' -d 'Show the full 40-byte hexadecimal commit object name'
complete -c git -l 'oneline' -d 'Shorthand for "--pretty=oneline --abbrev-commit"'
complete -c git -l 'encoding' -d 'Re-code the commit log message in the encoding'
complete -c git -l 'expand-tabs' -d 'Perform a tab expansion in the log message'
complete -c git -l 'no-expand-tabs' -d 'Do not perform a tab expansion in the log message'
complete -c git -l 'notes' -d 'Show the notes that annotate the commit'
complete -c git -l 'no-notes' -d 'Do not show notes'
complete -c git -s 's' -l 'no-patch' -d 'Suppress diff output'
complete -c git -l 'show-signature' -d 'Check the validity of a signed commit object'
complete -c git -d 'Show the commits on branches'
complete -c git -d 'Rev'
complete -c git -s 'r' -l 'remotes' -d 'Shows the remote tracking branches'
complete -c git -s 'a' -l 'all' -d 'Show both remote-tracking branches and local branches'
complete -c git -l 'current' -d 'Includes the current branch to the list of revs to be shown'
complete -c git -l 'topo-order' -d 'Makes commits appear in topological order'
complete -c git -l 'date-order' -d 'Makes commits appear in date order'
complete -c git -l 'sparse' -d 'Shows merges only reachable from one tip'
complete -c git -l 'no-name' -d 'Do not show naming strings for each commit'
complete -c git -l 'sha1-name' -d 'Name commits with unique prefix'
complete -c git -l 'no-color' -d 'Turn off colored output'
complete -c git -l 'merge-base' -d 'Determine merge bases for the given commits'
complete -c git -l 'independent' -d 'Show which refs can'"'"'t be reached from any other'
complete -c git -l 'topics' -d 'Show only commits that are not on the first given branch'
complete -c git -d 'Add file contents to the staging area'
complete -c git -s 'n' -l 'dry-run' -d 'Don'"'"'t actually add the file(s)'
complete -c git -s 'v' -l 'verbose' -d 'Be verbose'
complete -c git -s 'f' -l 'force' -d 'Allow adding otherwise ignored files'
complete -c git -s 'i' -l 'interactive' -d 'Interactive mode'
complete -c git -s 'p' -l 'patch' -d 'Interactively choose hunks to stage'
complete -c git -s 'e' -l 'edit' -d 'Manually create a patch'
complete -c git -s 'u' -l 'update' -d 'Only match tracked files'
complete -c git -s 'A' -l 'all' -d 'Match files both in working tree and index'
complete -c git -s 'N' -l 'intent-to-add' -d 'Record only the fact that the path will be added later'
complete -c git -l 'refresh' -d 'Don'"'"'t add the file(s), but only refresh their stat'
complete -c git -l 'chmod'
complete -c git -l 'ignore-errors' -d 'Ignore errors'
complete -c git -l 'ignore-missing' -d 'Check if any of the given files would be ignored'
complete -c git -d 'Apply patches from a mailbox'
complete -c git -s 's' -l 'signoff' -d 'Add a Signed-off-By trailer to commit message'
complete -c git -l 'no-keep-cr' -d 'Override am.keepcr to false'
complete -c git -s 'c' -l 'scissors' -d 'Remove everything in body before scissors'
complete -c git -l 'no-scissors' -d 'Ignore scissor lines'
complete -c git -l 'quoted-cr' -d 'What to do when an email ends with CRLF'
complete -c git -l 'no-messageid' -d 'Do not add message id to commit message'
complete -c git -s 'q' -l 'quiet' -d 'Supress logs'
complete -c git -l 'no-utf8' -d 'Disable all charset re-encoding of metadata'
complete -c git -s '3' -l '3way' -d 'Fall back to three way merge on patch failure'
complete -c git -l 'no-3way' -d 'Do not fall back to three way merge on patch failure'
complete -c git -l 'rerere-autoupdate' -d 'Allow rerere to update index if possible'
complete -c git -l 'ignore-space-change' -d 'Pass --ignore-space-change to git apply'
complete -c git -l 'directory' -d 'Pass --directory to git apply'
complete -c git -l 'exclude' -d 'Pass --exclude to git apply'
complete -c git -l 'include' -d 'Pass --include to git apply'
complete -c git -l 'reject' -d 'Pass --reject to git apply'
complete -c git -s 'i' -l 'interactive' -d 'Run interactively'
complete -c git -l 'committer-date-is-author-date' -d 'Treat committer date as author date'
complete -c git -l 'ignore-date' -d 'Treat author date as committer date'
complete -c git -l 'skip' -d 'Skip current patch'
complete -c git -s 'S' -l 'gpg-sign' -d 'Sign commits with gpg'
complete -c git -l 'no-gpg-sign' -d 'Do not sign commits'
complete -c git -s 'r' -l 'resolved' -l 'continue' -d 'Mark patch failures as resolved'
complete -c git -l 'resolvemsg' -d 'Message to print after patch failure'
complete -c git -l 'abort' -d 'Abort patch operation and restore branch'
complete -c git -l 'quit' -d 'Abort without restoring branch'
complete -c git -l 'show-current-patch' -d 'Show message at which patch failures occured'
complete -c git -d 'Checkout and switch to a branch'
complete -c git -d 'Tag'
complete -c git -d 'Head'
complete -c git -d 'Unique Remote Branch'
complete -c git -s 'b' -d 'Create a new branch'
complete -c git -s 'B' -d 'Create a new branch or reset existing to start point'
complete -c git -s 't' -l 'track' -d 'Track a new branch'
complete -c git -l 'theirs' -d 'Keep staged changes'
complete -c git -l 'ours' -d 'Keep unmerged changes'
complete -c git -l 'recurse-submodules' -d 'Update the work trees of submodules'
complete -c git -l 'no-recurse-submodules' -d 'Do not update the work trees of submodules'
complete -c git -l 'progress' -d 'Report progress even if not connected to a terminal'
complete -c git -l 'no-progress' -d 'Don'"'"'t report progress'
complete -c git -s 'f' -l 'force' -d 'Switch even if working tree differs or unmerged files exist'
complete -c git -d 'Reduce your working tree to a subset of tracked files'
complete -c git -d 'Enable the necessary sparse-checkout config settings'
complete -c git -d 'Describe the directories or patterns in the sparse-checkout file'
complete -c git -d 'Add directories (in cone mode) or patterns (in non-cone mode)'
complete -c git -d 'Reapply the sparsity pattern rules in case of merge-conflict'
complete -c git -d 'Disable sparse-checkout, and restore the working directory to include all files'
complete -c git -d 'Check whether sparsity rules match one or more paths'
complete -c git -l 'stdin' -d 'read patterns from stdin as a newline-delimited list'
complete -c git -l 'no-cone' -d 'input list is considered a list of patterns instead of directory paths'
complete -c git -l 'sparse-index' -d 'use a sparse index to be more closely aligned with your sparse-checkout definition'
complete -c git -l 'no-sparse-index' -d 'not --sparse-index'
complete -c git -d 'Apply a patch'
complete -c git -l 'numstat' -d 'Show number of additions and deletions'
complete -c git -l 'summary' -d 'Output a condensed summary'
complete -c git -l 'check' -d 'Just check if the patches can be applied'
complete -c git -l 'index' -d 'Apply patch to index and working tree'
complete -c git -l 'cached' -d 'Apply patch to index'
complete -c git -l 'intent-to-add' -d 'Add entry for file in index with no content'
complete -c git -s '3' -l '3way' -d 'Attempt a 3 way merge on conflicts'
complete -c git -l 'build-fake-ancestor' -d 'Build a temporary index containing these blobs'
complete -c git -s 'R' -l 'reverse' -d 'Apply the patch in reverse'
complete -c git -l 'reject' -d 'Leave rejected hunks in *.rej files'
complete -c git -s 'z' -d 'Do not munge pathnames'
complete -c git -s 'p' -d 'Remove n leading path components'
complete -c git -s 'C' -d 'Ensure n that lines of surrounding context match'
complete -c git -l 'unidiff-zero' -d 'Do not break on diffs generated using --unified=0'
complete -c git -l 'apply' -d 'Always apply patches'
complete -c git -l 'no-add' -d 'Ignore additions made by patches'
complete -c git -l 'allow-binary-replacement' -l 'binary' -d 'Also patch binaries'
complete -c git -l 'exclude' -d 'Dont apply changes to files matching given pattern'
complete -c git -l 'include' -d 'Apply changes to files matching given pattern'
complete -c git -l 'ignore-space-change' -l 'ignore-whitespace' -d 'Ignore whitespace change in context lines'
complete -c git -l 'whitespace' -d 'Action to take when there are whitespace errors'
complete -c git -l 'inaccurate-eof' -d 'Work around some diff versions not detecting newlines at end of file'
complete -c git -s 'v' -l 'verbose' -d 'Report progress to stderr'
complete -c git -l 'recount' -d 'Do not trust the line counts in the hunk headers'
complete -c git -l 'directory' -d 'Prepend given path to all filenames'
complete -c git -l 'unsafe-paths' -d 'Allow patches that work outside working area'
complete -c git -d 'Create an archive of files from a tree'
complete -c git -s 'l' -l 'list' -d 'Show all available formats'
complete -c git -s 'v' -l 'verbose' -d 'Be verbose'
complete -c git -l 'worktree-attributes' -d 'Look for attributes in .gitattributes files in the working tree as well'
complete -c git -d 'Use binary search to find what introduced a bug'
complete -c git -l 'term-new' -l 'term-bad' -d 'Use another term instead of new/bad'
complete -c git -l 'term-old' -l 'term-good' -d 'Use another term instead of old/good'
complete -c git -l 'no-checkout' -d 'Do not checkout tree, only update BISECT_HEAD'
complete -c git -l 'first-parent' -d 'On merge commits, follow only the first parent commit'
complete -c git -l '--term-good' -d 'Print the term for the old state'
complete -c git -l '--term-bad' -d 'Print the term for the new state'
complete -c git -d 'List, create, or delete branches'
complete -c git -s 'd' -l 'delete' -d 'Delete branch'
complete -c git -s 'D' -d 'Force deletion of branch'
complete -c git -s 'f' -l 'force' -d 'Reset branch even if it already exists'
complete -c git -s 'm' -l 'move' -d 'Rename branch'
complete -c git -s 'M' -d 'Force rename branch'
complete -c git -s 'c' -l 'copy' -d 'Copy branch'
complete -c git -s 'C' -d 'Force copy branch'
complete -c git -s 'a' -l 'all' -d 'Lists both local and remote branches'
complete -c git -s 'r' -l 'remotes' -d 'List or delete (if used with -d) the remote-tracking branches.'
complete -c git -s 't' -l 'track' -l 'track' -d 'Track remote branch'
complete -c git -l 'no-track' -d 'Do not track remote branch'
complete -c git -l 'set-upstream-to' -d 'Set remote branch to track'
complete -c git -l 'merged' -d 'List branches that have been merged'
complete -c git -l 'no-merged' -d 'List branches that have not been merged'
complete -c git -l 'unset-upstream' -d 'Remove branch upstream information'
complete -c git -l 'edit-description' -d 'Edit branch description in editor'
complete -c git -l 'contains' -d 'List branches that contain the specified commit'
complete -c git -d 'Create, unpack, and manipulate "bundle" files'
complete -c git -s 'q' -l 'quiet' -d 'Do not show progress meter'
complete -c git -l 'progress' -d 'Show progress meter'
complete -c git -l 'all-progress' -d 'Show progress meter during object writing phase'
complete -c git -l 'all-progress-implied' -d 'Similar to --all-progress when progress meter is shown'
complete -c git -l 'version' -d 'Specify bundle format version'
complete -c git -d 'Find commits yet to be applied to upstream'
complete -c git -s 'v' -d 'Show the commit subjects next to the SHA1s'
complete -c git -d 'Upstream'
complete -c git -d 'Reapply a commit on another branch'
complete -c git -s 'e' -l 'edit' -d 'Edit the commit message prior to committing'
complete -c git -s 'x' -d 'Append info in generated commit on the origin of the cherry-picked change'
complete -c git -s 'n' -l 'no-commit' -d 'Apply changes without making any commit'
complete -c git -s 's' -l 'signoff' -d 'Add Signed-off-by line to the commit message'
complete -c git -l 'ff' -d 'Fast-forward if possible'
complete -c git -l 'continue' -d 'Continue the operation in progress'
complete -c git -l 'abort' -d 'Cancel the operation'
complete -c git -l 'skip' -d 'Skip the current commit and continue with the rest of the sequence'
complete -c git -d 'Clone a repository into a new directory'
complete -c git -l 'no-hardlinks' -d 'Copy files instead of using hardlinks'
complete -c git -s 'q' -l 'quiet' -d 'Operate quietly and do not report progress'
complete -c git -s 'v' -l 'verbose' -d 'Provide more information on what is going on'
complete -c git -s 'n' -l 'no-checkout' -d 'No checkout of HEAD is performed after the clone is complete'
complete -c git -l 'bare' -d 'Make a bare Git repository'
complete -c git -l 'mirror' -d 'Set up a mirror of the source repository'
complete -c git -s 'o' -l 'origin' -d 'Use a specific name of the remote instead of the default'
complete -c git -s 'b' -l 'branch' -d 'Use a specific branch instead of the one used by the cloned repository'
complete -c git -l 'depth' -d 'Truncate the history to a specified number of revisions'
complete -c git -l 'recursive' -d 'Initialize all submodules within the cloned repository'
complete -c git -l 'filter' -d 'Partial clone by requesting a subset of objects from server'
complete -c git -d 'Record changes to the repository'
complete -c git -l 'amend' -d 'Amend the log message of the last commit'
complete -c git -s 'a' -l 'all' -d 'Automatically stage modified and deleted files'
complete -c git -s 'p' -l 'patch' -d 'Use interactive patch selection interface'
complete -c git -l 'fixup' -d 'Fixup commit to be used with rebase --autosquash'
complete -c git -l 'squash' -d 'Squash commit to be used with rebase --autosquash'
complete -c git -l 'reset-author' -d 'When amending, reset author of commit to the committer'
complete -c git -l 'author' -d 'Override the commit author'
complete -c git -l 'date' -d 'Override the author date'
complete -c git -s 'm' -l 'message' -d 'Use the given message as the commit message'
complete -c git -l 'no-edit' -d 'Use the selected commit message without launching an editor'
complete -c git -l 'no-gpg-sign' -d 'Do not sign commit'
complete -c git -s 'n' -l 'no-verify' -d 'Do not run pre-commit and commit-msg hooks'
complete -c git -l 'allow-empty' -d 'Create a commit with no changes'
complete -c git -l 'allow-empty-message' -d 'Create a commit with no commit message'
complete -c git -s 's' -l 'signoff' -d 'Append Signed-off-by trailer to commit message'
complete -c git -l 'no-signoff' -d 'Do not append Signed-off-by trailer to commit message'
complete -c git -s 'C' -l 'reuse-message' -d 'Reuse log message and authorship of an existing commit'
complete -c git -s 'c' -l 'reedit-message' -d 'Like --reuse-message, but allow editing commit message'
complete -c git -s 'e' -l 'edit' -d 'Further edit the message taken from -m, -C, or -F'
complete -c git -d 'Count number of objects and disk consumption'
complete -c git -s 'v' -l 'verbose' -d 'Be verbose'
complete -c git -s 'H' -l 'human-readable' -d 'Print in human readable format'
complete -c git -d 'A simple server for git repositories'
complete -c git -l 'strict-paths' -d 'Match paths exactly'
complete -c git -l 'base-path' -d 'Git Root'
complete -c git -l 'base-path-relaxed' -d 'When looking up with base path fails, try without it'
complete -c git -l 'interpolated-path' -d 'Construct a path from the given template'
complete -c git -l 'export-all' -d 'Allow pulling from all directories'
complete -c git -l 'inetd' -d 'Run as inetd service'
complete -c git -l 'listen' -d 'Listen on this IP'
complete -c git -l 'port' -d 'Listen on this port'
complete -c git -l 'init-timeout' -d 'Connection timeout'
complete -c git -l 'timeout' -d 'Timeout for each request'
complete -c git -l 'max-connections' -d 'Maximum parallel clients'
complete -c git -l 'syslog' -d '--log-destination=syslog'
complete -c git -l 'log-destination' -d 'Log destination'
complete -c git -l 'user-path' -d 'Allow ~user notation to be used'
complete -c git -l 'verbose' -d 'Log all details'
complete -c git -l 'reuseaddr' -d 'Reuse address when binding to listening server'
complete -c git -l 'detach' -d 'Detach from shell'
complete -c git -l 'reuseaddr' -d 'Save the process id in file'
complete -c git -l 'enable' -d 'Enable service'
complete -c git -l 'disable' -d 'Disable service'
complete -c git -l 'allow-override' -d 'Allow overriding site-wide default per repository configuration'
complete -c git -l 'forbid-override' -d 'Forbid overriding site-wide default per repository configuration'
complete -c git -l 'informative-errors' -d 'Report more verbose errors to clients'
complete -c git -l 'no-informative-errors' -d 'Report less verbose errors to clients'
complete -c git -l 'access-hook' -d 'Hook to run whenever a client connects'
complete -c git -d 'Give an object a human readable name'
complete -c git -d 'Tag'
complete -c git -d 'Head'
complete -c git -l 'dirty' -d 'Describe the state of the working tree, append dirty if there are local changes'
complete -c git -l 'broken' -d 'Describe the state of the working tree, append -broken instead of erroring'
complete -c git -l 'all' -d 'Use all tags, not just annotated'
complete -c git -l 'tags' -d 'Use all commits/tags, not just annotated tags'
complete -c git -l 'contains' -d 'Find the tag that comes after the commit'
complete -c git -l 'abbrev' -d 'Use <n> digits, or as many digits as needed to form a unique object name'
complete -c git -l 'candidates' -d 'Consider up to <n> candidates'
complete -c git -l 'exact-match' -d 'Only output exact matches'
complete -c git -l 'debug' -d 'Display debug info'
complete -c git -l 'long' -d 'Always output the long format'
complete -c git -l 'match' -d 'Only consider tags matching the given glob pattern'
complete -c git -l 'exclude' -d 'Do not consider tags matching the given glob pattern'
complete -c git -l 'always' -d 'Show uniquely abbreviated commit object as fallback'
complete -c git -l 'first-parent' -d 'Follow only the first parent of a merge commit'
complete -c git -d 'Show changes between commits and working tree'
complete -c git -l 'cached' -d 'Show diff of changes in the index'
complete -c git -l 'staged' -d 'Show diff of changes in the index'
complete -c git -l 'no-index' -d 'Compare two paths on the filesystem'
complete -c git -l 'exit-code' -d 'Exit with 1 if there were differences or 0 if no differences'
complete -c git -l 'quiet' -d 'Disable all output of the program, implies --exit-code'
complete -c git -s '1' -l 'base' -d 'Compare the working tree with the "base" version'
complete -c git -s '2' -l 'ours' -d 'Compare the working tree with the "our branch"'
complete -c git -s '3' -l 'theirs' -d 'Compare the working tree with the "their branch"'
complete -c git -s '0' -d 'Omit diff output for unmerged entries and just show "Unmerged"'
complete -c git -d 'Open diffs in a visual tool'
complete -c git -l 'cached' -d 'Visually show diff of changes in the index'
complete -c git -s 'g' -l 'gui' -d 'Use `diff.guitool` instead of `diff.tool`'
complete -c git -s 'd' -l 'dir-diff' -d 'Perform a full-directory diff'
complete -c git -l 'prompt' -d 'Prompt before each invocation of the diff tool'
complete -c git -s 'y' -l 'no-prompt' -d 'Do not prompt before launching a diff tool'
complete -c git -l 'symlinks' -d 'Use symlinks in dir-diff mode'
complete -c git -s 't' -l 'tool' -d 'Use the specified diff tool'
complete -c git -l 'tool-help' -d 'Print a list of diff tools that may be used with `--tool`'
complete -c git -l 'trust-exit-code' -d 'Exit when an invoked diff tool returns a non-zero exit code'
complete -c git -s 'x' -l 'extcmd' -d 'Specify a custom command for viewing diffs'
complete -c git -l 'no-gui' -d 'Overrides --gui setting'
complete -c git -d 'Collect garbage (unreachable commits etc)'
complete -c git -l 'aggressive' -d 'Aggressively optimize the repository'
complete -c git -l 'auto' -d 'Checks any housekeeping is required and then run'
complete -c git -l 'prune' -d 'Prune loose objects older than date'
complete -c git -l 'no-prune' -d 'Do not prune any loose objects'
complete -c git -l 'quiet' -d 'Be quiet'
complete -c git -l 'force' -d 'Force `git gc` to run'
complete -c git -l 'keep-largest-pack' -d 'Ignore `gc.bigPackThreshold`'
complete -c git -d 'Print lines matching a pattern'
complete -c git -l 'cached' -d 'Search blobs registered in the index file'
complete -c git -l 'no-index' -d 'Search files in the current directory not managed by Git'
complete -c git -l 'untracked' -d 'Search also in untracked files'
complete -c git -l 'no-exclude-standard' -d 'Also search in ignored files by not honoring the .gitignore mechanism'
complete -c git -l 'exclude-standard' -d 'Do not search ignored files specified via the .gitignore mechanism'
complete -c git -l 'recurse-submodules' -d 'Recursively search in each submodule that is active and checked out in the repository'
complete -c git -s 'a' -l 'text' -d 'Process binary files as if they were text'
complete -c git -l 'textconv' -d 'Honor textconv filter settings'
complete -c git -l 'no-textconv' -d 'Do not honor textconv filter settings'
complete -c git -s 'i' -l 'ignore-case' -d 'Ignore case differences between the patterns and the files'
complete -c git -s 'r' -l 'recursive' -d 'Descend into levels of directories endlessly'
complete -c git -l 'no-recursive' -d 'Do not descend into directories'
complete -c git -s 'w' -l 'word-regexp' -d 'Match the pattern only at word boundary'
complete -c git -s 'v' -l 'invert-match' -d 'Select non-matching lines'
complete -c git -l 'full-name' -d 'Forces paths to be output relative to the project top directory'
complete -c git -s 'E' -l 'extended-regexp' -d 'Use POSIX extended regexp for patterns'
complete -c git -s 'G' -l 'basic-regexp' -d 'Use POSIX basic regexp for patterns'
complete -c git -s 'P' -l 'perl-regexp' -d 'Use Perl-compatible regular expressions for patterns'
complete -c git -s 'n' -l 'line-number' -d 'Prefix the line number to matching lines'
complete -c git -l 'column' -d 'Prefix the 1-indexed byte-offset of the first match from the start of the matching line'
complete -c git -s 'l' -l 'files-with-matches' -d 'Show only the names of files that contain matches'
complete -c git -s 'L' -l 'files-without-match' -d 'Show only the names of files that do not contain matches'
complete -c git -s 'z' -l 'null' -d 'Use \\0 as the delimiter for pathnames in the output, and print them verbatim'
complete -c git -s 'o' -l 'only-matching' -d 'Print only the matched parts of a matching line'
complete -c git -s 'c' -l 'count' -d 'Instead of showing every matched line, show the number of lines that match'
complete -c git -l 'no-color' -d 'Turn off match highlighting'
complete -c git -l 'break' -d 'Print an empty line between matches from different files'
complete -c git -l 'heading' -d 'Show the filename once above the matches in that file'
complete -c git -s 'p' -l 'show-function' -d 'Show the function name for the match'
complete -c git -s 'W' -l 'function-context' -d 'Show the surrounding function'
complete -c git -s 'e' -d 'The next parameter is the pattern'
complete -c git -l 'and' -d 'Combine patterns using and'
complete -c git -l 'or' -d 'Combine patterns using or'
complete -c git -l 'not' -d 'Combine patterns using not'
complete -c git -l 'all-match' -d 'Only match files that can match all the pattern expressions when giving multiple'
complete -c git -d 'Create an empty git repository'
complete -c git -s 'q' -l 'quiet' -d 'Only print error and warning messages'
complete -c git -l 'bare' -d 'Create a bare repository'
complete -c git -d 'Show commit shortlog'
complete -c git -d 'Show commit logs'
complete -c git -l 'follow' -d 'Continue listing file history beyond renames'
complete -c git -l 'source' -d 'Print ref name by which each commit was reached'
complete -c git -l 'use-mailmap'
complete -c git -l 'full-diff'
complete -c git -l 'log-size'
complete -c git -s 'L' -d 'Trace the evolution of the line range given by <start>,<end>, or regex <funcname>, within the <file>'
complete -c git -s 'n' -l 'max-count' -d 'Limit the number of commits before starting to show the commit output'
complete -c git -l 'skip' -d 'Skip given number of commits'
complete -c git -l 'since' -d 'Show commits more recent than specified date'
complete -c git -l 'after' -d 'Show commits more recent than specified date'
complete -c git -l 'until' -d 'Show commits older than specified date'
complete -c git -l 'before' -d 'Show commits older than specified date'
complete -c git -l 'author' -d 'Limit commits from given author'
complete -c git -l 'committer' -d 'Limit commits from given committer'
complete -c git -l 'grep-reflog' -d 'Limit commits to ones with reflog entries matching given pattern'
complete -c git -l 'grep' -d 'Limit commits with message that match given pattern'
complete -c git -l 'all-match' -d 'Limit commits to ones that match all given --grep'
complete -c git -l 'regexp-ignore-case' -s 'i' -d 'Case insensitive match'
complete -c git -l 'basic-regexp' -d 'Patterns are basic regular expressions (default)'
complete -c git -l 'extended-regexp' -s 'E' -d 'Patterns are extended regular expressions'
complete -c git -l 'fixed-strings' -s 'F' -d 'Patterns are fixed strings'
complete -c git -l 'perl-regexp' -d 'Patterns are Perl-compatible regular expressions'
complete -c git -l 'remove-empty' -d 'Stop when given path disappears from tree'
complete -c git -l 'merges' -d 'Print only merge commits'
complete -c git -l 'min-parents' -d 'Show only commit with at least the given number of parents'
complete -c git -l 'max-parents' -d 'Show only commit with at most the given number of parents'
complete -c git -l 'no-min-parents' -d 'Show only commit without a minimum number of parents'
complete -c git -l 'no-max-parents' -d 'Show only commit without a maximum number of parents'
complete -c git -l 'first-parent' -d 'Follow only the first parent commit upon seeing a merge commit'
complete -c git -l 'not' -d 'Reverse meaning of ^ prefix'
complete -c git -l 'all' -d 'Show log for all branches, tags, and remotes'
complete -c git -l 'branches' -d 'Show log for all matching branches'
complete -c git -l 'tags' -d 'Show log for all matching tags'
complete -c git -l 'remotes' -d 'Show log for all matching remotes'
complete -c git -l 'glob' -d 'Show log for all matching branches, tags, and remotes'
complete -c git -l 'exclude' -d 'Do not include refs matching given glob pattern'
complete -c git -l 'reflog' -d 'Show log for all reflogs entries'
complete -c git -l 'ignore-missing' -d 'Ignore invalid object names'
complete -c git -l 'bisect'
complete -c git -l 'stdin' -d 'Read commits from stdin'
complete -c git -l 'cherry-mark' -d 'Mark equivalent commits with = and inequivalent with +'
complete -c git -l 'cherry-pick' -d 'Omit equivalent commits'
complete -c git -l 'filter' -d 'Omits objects from the list of printed objects'
complete -c git -l 'left-only'
complete -c git -l 'right-only'
complete -c git -l 'cherry'
complete -c git -l 'walk-reflogs' -s 'g'
complete -c git -l 'merge'
complete -c git -l 'boundary'
complete -c git -l 'simplify-by-decoration'
complete -c git -l 'full-history'
complete -c git -l 'dense'
complete -c git -l 'sparse'
complete -c git -l 'simplify-merges'
complete -c git -l 'ancestry-path'
complete -c git -l 'date-order'
complete -c git -l 'author-date-order'
complete -c git -l 'topo-order'
complete -c git -l 'reverse'
complete -c git -l 'no-walk'
complete -c git -l 'do-walk'
complete -c git -l 'format'
complete -c git -l 'abbrev-commit'
complete -c git -l 'no-abbrev-commit'
complete -c git -l 'oneline'
complete -c git -l 'encoding'
complete -c git -l 'expand-tabs'
complete -c git -l 'no-expand-tabs'
complete -c git -l 'notes'
complete -c git -l 'no-notes'
complete -c git -l 'show-notes'
complete -c git -l 'standard-notes'
complete -c git -l 'no-standard-notes'
complete -c git -l 'show-signature'
complete -c git -l 'relative-date'
complete -c git -l 'parents'
complete -c git -l 'children'
complete -c git -l 'left-right'
complete -c git -l 'graph'
complete -c git -l 'show-linear-break'
complete -c git -s 'c'
complete -c git -l 'cc'
complete -c git -s 'm'
complete -c git -s 'r'
complete -c git -s 't'
complete -c git -l 'patch' -s 'p'
complete -c git -s 'u'
complete -c git -l 'no-patch' -s 's'
complete -c git -l 'unified' -s 'U'
complete -c git -l 'raw'
complete -c git -l 'patch-with-raw'
complete -c git -l 'indent-heuristic'
complete -c git -l 'no-indent-heuristic'
complete -c git -l 'compaction-heuristic'
complete -c git -l 'no-compaction-heuristic'
complete -c git -l 'minimal'
complete -c git -l 'patience'
complete -c git -l 'histogram'
complete -c git -l 'stat'
complete -c git -l 'numstat'
complete -c git -l 'shortstat'
complete -c git -l 'summary'
complete -c git -l 'patch-with-stat'
complete -c git -s 'z'
complete -c git -l 'name-only'
complete -c git -l 'name-status'
complete -c git -l 'color'
complete -c git -l 'no-color'
complete -c git -l 'color-words'
complete -c git -l 'no-renames'
complete -c git -l 'check'
complete -c git -l 'full-index'
complete -c git -l 'binary'
complete -c git -l 'abbrev'
complete -c git -s 'l'
complete -c git -l 'diff-filter'
complete -c git -d 'Show information about files'
complete -c git -s 'c' -l 'cached' -d 'Show cached files in the output'
complete -c git -s 'd' -l 'deleted' -d 'Show deleted files in the output'
complete -c git -s 'm' -l 'modified' -d 'Show modified files in the output'
complete -c git -s 'o' -l 'others' -d 'Show other (i.e. untracked) files in the output'
complete -c git -s 'i' -l 'ignored' -d 'Show only ignored files in the output'
complete -c git -s 's' -l 'stage' -d 'Show staged contents'"'"' mode bits, object name and stage number in the output'
complete -c git -l 'directory' -d 'If a whole directory is classified as "other", show just its name'
complete -c git -l 'no-empty-directory' -d 'Do not list empty directories'
complete -c git -s 'u' -l 'unmerged' -d 'Show unmerged files in the output'
complete -c git -s 'k' -l 'killed' -d 'Show files on the filesystem that need to be removed for checkout-index to succeed'
complete -c git -s 'z' -d 'Use \0 delimiter'
complete -c git -s 'x' -l 'exclude' -d 'Skip untracked files matching pattern'
complete -c git -s 'X' -l 'exclude-from' -d 'Read exclude patterns from <file>; 1 per line'
complete -c git -l 'exclude-per-directory' -d 'Read extra exclude patterns that apply only to the dir and its subdirs in <file>'
complete -c git -l 'exclude-standard' -d 'Add the standard Git exclusions'
complete -c git -l 'error-unmatch' -d 'If any <file> does not appear in the index, treat this as an error'
complete -c git -l 'with-tree'
complete -c git -s 't' -d 'Identifies the file status'
complete -c git -s 'v' -d 'Show file status, use lowercase letters for files assumed unchanged'
complete -c git -s 'f' -d 'Show file status, use lowercase letters for files marked as fsmonitor valid'
complete -c git -l 'full-name' -d 'Force paths to be output relative to the project top directory'
complete -c git -l 'recurse-submodules' -d 'Recursively calls ls-files on each submodule in the repository'
complete -c git -l 'abbrev' -d 'Show only a partial prefix'
complete -c git -l 'debug' -d 'After each line that describes a file, add more data about its cache entry'
complete -c git -l 'eol' -d 'Show <eolinfo> and <eolattr> of files'
complete -c git -d 'Extracts patch and authorship from an e-mail'
complete -c git -s 'k' -d 'Do not remove email cruft from subject'
complete -c git -s 'u' -d 'Do not reencode author name and email'
complete -c git -l 'encoding' -d 'Re-encode to given charset'
complete -c git -s 'n' -d 'Disable all charset re-encoding of metadata'
complete -c git -s 'm' -l 'message-id' -d 'Copy message id to the end of commit message'
complete -c git -l 'scissors' -d 'Remove everything above scissor line'
complete -c git -l 'no-scissors' -d 'Ignore scissor lines'
complete -c git -l 'quoted-cr' -d 'Action when processed email message end with CRLF instead of LF'
complete -c git -d 'mbox splitter'
complete -c git -s 'o' -d 'Directory to place individual messages'
complete -c git -s 'b' -d 'Treat files not starting with From line as single mail message'
complete -c git -s 'd' -d 'File name prefix digit precision'
complete -c git -s 'f' -d 'Skip first n numbers'
complete -c git -l 'keep-cr' -d 'Do not remove \\r from lines starting with \\n\\r'
complete -c git -l 'mboxrd' -d 'Input is of mboxrd form'
complete -c git -d 'Run tasks to optimize Git repository data'
complete -c git -d 'Initialize Git config vars for maintenance'
complete -c git -d 'Run one or more maintenance tasks'
complete -c git -d 'Start maintenance'
complete -c git -d 'Halt background maintenance'
complete -c git -d 'Remove repository from background maintenance'
complete -c git -l 'quiet' -d 'Supress logs'
complete -c git -l 'task' -d 'Tasks to run'
complete -c git -l 'auto' -d 'Run maintenance only when necessary'
complete -c git -l 'schedule' -d 'Run maintenance on certain intervals'
complete -c git -d 'Join multiple development histories'
complete -c git -l 'commit' -d 'Autocommit the merge'
complete -c git -l 'no-commit' -d 'Don'"'"'t autocommit the merge'
complete -c git -s 'e' -l 'edit' -d 'Edit auto-generated merge message'
complete -c git -l 'no-edit' -d 'Don'"'"'t edit auto-generated merge message'
complete -c git -l 'ff' -d 'Don'"'"'t generate a merge commit if merge is fast-forward'
complete -c git -l 'no-ff' -d 'Generate a merge commit even if merge is fast-forward'
complete -c git -l 'ff-only' -d 'Refuse to merge unless fast-forward possible'
complete -c git -s 'S' -l 'gpg-sign' -d 'GPG-sign the merge commit'
complete -c git -l 'log' -d 'Populate the log message with one-line descriptions'
complete -c git -l 'no-log' -d 'Don'"'"'t populate the log message with one-line descriptions'
complete -c git -l 'signoff' -d 'Add Signed-off-by line at the end of the merge commit message'
complete -c git -l 'no-signoff' -d 'Do not add a Signed-off-by line at the end of the merge commit message'
complete -c git -l 'stat' -d 'Show diffstat of the merge'
complete -c git -s 'n' -l 'no-stat' -d 'Don'"'"'t show diffstat of the merge'
complete -c git -l 'squash' -d 'Squash changes from other branch as a single commit'
complete -c git -l 'no-squash' -d 'Don'"'"'t squash changes'
complete -c git -s 's' -l 'strategy' -d 'Use the given merge strategy'
complete -c git -s 'X' -l 'strategy-option' -d 'Pass given option to the merge strategy'
complete -c git -l 'verify-signatures' -d 'Abort merge if other branch tip commit is not signed with a valid key'
complete -c git -l 'no-verify-signatures' -d 'Do not abort merge if other branch tip commit is not signed with a valid key'
complete -c git -s 'q' -l 'quiet' -d 'Be quiet'
complete -c git -s 'v' -l 'verbose' -d 'Be verbose'
complete -c git -l 'progress' -d 'Force progress status'
complete -c git -l 'no-progress' -d 'Force no progress status'
complete -c git -l 'allow-unrelated-histories' -d 'Allow merging even when branches do not share a common history'
complete -c git -s 'm' -d 'Set the commit message'
complete -c git -l 'rerere-autoupdate' -d 'If possible, use previous conflict resolutions'
complete -c git -l 'no-rerere-autoupdate' -d 'Do not use previous conflict resolutions'
complete -c git -l 'abort' -d 'Abort the current conflict resolution process'
complete -c git -l 'continue' -d 'Conclude current conflict resolution process'
complete -c git -l 'autostash' -d 'Before starting merge, stash local changes, and apply stash when done'
complete -c git -l 'no-autostash' -d 'Do not stash local changes before starting merge'
complete -c git -d 'Find a common ancestor for a merge'
complete -c git -s 'a' -l 'all' -d 'Output all merge bases for the commits, instead of just one'
complete -c git -l 'octopus' -d 'Compute the best common ancestors of all supplied commits'
complete -c git -l 'independent' -d 'Print a minimal subset of the supplied commits with the same ancestors'
complete -c git -l 'is-ancestor' -d 'Check if the first commit is an ancestor of the second commit'
complete -c git -l 'fork-point' -d 'Find the point at which a branch forked from another branch ref'
complete -c git -d 'Run merge conflict resolution tool'
complete -c git -s 't' -l 'tool' -d 'Use specific merge resolution program'
complete -c git -l 'tool-help' -d 'Print a list of merge tools that may be used with `--tool`'
complete -c git -s 'y' -l 'no-prompt' -d 'Do not prompt before launching a diff tool'
complete -c git -l 'prompt' -d 'Prompt before each invocation of the merge resolution program'
complete -c git -s 'O' -d 'Process files in the order specified in the file passed as argument'
complete -c git -d 'Move or rename a file'
complete -c git -s 'f' -l 'force' -d 'Force rename/moving even if target exists'
complete -c git -s 'k' -d 'Skip rename/move which can lead to error'
complete -c git -s 'n' -l 'dry-run' -d 'Only show what would happen'
complete -c git -s 'v' -l 'verbose' -d 'Report names of files as they are changed'
complete -c git -d 'Add or inspect object notes'
complete -c git -d 'List notes for given object'
complete -c git -d 'Add notes for a given object'
complete -c git -d 'Copy notes from object1 to object2'
complete -c git -d 'Append to the notes of existing object'
complete -c git -d 'Edit notes for a given object'
complete -c git -d 'Show notes for given object'
complete -c git -d 'Merge the given notes ref to current notes ref'
complete -c git -d 'Remove notes for given object'
complete -c git -d 'Remove notes for non-existing/unreachable objects'
complete -c git -d 'Print current notes ref'
complete -c git -s 'f' -l 'force' -d 'Overwrite existing notes'
complete -c git -l 'allow-empty' -d 'Allow empty note'
complete -c git -s 'F' -l 'file' -d 'Read note message from file'
complete -c git -s 'm' -l 'message' -d 'Use this note message'
complete -c git -s 'C' -l 'reuse-message' -d 'Copy note from object'
complete -c git -s 'c' -l 'reedit-message' -d 'Copy and edit note from object'
complete -c git -l 'stdin' -d 'Read object names from stdin'
complete -c git -s 'v' -l 'verbose' -d 'Be more verbose'
complete -c git -s 'q' -l 'quiet' -d 'Operate quietly'
complete -c git -l 'commit' -d 'Finalize git notes merge'
complete -c git -l 'abort' -d 'Abort git notes merge'
complete -c git -l 'ignore-missing' -d 'Do not throw error on deleting non-existing object note'
complete -c git -d 'Prune unreachable objects from the database'
complete -c git -s 'n' -l 'dry-run' -d 'Just report what it would remove'
complete -c git -s 'v' -l 'verbose' -d 'Report all removed objects'
complete -c git -l 'progress' -d 'Show progress'
complete -c git -d 'Fetch from and merge with another repo or branch'
complete -c git -s 'q' -l 'quiet' -d 'Be quiet'
complete -c git -s 'v' -l 'verbose' -d 'Be verbose'
complete -c git -l 'all' -d 'Fetch all remotes'
complete -c git -s 'a' -l 'append' -d 'Append ref names and object names'
complete -c git -s 'f' -l 'force' -d 'Force update of local branches'
complete -c git -s 'k' -l 'keep' -d 'Keep downloaded pack'
complete -c git -l 'no-tags' -d 'Disable automatic tag following'
complete -c git -s 'p' -l 'prune' -d 'Remove remote-tracking references that no longer exist on the remote'
complete -c git -l 'progress' -d 'Force progress status'
complete -c git -d 'Remote alias'
complete -c git -l 'commit' -d 'Autocommit the merge'
complete -c git -l 'no-commit' -d 'Don'"'"'t autocommit the merge'
complete -c git -s 'e' -l 'edit' -d 'Edit auto-generated merge message'
complete -c git -l 'no-edit' -d 'Don'"'"'t edit auto-generated merge message'
complete -c git -l 'ff' -d 'Don'"'"'t generate a merge commit if merge is fast-forward'
complete -c git -l 'no-ff' -d 'Generate a merge commit even if merge is fast-forward'
complete -c git -l 'ff-only' -d 'Refuse to merge unless fast-forward possible'
complete -c git -s 'S' -l 'gpg-sign' -d 'GPG-sign the merge commit'
complete -c git -l 'log' -d 'Populate the log message with one-line descriptions'
complete -c git -l 'no-log' -d 'Don'"'"'t populate the log message with one-line descriptions'
complete -c git -l 'signoff' -d 'Add Signed-off-by line at the end of the merge commit message'
complete -c git -l 'no-signoff' -d 'Do not add a Signed-off-by line at the end of the merge commit message'
complete -c git -l 'stat' -d 'Show diffstat of the merge'
complete -c git -s 'n' -l 'no-stat' -d 'Don'"'"'t show diffstat of the merge'
complete -c git -l 'squash' -d 'Squash changes from upstream branch as a single commit'
complete -c git -l 'no-squash' -d 'Don'"'"'t squash changes'
complete -c git -s 's' -l 'strategy' -d 'Use the given merge strategy'
complete -c git -s 'X' -l 'strategy-option' -d 'Pass given option to the merge strategy'
complete -c git -l 'verify-signatures' -d 'Abort merge if upstream branch tip commit is not signed with a valid key'
complete -c git -l 'no-verify-signatures' -d 'Do not abort merge if upstream branch tip commit is not signed with a valid key'
complete -c git -l 'allow-unrelated-histories' -d 'Allow merging even when branches do not share a common history'
complete -c git -s 'r' -l 'rebase' -d 'Rebase the current branch on top of the upstream branch'
complete -c git -l 'no-rebase' -d 'Do not rebase the current branch on top of the upstream branch'
complete -c git -l 'autostash' -d 'Before starting rebase, stash local changes, and apply stash when done'
complete -c git -l 'no-autostash' -d 'Do not stash local changes before starting rebase'
complete -c git -d 'Compare two commit ranges'
complete -c git -l 'creation-factor' -d 'Percentage by which creation is weighted'
complete -c git -l 'no-dual-color' -d 'Use simple diff colors'
complete -c git -d 'Push changes elsewhere'
complete -c git -d 'Remote alias'
complete -c git -d 'Tag'
complete -c git -d 'Force-push branch'
complete -c git -d 'Delete remote branch'
complete -c git -d 'Force-push local branch to remote branch'
complete -c git -d 'Push local branch to remote branch'
complete -c git -l 'all' -d 'Push all refs under refs/heads/'
complete -c git -l 'prune' -d 'Remove remote branches that don'"'"'t have a local counterpart'
complete -c git -l 'mirror' -d 'Push all refs under refs/'
complete -c git -l 'delete' -d 'Delete all listed refs from the remote repository'
complete -c git -l 'tags' -d 'Push all refs under refs/tags'
complete -c git -l 'follow-tags' -d 'Push all usual refs plus the ones under refs/tags'
complete -c git -s 'n' -l 'dry-run' -d 'Do everything except actually send the updates'
complete -c git -l 'porcelain' -d 'Produce machine-readable output'
complete -c git -s 'f' -l 'force' -d 'Force update of remote refs'
complete -c git -l 'force-if-includes' -d 'Force an update only if the tip of the remote-tracking ref has been integrated locally'
complete -c git -s 'u' -l 'set-upstream' -d 'Add upstream (tracking) reference'
complete -c git -s 'q' -l 'quiet' -d 'Be quiet'
complete -c git -s 'v' -l 'verbose' -d 'Be verbose'
complete -c git -l 'progress' -d 'Force progress status'
complete -c git -d 'Reapply commit sequence on a new base'
complete -c git -d 'Remote alias'
complete -c git -d 'Head'
complete -c git -d 'Tag'
complete -c git -l 'continue' -d 'Restart the rebasing process'
complete -c git -l 'abort' -d 'Abort the rebase operation'
complete -c git -l 'edit-todo' -d 'Edit the todo list'
complete -c git -l 'keep-empty' -d 'Keep the commits that don'"'"'t change anything'
complete -c git -l 'skip' -d 'Restart the rebasing process by skipping the current patch'
complete -c git -s 'm' -l 'merge' -d 'Use merging strategies to rebase'
complete -c git -s 'q' -l 'quiet' -d 'Be quiet'
complete -c git -s 'v' -l 'verbose' -d 'Be verbose'
complete -c git -l 'stat' -d 'Show diffstat of the rebase'
complete -c git -s 'n' -l 'no-stat' -d 'Don'"'"'t show diffstat of the rebase'
complete -c git -l 'verify' -d 'Allow the pre-rebase hook to run'
complete -c git -l 'no-verify' -d 'Don'"'"'t allow the pre-rebase hook to run'
complete -c git -s 'f' -l 'force-rebase' -d 'Force the rebase'
complete -c git -l 'committer-date-is-author-date' -d 'Use the author date as the committer date'
complete -c git -l 'ignore-date' -d 'Use the committer date as the author date'
complete -c git -s 'i' -l 'interactive' -d 'Interactive mode'
complete -c git -s 'p' -l 'preserve-merges' -d 'Try to recreate merges'
complete -c git -s 'r' -l 'rebase-merges' -d 'Preserve branch structure'
complete -c git -l 'root' -d 'Rebase all reachable commits'
complete -c git -l 'autosquash' -d 'Automatic squashing'
complete -c git -l 'no-autosquash' -d 'No automatic squashing'
complete -c git -l 'autostash' -d 'Before starting rebase, stash local changes, and apply stash when done'
complete -c git -l 'no-autostash' -d 'Do not stash local changes before starting rebase'
complete -c git -l 'no-ff' -d 'No fast-forward'
complete -c git -l 'onto' -d 'Rebase current branch onto given upstream or newbase'
complete -c git -l 'update-refs' -d 'Update any branches that point to commits being rebased'
complete -c git -l 'exec' -d 'Execute shellscript'
complete -c git -d 'Manage reflog information'
complete -c git -d 'Head'
complete -c git -d 'Reset current HEAD to the specified state'
complete -c git -l 'hard' -d 'Reset the index and the working tree'
complete -c git -l 'soft' -d 'Reset head without touching the index or the working tree'
complete -c git -l 'mixed' -d 'The default: reset the index but not the working tree'
complete -c git -d 'Reflog'
complete -c git -d 'Restore working tree files'
complete -c git -s 's' -l 'source' -d 'Specify the source tree used to restore the working tree'
complete -c git -s 'p' -l 'patch' -d 'Interactive mode'
complete -c git -s 'W' -l 'worktree' -d 'Restore working tree (default)'
complete -c git -s 'S' -l 'staged' -d 'Restore the index'
complete -c git -l 'ours' -d 'When restoring files, use stage #2 (ours)'
complete -c git -l 'theirs' -d 'When restoring files, use stage #3 (theirs)'
complete -c git -s 'm' -l 'merge' -d 'Recreate the conflicted merge in the unmerged paths when restoring files'
complete -c git -l 'ignore-unmerged' -d 'When restoring files, do not abort the operation if there are unmerged entries'
complete -c git -l 'ignore-skip-worktree-bits' -d 'Ignore the sparse-checkout file and unconditionally restore any files in <pathspec>'
complete -c git -l 'overlay' -d 'Never remove files when restoring'
complete -c git -l 'no-overlay' -d 'Remove files when restoring (default)'
complete -c git -d 'Switch to a branch'
complete -c git -d 'Unique Remote Branch'
complete -c git -s 'c' -l 'create' -d 'Create a new branch'
complete -c git -s 'C' -l 'force-create' -d 'Force create a new branch'
complete -c git -s 'd' -l 'detach'
complete -c git -s 'd' -l 'detach' -d 'Switch to a commit for inspection and discardable experiment'
complete -c git -l 'guess' -d 'Guess branch name from remote branch (default)'
complete -c git -l 'no-guess' -d 'Do not guess branch name from remote branch'
complete -c git -s 'f' -l 'force' -l 'discard-changes' -d 'Proceed even if the index or the working tree differs from HEAD'
complete -c git -s 'm' -l 'merge' -d 'Merge the current branch and contents of the working tree into a new branch'
complete -c git -s 't' -l 'track' -d 'Track remote branch when creating a new branch'
complete -c git -l 'no-track' -d 'Do not track remote branch when creating a new branch'
complete -c git -l 'orphan' -d 'Create a new orphan branch'
complete -c git -l 'ignore-other-worktrees' -d 'Force check out of the reference'
complete -c git -l 'recurse-submodules' -d 'Update the work trees of submodules'
complete -c git -l 'no-recurse-submodules' -d 'Do not update the work trees of submodules'
complete -c git -s 'q' -l 'quiet' -d 'Suppress messages'
complete -c git -l 'progress' -d 'Report progress status to stderr (default)'
complete -c git -l 'no-progress' -d 'Do not report progress status to stderr'
complete -c git -d 'List commits in chronological order'
complete -c git -d 'Parse revision names or give repo information'
complete -c git -d 'Head'
complete -c git -d 'Tag'
complete -c git -l 'abbrev-ref' -d 'Output non-ambiguous short object names'
complete -c git -d 'Revert an existing commit'
complete -c git -l 'continue' -d 'Continue the operation in progress'
complete -c git -l 'abort' -d 'Cancel the operation'
complete -c git -l 'skip' -d 'Skip the current commit and continue with the rest of the sequence'
complete -c git -l 'quit' -d 'Forget about the current operation in progress'
complete -c git -l 'no-edit' -d 'Do not start the commit message editor'
complete -c git -s 's' -l 'signoff' -d 'Add a Signed-off-by trailer at the end of the commit message'
complete -c git -l 'rerere-autoupdate' -d 'Allow the rerere mechanism to update the index automatically'
complete -c git -l 'no-rerere-autoupdate' -d 'Prevent the rerere mechanism from updating the index with auto-conflict resolution'
complete -c git -d 'Remove files from the working tree and/or staging area'
complete -c git -l 'cached' -d 'Unstage files from the index'
complete -c git -l 'ignore-unmatch' -d 'Exit with a zero status even if no files matched'
complete -c git -s 'r' -d 'Allow recursive removal'
complete -c git -s 'q' -l 'quiet' -d 'Be quiet'
complete -c git -s 'f' -l 'force' -d 'Override the up-to-date check'
complete -c git -s 'n' -l 'dry-run' -d 'Dry run'
complete -c git -l 'sparse' -d 'Allow updating index entries outside of the sparse-checkout cone'
complete -c git -d 'Show the working tree status'
complete -c git -s 's' -l 'short' -d 'Give the output in the short-format'
complete -c git -s 'b' -l 'branch' -d 'Show the branch and tracking info even in short-format'
complete -c git -l 'porcelain' -d 'Give the output in a stable, easy-to-parse format'
complete -c git -s 'z' -d 'Terminate entries with null character'
complete -c git -s 'u' -l 'untracked-files' -d 'The untracked files handling mode'
complete -c git -l 'ignore-submodules' -d 'Ignore changes to submodules'
complete -c git -s 'v' -l 'verbose' -d 'Also show the textual changes that are staged to be committed'
complete -c git -l 'no-ahead-behind' -d 'Do not display detailed ahead/behind upstream-branch counts'
complete -c git -l 'renames' -d 'Turn on rename detection regardless of user configuration'
complete -c git -l 'no-renames' -d 'Turn off rename detection regardless of user configuration'
complete -c git -d 'Remove unnecessary whitespace'
complete -c git -s 's' -l 'strip-comments' -d 'Strip all lines starting with comment character'
complete -c git -s 'c' -l 'comment-lines' -d 'Prepend comment character to each line'
complete -c git -d 'Create, list, delete or verify a tag object signed with GPG'
complete -c git -s 'a' -l 'annotate' -d 'Make an unsigned, annotated tag object'
complete -c git -s 's' -l 'sign' -d 'Make a GPG-signed tag'
complete -c git -s 'd' -l 'delete' -d 'Remove a tag'
complete -c git -s 'v' -l 'verify' -d 'Verify signature of a tag'
complete -c git -s 'f' -l 'force' -d 'Force overwriting existing tag'
complete -c git -s 'l' -l 'list' -d 'List tags'
complete -c git -l 'contains' -d 'List tags that contain a commit'
complete -c git -d 'Tag'
complete -c git -d 'Register file contents in the working tree to the index'
complete -c git -l 'add' -d 'Add specified files to the index'
complete -c git -l 'remove' -d 'Remove specified files from the index'
complete -c git -l 'refresh' -d 'Refresh current index'
complete -c git -s 'q' -d 'Continue refresh after error'
complete -c git -l 'ignore-submodules' -d 'Do not try to update submodules'
complete -c git -l 'unmerged' -d 'Continue on unmerged changes in the index'
complete -c git -l 'ignore-missing' -d 'Ignores missing files during a refresh'
complete -c git -l 'index-info' -d 'Read index information from stdin'
complete -c git -l 'chmod' -d 'Set execute permissions'
complete -c git -l 'assume-unchanged' -d 'Set the "assume unchanged" bit for the paths'
complete -c git -l 'no-assume-unchanged' -d 'Unset the "assume unchanged" bit'
complete -c git -l 'really-refresh' -d 'Refresh but check stat info unconditionally'
complete -c git -l 'skip-worktree' -d 'Set the "fsmonitor valid" bit'
complete -c git -l 'no-skip-worktree' -d 'Unset the "fsmonitor valid" bit'
complete -c git -l 'fsmonitor-valid' -d 'Set the "fsmonitor valid" bit'
complete -c git -l 'no-fsmonitor-valid' -d 'Unset the "fsmonitor valid" bit'
complete -c git -s 'g' -l 'again' -d 'Run git update-index on paths with differing index'
complete -c git -l 'unresolve' -d 'Restores the state of a file during a merge'
complete -c git -l 'info-only' -d 'Do not create objects in the object database'
complete -c git -l 'force-remove' -d 'Forcefully remove the file from the index'
complete -c git -l 'replace' -d 'Replace conflicting entries'
complete -c git -l 'stdin' -d 'Read list of paths from stdin'
complete -c git -l 'verbose' -d 'Report changes to index'
complete -c git -l 'index-version' -d 'Set index-version'
complete -c git -s 'z' -d 'Seperate paths with NUL instead of LF'
complete -c git -l 'split-index' -d 'Enable split index mode'
complete -c git -l 'no-split-index' -d 'Disable split index mode'
complete -c git -l 'untracked-cache' -d 'Enable untracked cache feature'
complete -c git -l 'no-untracked-cache' -d 'Disable untracked cache feature'
complete -c git -l 'test-untracked-cache' -d 'Only perform tests on the working directory'
complete -c git -l 'force-untracked-cache' -d 'Same as --untracked-cache'
complete -c git -l 'fsmonitor' -d 'Enable files system monitor feature'
complete -c git -l 'no-fsmonitor' -d 'Disable files system monitor feature'
complete -c git -d 'Manage multiple working trees'
complete -c git -d 'Create a working tree'
complete -c git -d 'List details of each worktree'
complete -c git -d 'Lock a working tree'
complete -c git -d 'Move a working tree to a new location'
complete -c git -d 'Prune working tree information in $GIT_DIR/worktrees'
complete -c git -d 'Remove a working tree'
complete -c git -d 'Unlock a working tree'
complete -c git -s 'f' -l 'force' -d 'Override safeguards'
complete -c git -d 'Head'
complete -c git -d 'Tag'
complete -c git -d 'Unique Remote Branch'
complete -c git -s 'b' -d 'Create a new branch'
complete -c git -s 'B' -d 'Create a new branch even if it already exists'
complete -c git -l 'detach' -d 'Detach HEAD in the new working tree'
complete -c git -l 'checkout' -d 'Checkout <commit-ish> after creating working tree'
complete -c git -l 'no-checkout' -d 'Suppress checkout'
complete -c git -l 'guess-remote'
complete -c git -l 'no-guess-remote'
complete -c git -l 'track' -d 'Mark <commit-ish> as "upstream" from the new branch'
complete -c git -l 'lock' -d 'Lock working tree after creation'
complete -c git -s 'q' -l 'quiet' -d 'Suppress feedback messages'
complete -c git -l 'porcelain' -d 'Output in an easy-to-parse format for scripts'
complete -c git -d 'Worktree'
complete -c git -l 'reason' -d 'An explanation why the working tree is locked'
complete -c git -d 'Worktree'
complete -c git -s 'n' -l 'dry-run' -d 'Do not remove anything'
complete -c git -s 'v' -l 'verbose' -d 'Report all removals'
complete -c git -l 'expire' -d 'Only expire unused working trees older than <time>'
complete -c git -d 'Worktree'
complete -c git -d 'Worktree'
complete -c git -d 'Stash away changes'
complete -c git -d 'List stashes'
complete -c git -d 'Show the changes recorded in the stash'
complete -c git -d 'Apply and remove a single stashed state'
complete -c git -d 'Apply a single stashed state'
complete -c git -d 'Remove all stashed states'
complete -c git -d 'Remove a single stashed state from the stash list'
complete -c git -d 'Create a stash'
complete -c git -d 'Save a new stash'
complete -c git -d 'Create a new branch from a stash'
complete -c git -d 'Create a new stash with given files'
complete -c git -s 'a' -l 'all' -d 'Stash ignored and untracked files'
complete -c git -s 'k' -l 'keep-index' -d 'Keep changes in index intact'
complete -c git -s 'p' -l 'patch' -d 'Interactively select hunks'
complete -c git -s 'm' -l 'message' -d 'Add a description'
complete -c git -s 'S' -l 'staged' -d 'Stash only staged changes'
complete -c git -s 'u' -l 'include-untracked' -d 'Stash untracked files'
complete -c git -d 'Set and read git configuration variables'
complete -c git -d 'Generate patch series to send upstream'
complete -c git -s 'o' -l 'output-directory'
complete -c git -s 'p' -l 'no-stat' -d 'Generate plain patches without diffstat'
complete -c git -s 's' -l 'no-patch' -d 'Suppress diff output'
complete -c git -l 'minimal' -d 'Spend more time to create smaller diffs'
complete -c git -l 'patience' -d 'Generate diff with the '"'"'patience'"'"' algorithm'
complete -c git -l 'histogram' -d 'Generate diff with the '"'"'histogram'"'"' algorithm'
complete -c git -l 'stdout' -d 'Print all commits to stdout in mbox format'
complete -c git -l 'numstat' -d 'Show number of added/deleted lines in decimal notation'
complete -c git -l 'shortstat' -d 'Output only last line of the stat'
complete -c git -l 'summary' -d 'Output a condensed summary of extended header information'
complete -c git -l 'no-renames' -d 'Disable rename detection'
complete -c git -l 'full-index' -d 'Show full blob object names'
complete -c git -l 'binary' -d 'Output a binary diff for use with git apply'
complete -c git -l 'find-copies-harder' -d 'Also inspect unmodified files as source for a copy'
complete -c git -l 'text' -s 'a' -d 'Treat all files as text'
complete -c git -l 'ignore-space-at-eol' -d 'Ignore changes in whitespace at EOL'
complete -c git -l 'ignore-space-change' -s 'b' -d 'Ignore changes in amount of whitespace'
complete -c git -l 'ignore-all-space' -s 'w' -d 'Ignore whitespace when comparing lines'
complete -c git -l 'ignore-blank-lines' -d 'Ignore changes whose lines are all blank'
complete -c git -l 'function-context' -s 'W' -d 'Show whole surrounding functions of changes'
complete -c git -l 'ext-diff' -d 'Allow an external diff helper to be executed'
complete -c git -l 'no-ext-diff' -d 'Disallow external diff helpers'
complete -c git -l 'no-textconv' -d 'Disallow external text conversion filters for binary files (Default)'
complete -c git -l 'textconv' -d 'Allow external filters for binary files (Resulting diff is unappliable)'
complete -c git -l 'no-prefix' -d 'Do not show source or destination prefix'
complete -c git -l 'numbered' -s 'n' -d 'Name output in [Patch n/m] format, even with a single patch'
complete -c git -l 'no-numbered' -s 'N' -d 'Name output in [Patch] format, even with multiple patches'
complete -c git -d 'Initialize, update or inspect submodules'
complete -c git -d 'Add a submodule'
complete -c git -d 'Show submodule status'
complete -c git -d 'Initialize all submodules'
complete -c git -d 'Unregister the given submodules'
complete -c git -d 'Update all submodules'
complete -c git -d 'Set the default remote tracking branch'
complete -c git -d 'Sets the URL of the specified submodule'
complete -c git -d 'Show commit summary'
complete -c git -d 'Run command on each submodule'
complete -c git -s 'q' -l 'quiet' -d 'Only print error messages'
complete -c git -l 'init' -d 'Initialize all submodules'
complete -c git -l 'checkout' -d 'Checkout the superproject'"'"'s commit on a detached HEAD in the submodule'
complete -c git -l 'merge' -d 'Merge the superproject'"'"'s commit into the current branch of the submodule'
complete -c git -l 'rebase' -d 'Rebase current branch onto the superproject'"'"'s commit'
complete -c git -s 'N' -l 'no-fetch' -d 'Don'"'"'t fetch new objects from the remote'
complete -c git -l 'remote' -d 'Instead of using superproject'"'"'s SHA-1, use the state of the submodule'"'"'s remote-tracking branch'
complete -c git -l 'force' -d 'Discard local changes when switching to a different commit & always run checkout'
complete -c git -l 'filter' -d 'Request a subset of objects from server'
complete -c git -l 'force' -d 'Also add ignored submodule path'
complete -c git -l 'force' -d 'Remove even with local changes'
complete -c git -l 'all' -d 'Remove all submodules'
complete -c git -d 'Submodule'
complete -c git -s 'b' -l 'branch' -d 'Specify the branch to use'
complete -c git -s 'd' -l 'default' -d 'Use default branch of the submodule'
complete -c git -l 'cached' -d 'Use the commit stored in the index'
complete -c git -d 'Submodule'
complete -c git -l 'files' -d 'Compare the commit in the index with submodule HEAD'
complete -c git -l 'recursive' -d 'Traverse submodules recursively'
complete -c git -d 'Show logs with difference each commit introduces'
complete -c git -d 'Remove untracked files from the working tree'
complete -c git -s 'f' -l 'force' -d 'Force run'
complete -c git -s 'i' -l 'interactive' -d 'Show what would be done and clean files interactively'
complete -c git -s 'q' -l 'quiet' -d 'Be quiet, only report errors'
complete -c git -s 'd' -d 'Remove untracked directories in addition to untracked files'
complete -c git -s 'x' -d 'Remove ignored files, as well'
complete -c git -s 'X' -d 'Remove only ignored files'
complete -c git -d 'Show what last modified each line of a file'
complete -c git -s 'b' -d 'Show blank SHA-1 for boundary commits'
complete -c git -l 'root' -d 'Do not treat root commits as boundaries'
complete -c git -l 'show-stats' -d 'Include additional statistics'
complete -c git -s 'L' -d 'Annotate only the given line range'
complete -c git -s 'l' -d 'Show long rev'
complete -c git -s 't' -d 'Show raw timestamp'
complete -c git -s 'S' -d 'Use revisions from named file instead of calling rev-list'
complete -c git -l 'reverse' -d 'Walk history forward instead of backward'
complete -c git -s 'p' -l 'porcelain' -d 'Show in a format designed for machine consumption'
complete -c git -l 'line-porcelain' -d 'Show the porcelain format'
complete -c git -l 'incremental' -d 'Show the result incrementally'
complete -c git -l 'contents' -d 'Instead of working tree, use the contents of the named file'
complete -c git -l 'date' -d 'Specifies the format used to output dates'
complete -c git -s 'M' -d 'Detect moved or copied lines within a file'
complete -c git -s 'C' -d 'Detect lines moved or copied from other files modified in the same commit'
complete -c git -s 'h' -d 'Show help message'
complete -c git -s 'c' -d 'Use the same output mode as git-annotate'
complete -c git -s 'f' -l 'show-name' -d 'Show the filename in the original commit'
complete -c git -s 'n' -l 'show-number' -d 'Show the line number in the original commit'
complete -c git -s 's' -d 'Suppress the author name and timestamp from the output'
complete -c git -s 'e' -l 'show-email' -d 'Show the author email instead of author name'
complete -c git -s 'w' -d 'Ignore whitespace changes'
complete -c git -d 'Display help information about Git'
complete -c git -d 'Add file contents to the index'
complete -c git -d 'Apply a series of patches from a mailbox'
complete -c git -d 'Apply a patch on a git index file and a working tree'
complete -c git -d 'Create an archive of files from a named tree'
complete -c git -d 'Find the change that introduced a bug by binary search'
complete -c git -d 'Show what revision and author last modified each line of a file'
complete -c git -d 'List, create, or delete branches'
complete -c git -d 'Checkout and switch to a branch'
complete -c git -d 'Apply the change introduced by an existing commit'
complete -c git -d 'Remove untracked files from the working tree'
complete -c git -d 'Clone a repository into a new directory'
complete -c git -d 'Record changes to the repository'
complete -c git -d 'Set and read git configuration variables'
complete -c git -d 'Count unpacked number of objects and their disk consumption'
complete -c git -d 'Give an object a human-readable name'
complete -c git -d 'Show changes between commits, commit and working tree, etc'
complete -c git -d 'A really simple server for Git repositories'
complete -c git -d 'Open diffs in a visual tool'
complete -c git -d 'Download objects and refs from another repository'
complete -c git -d 'Rewrite branches'
complete -c git -d 'Generate patch series to send upstream'
complete -c git -d 'Cleanup unnecessary files and optimize the local repository'
complete -c git -d 'Print lines matching a pattern'
complete -c git -d 'Create an empty git repository or reinitialize an existing one'
complete -c git -d 'Show commit logs'
complete -c git -d 'Show information about files in the index and the working tree'
complete -c git -d 'Extracts patch and authorship from a single e-mail message'
complete -c git -d 'Simple UNIX mbox splitter program'
complete -c git -d 'Run tasks to optimize Git repository data'
complete -c git -d 'Join two or more development histories together'
complete -c git -d 'Find as good common ancestors as possible for a merge'
complete -c git -d 'Run merge conflict resolution tools to resolve merge conflicts'
complete -c git -d 'Move or rename a file, a directory, or a symlink'
complete -c git -d 'Add or inspect object notes'
complete -c git -d 'Prune all unreachable objects from the object database'
complete -c git -d 'Fetch from and merge with another repository or a local branch'
complete -c git -d 'Update remote refs along with associated objects'
complete -c git -d 'Compare two commit ranges (e.g. two versions of a branch)'
complete -c git -d 'Forward-port local commits to the updated upstream head'
complete -c git -d 'Manage reflog information'
complete -c git -d 'Manage set of tracked repositories'
complete -c git -d 'Reset current HEAD to the specified state'
complete -c git -d 'Restore working tree files'
complete -c git -d 'Revert an existing commit'
complete -c git -d 'Pick out and massage parameters'
complete -c git -d 'Remove files from the working tree and from the index'
complete -c git -d 'Shows the last commit of a branch'
complete -c git -d 'Shows the commits on branches'
complete -c git -d 'Stash away changes'
complete -c git -d 'Show the working tree status'
complete -c git -d 'Initialize, update or inspect submodules'
complete -c git -d 'Remove unnecessary whitespace'
complete -c git -d 'Switch to a branch'
complete -c git -d 'Create, list, delete or verify a tag object signed with GPG'
complete -c git -d 'Register file contents in the working tree to the index'
complete -c git -d 'Show logs with difference each commit introduces'
complete -c git -d 'Manage multiple working trees'
complete -c git -l 'global' -d 'Get/set global configuration'
complete -c git -l 'system' -d 'Get/set system configuration'
complete -c git -l 'local' -d 'Get/set local repo configuration'
complete -c git -s 'f' -l 'file' -d 'Read config from file'
complete -c git -l 'blob' -d 'Read config from blob'
complete -c git -l 'get' -d 'Get config with name'
complete -c git -l 'get-all' -d 'Get all values matching key'
complete -c git -l 'get-urlmatch' -d 'Get value specific for the section url'
complete -c git -l 'replace-all' -d 'Replace all matching variables'
complete -c git -l 'add' -d 'Add a new variable'
complete -c git -l 'unset' -d 'Remove a variable'
complete -c git -l 'unset-all' -d 'Remove matching variables'
complete -c git -l 'rename-section' -d 'Rename section'
complete -c git -s 'l' -l 'list' -d 'List all variables'
complete -c git -s 'e' -l 'edit' -d 'Open configuration in an editor'
complete -c git -s 't' -l 'type' -d 'Value is of given type'
complete -c git -l 'int' -d 'Value is a decimal number'
complete -c git -l 'bool-or-int' -d 'Value is --bool or --int'
complete -c git -l 'path' -d 'Value is a path'
complete -c git -l 'expiry-date' -d 'Value is an expiry date'
complete -c git -s 'z' -l 'null' -d 'Terminate values with NUL byte'
complete -c git -l 'name-only' -d 'Show variable names only'
complete -c git -l 'includes' -d 'Respect include directives'
complete -c git -l 'show-origin' -d 'Show origin of configuration'
complete -c git -l 'default' -d 'Use default value when missing entry'
complete -c git -d 'Format and output info on each ref'
complete -c git -l 'count' -d 'Limit to n results'
complete -c git -l 'format' -d 'Format string with %(fieldname) placeholders'
complete -c git -l 'color' -d 'When to color'
complete -c git -l 'points-at' -d 'Only list refs pointing at object'
complete -c git -l 'merged' -d 'Only list refs reachable from specified commit'
complete -c git -l 'no-merged' -d 'Only list refs not reachable from specified commit'
complete -c git -l 'contains' -d 'Only list refs containing the specified commit'
complete -c git -l 'no-contains' -d 'Only list refs not containing the specified commit'
complete -c git -l 'ignore-case' -d 'Sorting and filtering refs are case insensitive'
complete -c git -d 'Send a collection of patches as emails'
complete -c git -l 'annotate' -d 'Edit patches before sending'
complete -c git -l 'bcc' -d 'Specify Bcc: value'
complete -c git -l 'cc' -d 'Specify Cc: value'
complete -c git -l 'compose' -d 'Add an introductory message'
complete -c git -l 'from' -d 'Sender'
complete -c git -l 'reply-to' -d 'Address for replies'
complete -c git -l 'in-reply-to' -d 'Reply in thread to given Message-ID'
complete -c git -l 'subject' -d 'Subject'
complete -c git -l 'to' -d 'Recipient'
complete -c git -l '8bit-encoding' -d 'Encoding for non-ASCII messages'
complete -c git -l 'compose-encoding' -d 'Encoding for the compose message'
complete -c git -l 'transfer-encoding' -d 'Encoding for transferring over SMTP'
complete -c git -l 'xmailer' -d 'Add X-Mailer: header'
complete -c git -l 'no-xmailer' -d 'Suppress X-Mailer: header'
complete -c git -l 'envelope-sender'
complete -c git -l 'sendmail-cmd' -d 'Command to send email'
complete -c git -l 'smtp-encryption'
complete -c git -l 'smtp-domain'
complete -c git -l 'smtp-auth' -d 'Restrict auth mechanisms'
complete -c git -l 'smtp-pass'
complete -c git -l 'no-smtp-auth'
complete -c git -l 'smtp-server'
complete -c git -l 'smtp-server-port'
complete -c git -l 'smtp-server-option'
complete -c git -l 'smtp-ssl-cert-path'
complete -c git -l 'smtp-user'
complete -c git -l 'smt-debug' -d 'SMTP debug output'
complete -c git -l 'batch-size' -d 'Reconnect after sending this many messages'
complete -c git -l 'relogin-dleay' -d 'Seconds to wait before reconnecting'
complete -c git -l 'no-to' -d 'Clear To:'
complete -c git -l 'no-cc' -d 'Clear Cc:'
complete -c git -l 'no-bcc' -d 'Clear Bcc:'
complete -c git -l 'no-identity'
complete -c git -l 'to-cmd' -d 'Command to generate To: lines'
complete -c git -l 'cc-cmd' -d 'Command to generate Cc: lines'
complete -c git -l 'header-cmd' -d 'Command to generate header lines'
complete -c git -l 'no-header-cmd' -d 'Disable any header command'
complete -c git -l 'chain-reply-to' -d 'Each email is sent as reply to the previous one'
complete -c git -l 'no-chain-reply-to' -d 'Each email is sent as reply to the first one'
complete -c git -l 'identity' -d 'Configuration identity'
complete -c git -l 'signed-off-by-cc' -d 'Add addresses in Signed-off-by trailers to Cc'
complete -c git -l 'no-signed-off-by-cc' -d 'Do not add Signed-off-by trailers to Cc'
complete -c git -l 'cc-cover' -d 'Copy Cc: list from first message to the others'
complete -c git -l 'no-cc-cover' -d 'Do not copy Cc: list from first message'
complete -c git -l 'to-cover' -d 'Copy To: list from first message to the others'
complete -c git -l 'no-to-cover' -d 'Do not copy To: list from first message'
complete -c git -l 'suppress-from' -d 'Do not cc the From: address'
complete -c git -l 'no-suppress-from' -d 'Do cc the From: address'
complete -c git -l 'thread' -d 'Create an email thread'
complete -c git -l 'no-thread' -d 'Do not create an email thread'
complete -c git -l 'dry-run' -d 'Do everything except actually send the emails'
complete -c git -l 'format-patch' -d 'Ambiguous arguments are for format-patch, not filenames'
complete -c git -l 'no-format-patch' -d 'Interpret ambiguous arguments as filenames, not format-patch arguments'
complete -c git -l 'quiet' -d 'Print only one line per email'
complete -c git -l 'validate' -d 'Perform sanity checks'
complete -c git -l 'no-validate' -d 'Skip sanity checks'
complete -c git -l 'force' -d 'Ignore safety checks'
complete -c git -l 'dump-aliases' -d 'Dump shorthand alias names'
complete -c git -l 'sort' -d 'Sort results by'
complete -c git -d 'Custom command'
