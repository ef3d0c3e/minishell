complete -c phpunit -l 'coverage-clover' -d 'Generate code coverage report in Clover XML format'
complete -c phpunit -l 'coverage-crap4j' -d 'Generate code coverage report in Crap4J XML format'
complete -c phpunit -l 'coverage-html' -d 'Generate code coverage report in HTML format'
complete -c phpunit -l 'coverage-php' -d 'Export PHP_CodeCoverage object to file'
complete -c phpunit -l 'coverage-text' -d 'Generate code coverage report in text format'
complete -c phpunit -l 'coverage-xml' -d 'Generate code coverage report in PHPUnit XML format'
complete -c phpunit -l 'whitelist' -d 'Whitelist <dir> for code coverage analysis'
complete -c phpunit -l 'disable-coverage-ignore' -d 'Disable annotations for ignoring code coverage'
complete -c phpunit -l 'no-coverage' -d 'Ignore code coverage configuration'
complete -c phpunit -l 'dump-xdebug-filter' -d 'Generate script to set Xdebug code coverage filter'
complete -c phpunit -l 'log-junit' -d 'Log test execution in JUnit XML format to file'
complete -c phpunit -l 'log-teamcity' -d 'Log test execution in TeamCity format to file'
complete -c phpunit -l 'testdox-html' -d 'Write agile documentation in HTML format to file'
complete -c phpunit -l 'testdox-text' -d 'Write agile documentation in Text format to file'
complete -c phpunit -l 'testdox-xml' -d 'Write agile documentation in XML format to file'
complete -c phpunit -l 'reverse-list' -d 'Print defects in reverse order'
complete -c phpunit -l 'filter' -d 'Filter which tests to run'
complete -c phpunit -l 'testsuite' -d 'Filter which testsuite to run'
complete -c phpunit -l 'group' -d 'Only runs tests from the specified group(s)'
complete -c phpunit -l 'exclude-group' -d 'Exclude tests from the specified group(s)'
complete -c phpunit -l 'list-groups' -d 'List available test groups'
complete -c phpunit -l 'list-suites' -d 'List available test suites'
complete -c phpunit -l 'list-tests' -d 'List available tests'
complete -c phpunit -l 'list-tests-xml' -d 'List available tests in XML format'
complete -c phpunit -l 'test-suffix' -d 'Only search for test in files with specified suffix(es). Default: Test.php,.phpt'
complete -c phpunit -l 'dont-report-useless-tests' -d 'Do not report tests that do not test anything'
complete -c phpunit -l 'strict-coverage' -d 'Be strict about @covers annotation usage'
complete -c phpunit -l 'strict-global-state' -d 'Be strict about changes to global state'
complete -c phpunit -l 'disallow-test-output' -d 'Be strict about output during tests'
complete -c phpunit -l 'disallow-resource-usage' -d 'Be strict about resource usage during small tests'
complete -c phpunit -l 'enforce-time-limit' -d 'Enforce time limit based on test size'
complete -c phpunit -l 'default-time-limit' -d 'Timeout in seconds for tests without @small, @medium or @large'
complete -c phpunit -l 'disallow-todo-tests' -d 'Disallow @todo-annotated tests'
complete -c phpunit -l 'process-isolation' -d 'Run each test in a separate PHP process'
complete -c phpunit -l 'globals-backup' -d 'Backup and restore $GLOBALS for each test'
complete -c phpunit -l 'static-backup' -d 'Backup and restore static attributes for each test'
complete -c phpunit -l 'colors' -d 'Use colors in output'
complete -c phpunit -l 'columns' -d 'Number of columns to use for progress output'
complete -c phpunit -l 'stderr' -d 'Write to STDERR instead of STDOUT'
complete -c phpunit -l 'stop-on-defect' -d 'Stop execution upon first not-passed test'
complete -c phpunit -l 'stop-on-error' -d 'Stop execution upon first error'
complete -c phpunit -l 'stop-on-failure' -d 'Stop execution upon first error or failure'
complete -c phpunit -l 'stop-on-warning' -d 'Stop execution upon first warning'
complete -c phpunit -l 'stop-on-risky' -d 'Stop execution upon first risky test'
complete -c phpunit -l 'stop-on-skipped' -d 'Stop execution upon first skipped test'
complete -c phpunit -l 'stop-on-incomplete' -d 'Stop execution upon first incomplete test'
complete -c phpunit -l 'fail-on-warning' -d 'Treat tests with warnings as failures'
complete -c phpunit -l 'fail-on-risky' -d 'Treat risky tests as failures'
complete -c phpunit -s 'v' -l 'verbose' -d 'Output more verbose information'
complete -c phpunit -l 'debug' -d 'Display debugging information'
complete -c phpunit -l 'loader' -d 'TestSuiteLoader implementation to use'
complete -c phpunit -l 'repeat' -d 'Runs the test(s) repeatedly'
complete -c phpunit -l 'teamcity' -d 'Report test execution progress in TeamCity format'
complete -c phpunit -l 'testdox' -d 'Report test execution progress in TestDox format'
complete -c phpunit -l 'testdox-group' -d 'Only include tests from the specified group(s)'
complete -c phpunit -l 'testdox-exclude-group' -d 'Exclude tests from the specified group(s)'
complete -c phpunit -l 'no-interaction' -d 'Disable TestDox progress animation'
complete -c phpunit -l 'printer' -d 'TestListener implementation to use'
complete -c phpunit -l 'order-by' -d 'Run tests in order'
complete -c phpunit -l 'random-order-seed' -d 'Use a specific random seed for random order'
complete -c phpunit -l 'cache-result' -d 'Write test results to cache file'
complete -c phpunit -l 'do-not-cache-result' -d 'Do not write test results to cache file'
complete -c phpunit -l 'prepend' -d 'A PHP script that is included as early as possible'
complete -c phpunit -l 'bootstrap' -d 'A PHP script that is included before the tests run'
complete -c phpunit -s 'c' -l 'configuration' -d 'Read configuration from XML file'
complete -c phpunit -l 'no-configuration' -d 'Ignore default configuration file (phpunit.xml)'
complete -c phpunit -l 'no-logging' -d 'Ignore logging configuration'
complete -c phpunit -l 'no-extensions' -d 'Do not load PHPUnit extensions'
complete -c phpunit -s 'd' -d 'Sets a php.ini value in the format key[=value]'
complete -c phpunit -l 'generate-configuration' -d 'Generate configuration file with suggested settings'
complete -c phpunit -l 'cache-result-file' -d 'Specify result cache path and filename'
complete -c phpunit -s 'h' -l 'help' -d 'Prints usage information'
complete -c phpunit -l 'version' -d 'Prints the version and exits'
complete -c phpunit -l 'atleast-version' -d 'Checks that version is greater than min and exits'
complete -c phpunit -l 'check-version' -d 'Check whether PHPUnit is the latest version'
