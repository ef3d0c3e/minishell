complete -c gcc -d 'Set maximum template depth'
complete -c gcc -s 'o' -d 'Place output in file'
complete -c gcc -d 'Output to given file prototyped declarations for all functions from a translation unit'
complete -c gcc -d 'Use specified version of the C++ ABI'
complete -c gcc -l 'sysroot' -d 'Use dir as the root directory for headers and libraries'
complete -c gcc -d 'Return the highest error returned by any phase'
complete -c gcc -s 'c' -d 'Compile or assemble the source files, but do not link'
complete -c gcc -s 'S' -d 'Do not assemble'
complete -c gcc -s 'E' -d 'Stop after preprocessing'
complete -c gcc -s 'v' -d 'Print the executed commands to stderr'
complete -c gcc -d 'Like -v except commands are not executed'
complete -c gcc -d 'Use pipes not temp files for communication'
complete -c gcc -d 'Pass all the source files to the compiler at once'
complete -c gcc -l 'help' -d 'Print help'
complete -c gcc -l 'target-help' -d 'Print a description of target specific options for each tool'
complete -c gcc -l 'version' -d 'Display the version number and copyrights'
complete -c gcc -d 'Support all ISO C90 programs'
complete -c gcc -d 'No "asm", "inline" or "typeof" as keyword, so code can use these as identifiers'
complete -c gcc -d 'Don’t recognize built-in functions without __builtin_ prefix'
complete -c gcc -d 'Don’t recognize built-in functions that do not begin with __builtin_ as prefix'
complete -c gcc -d 'Assert that compilation takes place in a hosted environment'
complete -c gcc -d 'Assert that compilation takes place in a freestanding environment'
complete -c gcc -d 'Accept some non-standard constructs used in Microsoft header files'
complete -c gcc -d 'Support ISO C trigraphs'
complete -c gcc -d 'Performs a compilation in two passes: preprocessing and compiling'
complete -c gcc -d 'Try to imitate pre-standard C preprocessors'
complete -c gcc -d 'Allow conditional expressions with mismatched types'
complete -c gcc -d 'Let "char" be unsigned, like "unsigned char"'
complete -c gcc -d 'Let "char" be signed, like "signed char"'
complete -c gcc -d 'Treat bitfields as signed by default'
complete -c gcc -d 'Treat bitfields as unsigned by default'
complete -c gcc -d 'Remove fsigned-bitfields'
complete -c gcc -d 'Remove funsinged-bitfields'
complete -c gcc -d 'Turn off all access checking'
complete -c gcc -d 'Check "operator new" returns non-null before modifying allocated storage'
complete -c gcc -d 'Put uninitialized global variables into the common segment, as C does'
complete -c gcc -d 'Inject friend functions into enclosing namespace'
complete -c gcc -d 'Give string constants type "char *" without const'
complete -c gcc -d 'Don'"'"'t elide temporaries used to construct objects'
complete -c gcc -d 'Don’t generate code to check for violation of exception specifications at runtime'
complete -c gcc -d 'Limit scope of variables in for-init-statement to the loop itself, like the C++ standard says'
complete -c gcc -d 'Don'"'"'t limit scope of vars declared in for loop to the for loop'
complete -c gcc -d 'Do not recognize "typeof" as a keyword, so code can use it as an identifier'
complete -c gcc -d 'Never emit code for non-inline templates which are instantiated implicitly'
complete -c gcc -d 'Don’t emit code for implicit instantiations of inline templates, either'
complete -c gcc -d 'Do not emit out-of-line copies of inline functions controlled by #pragma implementation'
complete -c gcc -d 'Disable built-ins that are not mandated by ANSI/ISO C'
complete -c gcc -d 'Do not treat and/bitand/bitor/compl/not/or/xor as keywords'
complete -c gcc -d 'Disable diagnostics that the standard says a compiler does not need to issue'
complete -c gcc -d 'Downgrade some diagnostics about nonconformant code from errors to warnings'
complete -c gcc -d 'Enable automatic template instantiation at link time'
complete -c gcc -d 'Disable Run-Time Type Information (used by dynamic_cast and typeid)'
complete -c gcc -d 'Emit statistics about front-end processing at the end of the compilation'
complete -c gcc -d 'Do not emit code to use C++ ABI routines for thread-safe initialization of local statics'
complete -c gcc -d 'Use "__cxa_atexit" function for static object destructors'
complete -c gcc -d 'Mark inlined methods with "__attribute__ ((visibility ("hidden")))"'
complete -c gcc -d 'Do not use weak symbol support'
complete -c gcc -d 'Do not assume inline for functions defined inside a class scope'
complete -c gcc -d 'Warn when code is probably incompatible with the vendor-neutral C++ ABI'
complete -c gcc -d 'Warn when a class has no usable con/destructors'
complete -c gcc -d 'Warn when a class requires a virtual destructor but declares a non-virtual one'
complete -c gcc -d 'Warn when the order of initializers is not the order in which they must be executed'
complete -c gcc -d 'Warn about violations of style guidelines from Scott Meyers’ Effective C++ book'
complete -c gcc -d '(C++) Do not warn about usage of deprecated features'
complete -c gcc -d '(C++) Warn also about the use of an uncasted "NULL" as sentinel'
complete -c gcc -d '(C++) Disable warnings for non-templatized friend functions declared in a template'
complete -c gcc -d 'Warn if an C-style cast to a non-void type is used in a C++ program'
complete -c gcc -d '(C++) Warn when a function hides virtual functions from a base class'
complete -c gcc -d '(C++) Warn when overload resolution promotes from unsigned or enumerated to signed'
complete -c gcc -d 'Use class-name as the name of the class to instantiate for each literal string specified with the syntax "@"'
complete -c gcc -d 'Use class-name as the name of the class to instantiate for each literal string specified with the syntax "@"'
complete -c gcc -d 'Generate object code compatible with the standard GNU Objective-C runtime'
complete -c gcc -d 'Generate output compatible with the NeXT runtime'
complete -c gcc -d 'Assume that all Objective-C message dispatches (e'
complete -c gcc -d '(Obj-C), check if instance variables are a C++ object with non-trivial default constructor'
complete -c gcc -d 'Allow fast jumps to the message dispatcher'
complete -c gcc -d '(Obj-C) Enable syntactic support for structured exception handling'
complete -c gcc -d 'Enable garbage collection (GC) in Objective-C and Objective-C++ programs'
complete -c gcc -d 'Tell ld(1) not to statically link the object file'
complete -c gcc -d 'Dump interface declarations for all classes seen in the source file to a file named sourcename'
complete -c gcc -d 'Warn whenever an Objective-C assignment is being intercepted by the garbage collector'
complete -c gcc -d 'Warn about unimplemented protocol methods'
complete -c gcc -d 'Warn if multiple methods of different types for the same selector are found during compilation'
complete -c gcc -d 'Warn if methods with differing argument/return types are found for a selector with a receiver of type "id"/"Class"'
complete -c gcc -d 'Warn for a "@selector" referring to undeclared selector'
complete -c gcc -d 'Generate C header describing the largest structure that is passed by value'
complete -c gcc -d 'Try to format error messages so that they fit on lines of this number of characters'
complete -c gcc -d 'Only meaningful in line-wrapping mode'
complete -c gcc -d 'Only meaningful in line-wrapping mode'
complete -c gcc -d 'Show which option controls a diagnostic'
complete -c gcc -d 'Check the code for syntax errors, but don’t do anything beyond that'
complete -c gcc -s 'w' -d 'Inhibit all warning messages'
complete -c gcc -d 'Inhibit warning messages about the use of #import'
complete -c gcc -d 'Warn if an array subscript has type "char"'
complete -c gcc -d 'Abort compilation on the first error'
complete -c gcc -d 'Check calls to "printf" and "scanf", etc'
complete -c gcc -d 'Warn about "strftime" formats which may yield only a two-digit year'
complete -c gcc -d 'Do not warn about excess arguments to "printf" or "scanf"'
complete -c gcc -d 'Do not warn about zero-length formats'
complete -c gcc -d 'With -Wformat, also warn if the format string is not a string literal'
complete -c gcc -d 'With -Wformat, also warn about uses of potentially insecure format functions'
complete -c gcc -d 'Warn about passing a null pointer for arguments marked as requiring non-null'
complete -c gcc -d 'Warn about uninitialized variables which are initialized with themselves'
complete -c gcc -d 'Warn when a declaration does not specify a type'
complete -c gcc -d 'Give a warning (or error) whenever a function is used before being declared'
complete -c gcc -d 'Give a warning (or error) whenever a function is used before being declared'
complete -c gcc -d 'Same as -Wimplicit-int and -Wimplicit-function-declaration'
complete -c gcc -d 'Warn if the type of main is suspicious'
complete -c gcc -d 'Warn if an aggregate or union initializer is not fully bracketed'
complete -c gcc -d '(C, C++, Obj-C, Obj-C++) Warn if a user-supplied include directory does not exist'
complete -c gcc -d 'Warn if parentheses are omitted where confusing'
complete -c gcc -d 'Warn about undefined semantics because of violations of sequence point rules in the C standard'
complete -c gcc -d 'Warn whenever a function is defined with a return-type that defaults to "int"'
complete -c gcc -d 'Warn whenever a "switch" statement lacks a "case" for a member of an enum'
complete -c gcc -d 'Warn whenever a "switch" statement does not have a "default" case'
complete -c gcc -d 'Warn about used trigraphs'
complete -c gcc -d 'Warn about unused functions'
complete -c gcc -d 'Warn about unused labels'
complete -c gcc -d 'Warn about unused function parameters'
complete -c gcc -d 'Warn about unused variables'
complete -c gcc -d 'Warn whenever a statement computes a result that is explicitly not used'
complete -c gcc -d 'All the -Wunused options combined'
complete -c gcc -d 'Warn if an automatic variable is used without being initialized'
complete -c gcc -d 'Warn when an unknown #pragma directive is encountered'
complete -c gcc -d 'Do not warn about misuses of pragmas'
complete -c gcc -d 'Warn about strict aliasing rules'
complete -c gcc -d 'Enable warnings not enabled by -Wall'
complete -c gcc -d 'Do not warn about compile-time integer division by zero'
complete -c gcc -d 'Warn if floating point values are used in equality comparisons'
complete -c gcc -d '(C) Warn when a declaration is found after a statement in a block'
complete -c gcc -d 'Warn if an undefined identifier is evaluated in an #if directive'
complete -c gcc -d 'Do not warn whenever an #else or an #endif are followed by text'
complete -c gcc -d 'Warn if a local variable shadows another variable or if a built-in function is shadowed'
complete -c gcc -d 'Warn whenever an object of larger than len bytes is defined'
complete -c gcc -d 'Warn if a loop cannot be safely optimized'
complete -c gcc -d 'Warn about anything that depends on the "size of" a function type or of "void"'
complete -c gcc -d '(C) Warn whenever a function call is cast to a non-matching type'
complete -c gcc -d 'Warn about ISO C constructs that are outside of the common subset of ISO C and ISO C++, e'
complete -c gcc -d 'Warn whenever a pointer is cast so as to remove a type qualifier from the target type'
complete -c gcc -d 'Warn whenever a pointer is cast such that the required alignment of the target is increased'
complete -c gcc -d 'C: make string consts "const char[length]"; C++: warn about converting string constants to "char *"'
complete -c gcc -d 'Warn if presence of a prototype changes type conversion'
complete -c gcc -d 'Warn when a comparison between signed and unsigned values could produce an incorrect result'
complete -c gcc -d 'Warn if any functions that return structures or unions are defined or called'
complete -c gcc -d 'Do not warn if an unexpected "__attribute__" is used'
complete -c gcc -d '(C) Warn if a function is declared or defined without specifying the argument types'
complete -c gcc -d '(C) Warn if an old-style function definition is used'
complete -c gcc -d '(C) Warn if a global function is defined without a previous prototype declaration'
complete -c gcc -d '(C) Warn if a global function is defined without a previous declaration'
complete -c gcc -d 'Warn if a structure’s initializer has some fields missing'
complete -c gcc -d 'Warn about functions which might be candidates for attribute "noreturn"'
complete -c gcc -d 'Warn about function pointers which might be candidates for "format" attributes'
complete -c gcc -d 'Do not warn if a multicharacter constant (’FOOF’) is used'
complete -c gcc -d 'Warn about identifiers that are not normalized'
complete -c gcc -d 'Do not warn about uses of functions, variables, and types marked as deprecated'
complete -c gcc -d 'Warn if a structure is given the packed attribute without effect'
complete -c gcc -d 'Warn if padding is included in a structure'
complete -c gcc -d 'Warn if anything is declared more than once in the same scope'
complete -c gcc -d '(C) Warn if an "extern" declaration is encountered within a function'
complete -c gcc -d 'Warn if the compiler detects that code will never be executed'
complete -c gcc -d 'Warn if a function can not be inlined and it was declared as inline'
complete -c gcc -d '(C++) Suppress warnings from applying the offsetof macro to a non-POD type'
complete -c gcc -d '(C) Suppress warnings from casts to pointer type of an integer of a different size'
complete -c gcc -d '(C) Suppress warnings from casts from a pointer to an integer type of a different size'
complete -c gcc -d 'Warn if a precompiled header is found in the search path but can’t be used'
complete -c gcc -d 'Warn if long long type is used'
complete -c gcc -d 'Warn if variadic macros are used in pedantic mode'
complete -c gcc -d 'Warn if a register variable is declared volatile'
complete -c gcc -d 'Warn if a requested optimization pass is disabled'
complete -c gcc -d 'Warn for pointer argument passing or assignment with different signedness'
complete -c gcc -d 'Make all warnings into errors'
complete -c gcc -d 'Only active when -fstack-protector is active'
complete -c gcc -s 'g' -d 'Produce debugging information in OS’s native format (stabs, COFF, XCOFF, or DWARF 2)'
complete -c gcc -d 'Produce debugging information for use by GDB'
complete -c gcc -d 'Produce debugging information in stabs format (if that is supported), without GDB extensions'
complete -c gcc -d 'Produce debugging information in stabs format, for only symbols that are actually used'
complete -c gcc -d 'Produce debug info in stabs format, using GNU extensions for GDB'
complete -c gcc -d 'Produce debug info in COFF format'
complete -c gcc -d 'Produce debug info in XCOFF format'
complete -c gcc -d 'Produce debug info in XCOFF format, using GNU extensions for GDB'
complete -c gcc -d 'Produce debug info in DWARF version 2 format'
complete -c gcc -d 'Produce debug info in VMS debug format'
complete -c gcc -d 'Request debug info and also use level to specify how much information'
complete -c gcc -d 'Request debug info and also use level to specify how much information'
complete -c gcc -d 'Request debug info and also use level to specify how much information'
complete -c gcc -d 'Request debug info and also use level to specify how much information'
complete -c gcc -d 'Request debug info and also use level to specify how much information'
complete -c gcc -d 'Request debug info and also use level to specify how much information'
complete -c gcc -d 'Compress DWARF2 debug info by eliminating duplicated information about each symbol'
complete -c gcc -s 'p' -d 'Generate extra code to write profile information suitable for the analysis program prof'
complete -c gcc -d 'Generate extra code to write profile information suitable for the analysis program gprof'
complete -c gcc -s 'Q' -d 'Print out each function name as it is compiled, and some statistics about each pass'
complete -c gcc -d 'Makes the compiler print some statistics about the time consumed by each pass when it finishes'
complete -c gcc -d 'Makes the compiler print some statistics about permanent memory allocation when it finishes'
complete -c gcc -d 'Add code so that program flow arcs are instrumented'
complete -c gcc -l 'coverage' -d 'Used to compile and link code instrumented for coverage analysis'
complete -c gcc -d 'Produce a notes file that the gcov code-coverage utility can use to show program coverage'
complete -c gcc -d 'Says to make debugging dumps during compilation at times specified by letters'
complete -c gcc -d 'When doing debugging dumps (-d), suppress instruction numbers and line number note output'
complete -c gcc -d '(C++) Dump representation of the tree structure for the entire translation unit'
complete -c gcc -d '(C++) Dump representation of the tree structure for the translation unit'
complete -c gcc -d 'Control the dumping at various stages of inter-procedural analysis language tree to a file'
complete -c gcc -d 'Control the dumping at various stages of processing the intermediate language tree to a file'
complete -c gcc -d 'Control the dumping at various stages of processing the intermediate language tree to a file'
complete -c gcc -d 'Controls the amount of debugging output the vectorizer prints'
complete -c gcc -d 'Provides a seed that GCC uses when it would otherwise use random numbers'
complete -c gcc -d 'Control the amount of debugging output the scheduler prints'
complete -c gcc -d 'Store the usual "temporary" intermediate files in the current directory'
complete -c gcc -d 'Report the CPU time taken by each subprocess in the compilation sequence'
complete -c gcc -d 'Run variable tracking pass'
complete -c gcc -d 'Print the full absolute name of the library file library that would be used when linking'
complete -c gcc -d 'Print the multilib directory'
complete -c gcc -d 'Print the mapping from multilib directories to compiler switches that enable them'
complete -c gcc -d 'Like -print-file-name, but searches for a program such as cpp'
complete -c gcc -d 'Same as -print-file-name=libgcc'
complete -c gcc -d 'Print installation directory and a list of directories gcc will search and exit'
complete -c gcc -d 'Print the compiler’s target machine and exit'
complete -c gcc -d 'Print the compiler version and exit'
complete -c gcc -d 'Print the compiler’s built-in specs and exit'
complete -c gcc -d 'Optimize'
complete -c gcc -d 'Optimize'
complete -c gcc -d 'Optimize even more'
complete -c gcc -d 'Optimize yet more'
complete -c gcc -d 'Do not optimize'
complete -c gcc -d 'Optimize for size'
complete -c gcc -d 'Disregard strict standards compliance'
complete -c gcc -d 'Optimize debugging experience'
complete -c gcc -d 'Optimize aggressively for size rather than speed'
complete -c gcc -d 'Always pop the arguments to each function call as soon as that function returns'
complete -c gcc -d 'Force memory operands to be copied into registers before doing arithmetic on them'
complete -c gcc -d 'Force memory address constants to be copied into registers before doing arithmetic on them'
complete -c gcc -d 'Don’t keep the frame pointer in a register for functions that don’t need one'
complete -c gcc -d 'Optimize sibling and tail recursive calls'
complete -c gcc -d 'Don’t pay attention to the "inline" keyword'
complete -c gcc -d 'Integrate all simple functions into their callers'
complete -c gcc -d 'Consider all "static" functions called once for inlining into their caller even if they are not marked "inline"'
complete -c gcc -d 'Inline functions marked by "always_inline" and small functions early'
complete -c gcc -d 'By default, GCC limits the size of functions that can be inlined'
complete -c gcc -d 'In C, keep inline "static" functions in the object file'
complete -c gcc -d 'Emit "static const" variables when optimization isn’t turned on, even when they aren’t referenced'
complete -c gcc -d 'Attempt to merge identical constants (string and float) across compilation units'
complete -c gcc -d 'Attempt to merge identical constants and identical variables'
complete -c gcc -d 'Perform swing modulo scheduling immediately before the first scheduling pass'
complete -c gcc -d 'Do not use "decrement and branch" instructions on a count register'
complete -c gcc -d 'Make each instruction that calls a constant function contain the function’s address explicitly'
complete -c gcc -d 'Generate additional code to check that indices used to access arrays are within bounds'
complete -c gcc -d 'Perform loop strength reduction and elimination of iteration variables'
complete -c gcc -d 'Check if a jump branches to a location where another comparison subsumed by the first is found'
complete -c gcc -d 'Scan through jump instructions when the target of the jump is not reached by any other path'
complete -c gcc -d 'Like -fcse-follow-jumps, but follow jumps which conditionally skip over blocks'
complete -c gcc -d 'Re-run common subexpression elimination after loop optimizations has been performed'
complete -c gcc -d 'Run the loop optimizer twice'
complete -c gcc -d 'Perform a global common subexpression elimination pass'
complete -c gcc -d 'Global common subexpression elimination: Move loads which are killed by stores into themselves'
complete -c gcc -d 'A store motion pass is run after global common subexpression elimination'
complete -c gcc -d 'global common subexpression elimination pass (eliminates redundant loads)'
complete -c gcc -d 'With -fgcse-after-reload: perform redundant load elimination pass'
complete -c gcc -d 'Perform loop optimizations'
complete -c gcc -d 'Perform loop optimizations with new loop optimizer'
complete -c gcc -d 'Assume that loop indices do not overflow, and that loops are not infinite'
complete -c gcc -d 'Perform cross-jumping transformation'
complete -c gcc -d 'Attempt to transform conditional jumps into branch-less equivalents'
complete -c gcc -d 'Use conditional execution to transform conditional jumps into branch-less equivalents'
complete -c gcc -d 'Use global dataflow analysis to identify and eliminate useless checks for null pointers'
complete -c gcc -d 'Perform a number of minor optimizations that are relatively expensive'
complete -c gcc -d 'Attempt to reassign register numbers in move instructions to maximize register tying'
complete -c gcc -d 'Try to reorder instructions to use instruction slots after delayed branch instructions'
complete -c gcc -d 'Try to reorder instructions to eliminate execution stalls'
complete -c gcc -d '-fschedule-insns, but more instruction scheduling after register allocation'
complete -c gcc -d 'Don’t schedule instructions across basic blocks'
complete -c gcc -d 'Don’t allow speculative motion of non-load instructions'
complete -c gcc -d 'Allow speculative motion of some load instructions'
complete -c gcc -d 'Allow speculative motion of more load instructions'
complete -c gcc -d 'Define how many insns can be moved from the queue of stalled insns into the ready list'
complete -c gcc -d 'When scheduling after register allocation, do use superblock scheduling algorithm'
complete -c gcc -d 'Use -fsched2-use-superblocks algorithm when scheduling after register allocation'
complete -c gcc -d 'Allocate in registers that will be clobbered by function calls, by saving and restoring'
complete -c gcc -d 'Perform Partial Redundancy Elimination (PRE) on trees'
complete -c gcc -d 'Perform Full Redundancy Elimination (FRE) on trees'
complete -c gcc -d 'Perform copy propagation on trees'
complete -c gcc -d 'Perform copy propagation of memory loads and stores'
complete -c gcc -d 'Perform structural alias analysis on trees'
complete -c gcc -d 'Perform forward store motion on trees'
complete -c gcc -d 'Perform sparse conditional constant propagation (CCP) on trees'
complete -c gcc -d 'Perform sparse conditional constant propagation (CCP) on trees'
complete -c gcc -d 'Perform dead code elimination (DCE) on trees'
complete -c gcc -d 'Perform a variety of simple scalar cleanups based on a dominator tree traversal'
complete -c gcc -d 'Perform loop header copying on trees'
complete -c gcc -d 'Perform loop optimizations on trees'
complete -c gcc -d 'Perform linear loop transformations on tree'
complete -c gcc -d 'Perform loop invariant motion on trees'
complete -c gcc -d 'Perform induction variable optimizations on trees'
complete -c gcc -d 'Perform scalar replacement of aggregates'
complete -c gcc -d 'Perform copy renaming on trees'
complete -c gcc -d 'Perform temporary expression replacement during the SSA->normal phase'
complete -c gcc -d 'Perform live range splitting during the SSA->normal phase'
complete -c gcc -d 'Perform loop vectorization on trees'
complete -c gcc -d 'Perform loop versioning when doing loop vectorization on trees'
complete -c gcc -d 'Perform Value Range Propagation on trees'
complete -c gcc -d 'Perform tail duplication to enlarge superblock size'
complete -c gcc -d 'Unroll loops whose number of iterations is known at compile time'
complete -c gcc -d 'Unroll all loops, even if their number of iterations is uncertain when entered'
complete -c gcc -d 'Create multiple copies of local variables when unrolling a loop if it helps'
complete -c gcc -d 'Generate instructions to prefetch memory for loops that access large arrays'
complete -c gcc -d 'Disable any machine-specific peephole optimizations'
complete -c gcc -d 'Disable any machine-specific peephole optimizations'
complete -c gcc -d 'Do not guess branch probabilities using heuristics'
complete -c gcc -d 'Reorder basic blocks to reduce number of taken branches and improve code locality'
complete -c gcc -d 'Reorder basic blocks and partition hot and cold blocks'
complete -c gcc -d 'Reorder functions in the object file in order to improve code locality'
complete -c gcc -d 'Assume strictest aliasing rules'
complete -c gcc -d 'Align the start of functions to the next power-of-two greater than n, skipping up to n bytes'
complete -c gcc -d 'Align all branch targets to power-of-two boundary, skipping up to n bytes'
complete -c gcc -d 'Align loops to a power-of-two boundary, skipping up to n bytes like -falign-functions'
complete -c gcc -d 'Align branch targets to a power-of-two, skipping bytes'
complete -c gcc -d 'Parse the whole compilation unit before starting to produce code'
complete -c gcc -d 'Construct webs for register allocation purposes and assign each web individual pseudo register'
complete -c gcc -d 'Assume that the current compilation unit represents whole program being compiled'
complete -c gcc -d 'Perform a copy-propagation pass to try to reduce scheduling dependencies/copies'
complete -c gcc -d 'Enable options to generate useful profiles'
complete -c gcc -d 'Enable profile feedback directed optimizations'
complete -c gcc -d 'Do not store floating point variables in registers'
complete -c gcc -d 'Set a bunch of inadvisable math options to make it faster'
complete -c gcc -d 'Do not set ERRNO after calling math functions that are executed with a single instruction, e'
complete -c gcc -d 'Allow unsafe optimizations for floating-point arithmetic'
complete -c gcc -d 'Allow optimizations for float arithmetic that assume no NaNs or +-Infs'
complete -c gcc -d 'Assume floating-point operations cannot generate user-visible traps'
complete -c gcc -d 'Disable transformations and optimizations that assume default float rounding behavior'
complete -c gcc -d 'Assume IEEE signaling NaNs may generate uservisible traps during float operations'
complete -c gcc -d 'Treat float constants as single instead of double'
complete -c gcc -d 'When enabled, states that a range reduction step is not needed when performing complex division'
complete -c gcc -d 'When enabled, states that a range reduction step is not needed when performing complex division'
complete -c gcc -d 'Optimize based on the number of times each branch was taken with -fprofile-arcs'
complete -c gcc -d 'With -fprofile-arcs: gather data about values of expressions'
complete -c gcc -d 'With -fprofile-arcs: gather information about values of expressions'
complete -c gcc -d 'Make use of registers left over after register allocation'
complete -c gcc -d 'Peel loops that do not roll much (from profile feedback)'
complete -c gcc -d 'Enables the loop invariant motion pass in the new loop optimizer'
complete -c gcc -d 'Move branches with loop invariant conditions out of the loop'
complete -c gcc -d 'Place each function or data item into its own section in the output file if possible'
complete -c gcc -d 'Place each function or data item into its own section in the output file if possible'
complete -c gcc -d 'Perform branch target register load optimization before prologue / epilogue threading'
complete -c gcc -d 'Perform branch target register load optimization after prologue / epilogue threading'
complete -c gcc -d 'Emit extra code to check for buffer overflows, such as stack smashing attacks'
complete -c gcc -d 'Like -fstack-protector except that all functions are protected'
complete -c gcc -l 'param' -d 'In some places, GCC uses various constants to control the amount of optimization that is done'
complete -c gcc -d 'Pass option as an option to the preprocessor'
complete -c gcc -s 'D' -d 'Predefine name as a macro, with definition 1'
complete -c gcc -s 'U' -d 'Cancel any previous definition of name, either built in or provided with a -D option'
complete -c gcc -d 'Do not predefine any system-specific or GCC-specific macros'
complete -c gcc -s 'I' -d 'Add the directory dir to the list of directories to be searched for header files'
complete -c gcc -d 'Turns on all optional warnings which are desirable for normal code'
complete -c gcc -d 'Warn for "/*" in a /* comment and backslash-newline in a // comment'
complete -c gcc -d 'Warn about certain constructs that behave differently in traditional and ISO C'
complete -c gcc -d 'Warn the first time #import is used'
complete -c gcc -d 'Warn about macros defined in the main file that are unused'
complete -c gcc -d 'Warn whenever an #else or an #endif are followed by text'
complete -c gcc -d 'Issue warnings for code in system headers'
complete -c gcc -d 'Issue all the mandatory diagnostics listed in the C standard'
complete -c gcc -d 'Issue all the mandatory diagnostics, and make them errors'
complete -c gcc -d 'Like -M but ignore headers in system header directories and what they include'
complete -c gcc -d 'When used with -M or -MM, specifies a file to write the dependencies to'
complete -c gcc -d 'When requesting dependency generation (-M): assume missing header files exist'
complete -c gcc -d 'Add a phony target for each dependency other than the main file'
complete -c gcc -d 'Change the target of the rule emitted by dependency generation'
complete -c gcc -d 'Same as -MT, but it quotes any characters which are special to Make'
complete -c gcc -d 'is equivalent to -M -MF file, except that -E is not implied'
complete -c gcc -d 'Like -MD except mention only user header files, not system header files'
complete -c gcc -d 'Also list precompiled header’s dependencies in dependency output'
complete -c gcc -d 'Allows use of a precompiled header together with -E'
complete -c gcc -d 'Do not search the standard system directories for header files'
complete -c gcc -d 'Do not search for header files in the C++-specific standard directories'
complete -c gcc -d 'Process file as if "#include "file"" appeared as the first line of the primary source file'
complete -c gcc -d 'Exactly like -include, except that any output produced by scanning file is thrown away'
complete -c gcc -d 'Search dir for header files, after all other directories'
complete -c gcc -d 'Specify prefix as the prefix for subsequent -iwithprefix options'
complete -c gcc -d 'Append dir to prefix defined with -iprefix, to same place as -I'
complete -c gcc -d 'Append dir to prefix defined with -iprefix, to same place as -idirafter'
complete -c gcc -d 'Like the --sysroot option, but only to header files'
complete -c gcc -d 'Search dir for headers, after -I dirs but before standard system dirs'
complete -c gcc -d 'Accept $ in identifiers'
complete -c gcc -d 'Accept universal character names in identifiers'
complete -c gcc -d 'Indicate to the preprocessor that the input file has already been preprocessed'
complete -c gcc -d 'Set the distance between tab stops'
complete -c gcc -d 'Set the execution character set, used for string and character constants'
complete -c gcc -d 'Set the wide execution character set, used for wide string and character constants'
complete -c gcc -d 'Set the input character set'
complete -c gcc -d 'Let the compiler know the current working directory when preprocessing'
complete -c gcc -d 'Do not print column numbers in diagnostics'
complete -c gcc -s 'A' -d 'Make an assertion with the predicate predicate and answer answer'
complete -c gcc -s 'A' -d 'Cancel an assertion with the predicate predicate and answer answer'
complete -c gcc -d 'Cancel an assertion with the predicate predicate and answer answer'
complete -c gcc -d 'Make debug dumps according to these arguments'
complete -c gcc -s 'P' -d 'Inhibit generation of linemarkers in the output from the preprocessor'
complete -c gcc -s 'C' -d 'Do not discard comments'
complete -c gcc -d 'Do not discard comments, including during macro expansion'
complete -c gcc -d 'Work around file systems with very short file names, such as MS-DOS'
complete -c gcc -l 'help' -d 'Print text describing all the command line options instead of preprocessing anything'
complete -c gcc -l 'target-help' -d 'Print text describing all the command line options instead of preprocessing anything'
complete -c gcc -s 'H' -d 'Print the name of each header file used, in addition to other normal activities'
complete -c gcc -d 'Print out GNU CPP’s version number'
complete -c gcc -l 'version' -d 'Print out GNU CPP’s version number'
complete -c gcc -d 'Pass option as an option to the assembler'
complete -c gcc -s 'l' -d 'Search the library named library when linking'
complete -c gcc -d 'Search the dynamic loader library when linking'
complete -c gcc -d 'Search the math library when linking'
complete -c gcc -d 'Search the zlib library when linking'
complete -c gcc -d 'Search the realtime extensions library when linking'
complete -c gcc -d 'Link an Objective-C or Objective-C++ program'
complete -c gcc -d 'Do not use the standard system startup files when linking'
complete -c gcc -d 'Do not use the standard system libraries when linking'
complete -c gcc -d 'Do not use the standard system startup files or libraries when linking'
complete -c gcc -d 'Produce a position independent executable on targets which support it'
complete -c gcc -d 'Pass the flag -export-dynamic to the ELF linker, on targets that support it'
complete -c gcc -s 's' -d 'Remove all symbol table and relocation information from the executable'
complete -c gcc -d 'On systems that support dynamic linking, this prevents linking with the shared libraries'
complete -c gcc -d 'Produce a shared object which can then be linked with other objects to form an executable'
complete -c gcc -d 'Force shared libgcc'
complete -c gcc -d 'Force static libgcc'
complete -c gcc -d 'Bind references to global symbols when building a shared object'
complete -c gcc -d 'Pass option as an option to the linker'
complete -c gcc -s 'u' -d 'Pretend the symbol symbol is undefined, to force linking of library modules to define it'
complete -c gcc -d 'Add header search directory'
complete -c gcc -d 'Add header search directory for #include "file"'
complete -c gcc -d 'Add dir to the list of directories to be searched for -l'
complete -c gcc -d 'Specifies where to find the executables, libraries, include/data files of the compiler itself'
complete -c gcc -d 'Process file after the compiler reads in the standard specs file'
complete -c gcc -l 'sysroot' -d 'Use dir as the logical root directory for headers and libraries'
complete -c gcc -d 'Prepend the name of the cpu to all public symbol names'
complete -c gcc -d 'Generate code for the specified ABI'
complete -c gcc -d 'Always generate a stack frame compliant with ARM Procedure Call Standard'
complete -c gcc -d 'This is a synonym for -mapcs-frame'
complete -c gcc -d 'Generate code which supports calling between the ARM and Thumb instruction sets'
complete -c gcc -d 'Prevent the reordering of instructions in the function prolog'
complete -c gcc -d 'Specifies which ABI to use for floating point values'
complete -c gcc -d 'Generate code for a processor running in little-endian mode'
complete -c gcc -d 'Generate code for a processor running in big-endian mode'
complete -c gcc -d 'Only applies when generating code for big-endian processors'
complete -c gcc -d 'Round size of structs and unions up to multiple of this number of bits'
complete -c gcc -d 'Generate a call to the function "abort" at the end of a "noreturn" function'
complete -c gcc -d 'Assume function calls are long'
complete -c gcc -d 'Do not assume function calls are long'
complete -c gcc -d 'Disable support for the "dllimport" attribute'
complete -c gcc -d 'Treat the PIC addressing register as read-only, rather than loading it in the function prologue'
complete -c gcc -d 'Specify the register to be used for PIC addressing'
complete -c gcc -d 'Insert NOPs to work around invalid Maverick instruction combinations'
complete -c gcc -d 'Write the name of each function into the text section, directly preceding the function prologue'
complete -c gcc -d 'Generate code for the 16-bit Thumb instruction set'
complete -c gcc -d 'Generate a stack frame compliant with Thumb Procedure Call Standard for non-leaf functions'
complete -c gcc -d 'Generate a stack frame compliant with Thumb Procedure Call Standard for leaf functions'
complete -c gcc -d 'Specify the access model for the thread local storage pointer'
complete -c gcc -d 'Specify ATMEL AVR instruction set or MCU type'
complete -c gcc -d 'Output instruction sizes to the asm file'
complete -c gcc -d 'Specify the initial stack address (symbol or numeric value)'
complete -c gcc -d 'Generated code is not compatible with hardware interrupts'
complete -c gcc -d 'Functions prologues/epilogues expanded as call to appropriate subroutines'
complete -c gcc -d 'Do not generate tablejump insns which sometimes increase code size'
complete -c gcc -d 'Change only the low 8 bits of the stack pointer'
complete -c gcc -d 'Assume int to be 8 bit integer'
complete -c gcc -d 'Don’t keep the frame pointer in a register for leaf functions'
complete -c gcc -d 'Ensure that the generated code does not contain speculative loads after jump instructions'
complete -c gcc -d 'Don’t generate extra code to prevent speculative loads from occurring'
complete -c gcc -d 'Ensure that code does not contain C/SSYNC instructions too soon after conditional branches'
complete -c gcc -d 'Don’t generate extra code to prevent C/SSYNC instructions too soon after a conditional branch'
complete -c gcc -d 'Assume that the entire program fits into the low 64k of memory'
complete -c gcc -d 'Assume that the program is arbitrarily large'
complete -c gcc -d 'Support shared libraries via the library ID method'
complete -c gcc -d 'Don’t assume ID based shared libraries are being used'
complete -c gcc -d 'Specified the identification number of the ID based shared library being compiled'
complete -c gcc -d 'Generate code for this architecture'
complete -c gcc -d 'Generate and tune code for this cpu'
complete -c gcc -d 'Tune output for this cpu without restricting the instructions to it'
complete -c gcc -d '=n Warn when the stack frame of a function exceeds n bytes'
complete -c gcc -d '=n Only available with the cris-axis-aout target'
complete -c gcc -d 'Synonym for -march=v3'
complete -c gcc -d 'Synonym for -march=v8'
complete -c gcc -d 'Work around a bug in the "muls" and "mulu" instructions for CPU models where it applies'
complete -c gcc -d 'Work around a bug in the "muls" and "mulu" instructions for CPU models where it applies'
complete -c gcc -d 'Enable CRIS-specific verbose debug-related information in the assembly code'
complete -c gcc -d 'Always emit compare and test instructions before use of condition codes'
complete -c gcc -d 'Do not emit instructions with side-effects in addressing modes other than post-increment'
complete -c gcc -d 'Arranges for stack-frame to be aligned for maximum single data access size for chosen CPU'
complete -c gcc -d 'Arranges for individual data to be aligned for maximum single data access size for chosen CPU'
complete -c gcc -d 'Arranges for constants to be aligned for maximum single data access size for chosen CPU'
complete -c gcc -d 'Make stack-frame, writable data and constants all 32-bit'
complete -c gcc -d 'Make stack-frame, writable data and constants all 16-bit'
complete -c gcc -d 'Make stack-frame, writable data and constants all 8-bit'
complete -c gcc -d 'Skip the normal function prologue and epilogue that sets up the stack-frame'
complete -c gcc -d 'Arrange to link with a simulator library'
complete -c gcc -d 'Like -sim, but put initialized data at 0x40000000 and zero-initialized data at 0x80000000'
complete -c gcc -d 'Enable the use of multiply-accumulate instructions'
complete -c gcc -d 'Add the framework dir to the list of directories to be searched for headers'
complete -c gcc -d 'Emit debugging information for symbols that are used'
complete -c gcc -d 'Emit debugging information for all symbols and types'
complete -c gcc -d '=version The earliest version of MacOS X that this executable will run on is version'
complete -c gcc -d 'Override the defaults for bool so that sizeof(bool)==1'
complete -c gcc -d 'Generate code suitable for fast turn around development'
complete -c gcc -d 'Generate code suitable for fast turn around development'
complete -c gcc -d 'Generate code suitable for fast turn around development'
complete -c gcc -d 'Loads all members of static archive libraries'
complete -c gcc -d 'Cause the errors having to do with files that have the wrong architecture to be fatal'
complete -c gcc -d 'Let dynamic linker bind undefined references when the file is loaded'
complete -c gcc -d 'Produce a Mach-o bundle format file'
complete -c gcc -d 'Specifies the executable that will be loading the build output file being linked'
complete -c gcc -d 'Produce a dynamic library, using the Darwin libtool command'
complete -c gcc -d 'Make output have the ALL subtype, instead of one controlled by -mcpu or -march'
complete -c gcc -d 'Use the floating-point register set'
complete -c gcc -d 'Do not use the floating-point register set'
complete -c gcc -d 'This is like -mieee except the generated code also maintains the IEEE inexact-flag'
complete -c gcc -d 'This option controls what floating-point related traps are enabled'
complete -c gcc -d 'Selects the IEEE rounding mode'
complete -c gcc -d 'Selects the IEEE rounding mode'
complete -c gcc -d 'In the Alpha architecture, floating point traps are imprecise'
complete -c gcc -d 'In the Alpha architecture, floating point traps are imprecise'
complete -c gcc -d 'This option marks the generated code as IEEE conformant'
complete -c gcc -d 'This option require to construct all integer constants using code (maximum is six)'
complete -c gcc -d 'Use GNU assembler'
complete -c gcc -d 'Use BWX instruction set'
complete -c gcc -d 'Do not use BWX instruction set'
complete -c gcc -d 'Use CIX instruction set'
complete -c gcc -d 'Do not use CIX instruction set'
complete -c gcc -d 'Use FIX instruction set'
complete -c gcc -d 'Do not use FIX instruction set'
complete -c gcc -d 'Use MAX instruction set'
complete -c gcc -d 'Do not use MAX instruction set'
complete -c gcc -d 'Use VAX F and G floating point arithmetic'
complete -c gcc -d 'Do not use VAX F and G floating point arithmetic'
complete -c gcc -d 'Assume that the code is small enough to be reachable with a branch instruction'
complete -c gcc -d 'Does not assume that the code is small enough to be reachable with a branch instruction'
complete -c gcc -d '=time Sets the latency the scheduler should assume for typical memory references'
complete -c gcc -d 'Return VMS condition codes from main'
complete -c gcc -d 'Only use the first 32 general purpose registers'
complete -c gcc -d 'Use all 64 general purpose registers'
complete -c gcc -d 'Use only the first 32 floating point registers'
complete -c gcc -d 'Use hardware instructions for floating point operations'
complete -c gcc -d 'Use the hardware floating-point instructions for floating-point operations'
complete -c gcc -d 'Use hardware instructions for floating point operations'
complete -c gcc -d 'Use library routines for floating point operations'
complete -c gcc -d 'Dynamically allocate condition code registers'
complete -c gcc -d 'Do not try to dynamically allocate condition code registers, only use "icc0" and "fcc0"'
complete -c gcc -d 'Change ABI to use double word insns'
complete -c gcc -d 'Do not use double word instructions'
complete -c gcc -d 'Use floating point double instructions'
complete -c gcc -d 'Do not use floating point double instructions'
complete -c gcc -d 'Use media instructions'
complete -c gcc -d 'Do not use media instructions'
complete -c gcc -d 'Use multiply and add/subtract instructions'
complete -c gcc -d 'Do not use multiply and add/subtract instructions'
complete -c gcc -d 'Select the FDPIC ABI, that uses function descriptors to represent pointers to functions'
complete -c gcc -d 'Enable inlining of PLT entries for functions that are not known to bind locally'
complete -c gcc -d 'Assume a large TLS segment when generating thread-local code'
complete -c gcc -d 'Do not assume a large TLS segment when generating thread-local code'
complete -c gcc -d 'Enable the use of "GPREL" relocations in the FDPIC ABI for data that is known to be in read-only sections'
complete -c gcc -d 'Link with the (library, not FD) pic libraries'
complete -c gcc -d 'Always create a frame pointer when a stack frame is allocated (EABI requirement)'
complete -c gcc -d 'Try to align labels to an 8-byte boundary by inserting nops into the previous packet'
complete -c gcc -d 'Generate position-independent EABI code'
complete -c gcc -d 'Use only the first four media accumulator registers'
complete -c gcc -d 'Use all eight media accumulator registers'
complete -c gcc -d 'Pack VLIW instructions'
complete -c gcc -d 'Do not pack VLIW instructions'
complete -c gcc -d 'Do not mark ABI switches in e_flags'
complete -c gcc -d 'Enable the use of conditional-move instructions (default)'
complete -c gcc -d 'Disable the use of conditional-move instructions'
complete -c gcc -d 'Enable the use of conditional set instructions (default)'
complete -c gcc -d 'Disable the use of conditional set instructions'
complete -c gcc -d 'Enable the use of conditional execution (default)'
complete -c gcc -d 'Disable the use of conditional execution'
complete -c gcc -d 'Run a pass to pack branches into VLIW instructions (default)'
complete -c gcc -d 'Do not run a pass to pack branches into VLIW instructions'
complete -c gcc -d 'Enable optimization of "&&" and "││" in conditional execution (default)'
complete -c gcc -d 'Disable optimization of "&&" and "││" in conditional execution'
complete -c gcc -d 'Enable nested conditional execution optimizations (default)'
complete -c gcc -d 'Disable nested conditional execution optimizations'
complete -c gcc -d 'This switch removes redundant "membar" instructions from the compiler generated code'
complete -c gcc -d 'This switch disables the automatic removal of redundant "membar" instructions from the generated code'
complete -c gcc -d 'Cause gas to print out tomcat statistics'
complete -c gcc -d 'Shorten some address references at link time, when possible; uses the linker option -relax'
complete -c gcc -d 'Generate code for the H8/300H'
complete -c gcc -d 'Generate code for the H8S'
complete -c gcc -d 'Generate code for the H8S and H8/300H in the normal mode'
complete -c gcc -d 'Generate code for the H8S/2600'
complete -c gcc -d 'On the H8/300H and H8S, use the same alignment rules as for the H8/300'
complete -c gcc -d 'Generate code suitable for big switch tables'
complete -c gcc -d 'Fill delay slots of function calls with unconditional jump instructions'
complete -c gcc -d 'Prevent floating point registers from being used in any manner'
complete -c gcc -d 'Prevent the compiler from using indexing address modes'
complete -c gcc -d 'Assume the target has no space registers'
complete -c gcc -d 'Assume calls never cross space boundaries'
complete -c gcc -d 'Generate code treating the given register range as fixed registers'
complete -c gcc -d 'Generate code treating the given register range as fixed registers'
complete -c gcc -d 'Generate 3-instruction load and store sequences as sometimes required by the HP-UX 10 linker'
complete -c gcc -d 'Use the portable calling conventions proposed by HP for ELF systems'
complete -c gcc -d 'Schedule code according to the constraints for the machine type cpu-type'
complete -c gcc -d 'Enable the optimization pass in the HP-UX linker'
complete -c gcc -d 'Generate the predefine, "_SIO", for server IO'
complete -c gcc -d 'Use GNU ld specific options'
complete -c gcc -d 'Use HP ld specific options'
complete -c gcc -d 'Generate compiler predefines and select a startfile for the specified UNIX standard'
complete -c gcc -d 'Suppress the generation of link options to search libdld'
complete -c gcc -d '=unit Generate floating point arithmetics for selected unit unit'
complete -c gcc -d '=dialect Output asm instructions using selected dialect'
complete -c gcc -d 'Control whether or not the compiler uses IEEE floating point comparisons'
complete -c gcc -d 'Control whether or not the compiler uses IEEE floating point comparisons'
complete -c gcc -d 'Do not use the FPU registers for return values of functions'
complete -c gcc -d 'Some 387 emulators do not support the "sin", "cos" and "sqrt" instructions for the 387'
complete -c gcc -d 'Aligns "double", "long double", and "long long" variables on a two word boundary'
complete -c gcc -d 'Aligns "double", "long double", and "long long" variables on a one word boundary'
complete -c gcc -d 'These switches control the size of "long double" type'
complete -c gcc -d 'These switches control the size of "long double" type'
complete -c gcc -d '=number With -mcmodel=medium: place data greater than threshold in large data section'
complete -c gcc -d 'Control whether GCC places uninitialized local variables into the "bss" or "data" segments'
complete -c gcc -d 'Control whether GCC places uninitialized local variables into the "bss" or "data" segments'
complete -c gcc -d 'Use SSE register passing conventions for float and double arguments and return values'
complete -c gcc -d '=num Attempt to keep the stack boundary aligned to a 2 raised to num byte boundary'
complete -c gcc -d 'Use PUSH operations to store outgoing parameters'
complete -c gcc -d 'Reserve space for outgoing args in the function prologue'
complete -c gcc -d 'Support thread-safe exception handling on Mingw32'
complete -c gcc -d 'Do not align destination of inlined string operations'
complete -c gcc -d 'Enable string operation inlining even without alignment'
complete -c gcc -d 'TLS variables may be accessed with offsets from the TLS segment register'
complete -c gcc -d 'TLS variables may not accessed with offsets from the TLS segment register'
complete -c gcc -d 'Generate code for a 32-bit environment'
complete -c gcc -d 'Generate code for a 64-bit environment'
complete -c gcc -d 'Do not use a so called red zone for x86-64 code'
complete -c gcc -d 'Generate code for the GNU assembler'
complete -c gcc -d 'Do not use a global pointer register'
complete -c gcc -d 'Generate (or don’t) a stop bit immediately before and after volatile asm statements'
complete -c gcc -d 'Generate (or don’t) a stop bit immediately before and after volatile asm statements'
complete -c gcc -d 'Generate (or don’t) in, loc, and out register names for the stacked registers'
complete -c gcc -d 'Generate (or don’t) in, loc, and out register names for the stacked registers'
complete -c gcc -d 'Use a single constant global pointer value'
complete -c gcc -d 'Generate code that is self-relocatable'
complete -c gcc -d 'Inline divides of floating point values using the minimum latency algorithm'
complete -c gcc -d 'Inline divides of floating point values using the maximum throughput algorithm'
complete -c gcc -d 'Inline divides of integer values using the minimum latency algorithm'
complete -c gcc -d 'Inline divides of integer values using the maximum throughput algorithm'
complete -c gcc -d 'Inline square roots using the minimum latency algorithm'
complete -c gcc -d 'Inline square roots using the maximum throughput algorithm'
complete -c gcc -d 'Don’t generate assembler code for the DWARF2 line number debugging info'
complete -c gcc -d 'Generate assembler code for the DWARF2 line number debugging info'
complete -c gcc -d 'Allow stop bits to be placed earlier than immediately before the triggering instruction'
complete -c gcc -d 'Disallow stop bits to be placed earlier than immediately before the triggering instruction'
complete -c gcc -d 'Specify bit size of immediate TLS offsets'
complete -c gcc -d 'Specify bit size of immediate TLS offsets'
complete -c gcc -d 'Add support for multithreading using the POSIX threads library'
complete -c gcc -d 'Add support for multithreading using the POSIX threads library'
complete -c gcc -d 'Generate code for a 32-bit environment'
complete -c gcc -d 'Generate code for a 64-bit environment'
complete -c gcc -d 'Specifies that the program will be run on the simulator'
complete -c gcc -d '=number The number of available memory-based pseudo-registers'
complete -c gcc -d 'Generate code for the M32R/2'
complete -c gcc -d 'Generate code for the M32R/X'
complete -c gcc -d 'Generate code for the M32R'
complete -c gcc -s 'G' -d 'Put global and static objects <= num bytes into the small data or bss sections'
complete -c gcc -d 'Print additional debug info'
complete -c gcc -d 'Do not print additional debug info'
complete -c gcc -d 'Align all loops to a 32-byte boundary'
complete -c gcc -d 'Do not enforce a 32-byte alignment for loops'
complete -c gcc -d '=number Issue number instructions per cycle'
complete -c gcc -d '=number number can only be 1 or 2'
complete -c gcc -d '=number Specifies the trap number to use to flush the cache'
complete -c gcc -d 'Specifies that the cache cannot be flushed by using a trap'
complete -c gcc -d '=name Specifies the name of the operating system function to call to flush the cache'
complete -c gcc -d 'Indicates that there is no OS function for flushing the cache'
complete -c gcc -d 'Generate output for a 68000'
complete -c gcc -d 'Generate output for a 68000'
complete -c gcc -d 'Generate output for a 68020'
complete -c gcc -d 'Generate output for a 68020'
complete -c gcc -d 'Generate output containing 68881 instructions for floating point'
complete -c gcc -d 'Generate output for a 68030'
complete -c gcc -d 'Generate output for a 68040'
complete -c gcc -d 'Generate output for a 68060'
complete -c gcc -d 'Generate output for a CPU32'
complete -c gcc -d 'Generate output for a 520X "coldfire" family cpu'
complete -c gcc -d 'Generate output for a 68040, without using any of the new instructions'
complete -c gcc -d 'Generate output for a 68060, without using any of the new instructions'
complete -c gcc -d 'Consider type "int" to be 16 bits wide, like "short int"'
complete -c gcc -d 'Do not use the bit-field instructions'
complete -c gcc -d 'Do use the bit-field instructions'
complete -c gcc -d 'Let functions that take a fixed number of arguments return with the "rtd" instruction'
complete -c gcc -d 'Make GCC align "int", "long", "long long", "float", "double", and "long double" variables on a 32-bit boundary'
complete -c gcc -d 'Make GCC aligns "int", "long", "long long", "float", "double", and "long double" variables on 16-bit boundary'
complete -c gcc -d 'Use the pc-relative addressing mode of the 68000 directly'
complete -c gcc -d 'Do not (do) assume that unaligned memory references will be handled by the system'
complete -c gcc -d 'Do not (do) assume that unaligned memory references will be handled by the system'
complete -c gcc -d 'Allow the data segment to be located in a different area of memory from the text segment'
complete -c gcc -d 'Assume that the data segment follows the text segment'
complete -c gcc -d 'Generate output for a 68HC11'
complete -c gcc -d 'Generate output for a 68HC11'
complete -c gcc -d 'Generate output for a 68HC12'
complete -c gcc -d 'Generate output for a 68HC12'
complete -c gcc -d 'Generate output for a 68HCS12'
complete -c gcc -d 'Generate output for a 68HCS12'
complete -c gcc -d 'Enable the use of 68HC12 pre and post auto-increment and autodecrement addressing modes'
complete -c gcc -d 'Enable the use of 68HC12 min and max instructions'
complete -c gcc -d 'Enable the use of 68HC12 min and max instructions'
complete -c gcc -d '=count Specify the number of pseudo-soft registers which are used for the code generation'
complete -c gcc -d 'Inline constants into the code stream if it can be done in two instructions or less'
complete -c gcc -d 'Inline constants into the code stream if it can be done in two instructions or less'
complete -c gcc -d 'Use the divide instruction'
complete -c gcc -d 'Use the divide instruction'
complete -c gcc -d 'Allow arbitrary sized immediates in bit operations'
complete -c gcc -d 'Allow arbitrary sized immediates in bit operations'
complete -c gcc -d 'Always treat bit-fields as int-sized'
complete -c gcc -d 'Always treat bit-fields as int-sized'
complete -c gcc -d 'Force all functions to be aligned to a four byte boundary'
complete -c gcc -d 'Force all functions to be aligned to a four byte boundary'
complete -c gcc -d 'Emit callgraph information'
complete -c gcc -d 'Emit callgraph information'
complete -c gcc -d 'Prefer word access when reading byte quantities'
complete -c gcc -d 'Prefer word access when reading byte quantities'
complete -c gcc -d 'Generate code for the 210 processor'
complete -c gcc -d 'Generate code for the 210 processor'
complete -c gcc -d 'Generate big-endian code'
complete -c gcc -d 'Generate little-endian code'
complete -c gcc -d 'Equivalent to -march=mips1'
complete -c gcc -d 'Equivalent to -march=mips2'
complete -c gcc -d 'Equivalent to -march=mips3'
complete -c gcc -d 'Equivalent to -march=mips4'
complete -c gcc -d 'Equivalent to -march=mips32'
complete -c gcc -d 'Equivalent to -march=mips32r2'
complete -c gcc -d 'Equivalent to -march=mips64'
complete -c gcc -d 'Generate MIPS16 code'
complete -c gcc -d 'Do not generate MIPS16 code'
complete -c gcc -d 'Generate SVR4-style position-independent code'
complete -c gcc -d 'Do not generate SVR4-style position-independent code'
complete -c gcc -d 'Lift the usual restrictions on the size of the global offset table'
complete -c gcc -d 'Do not lift the usual restrictions on the size of the global offset table'
complete -c gcc -d 'Assume that general-purpose registers are 32 bits wide'
complete -c gcc -d 'Assume that general-purpose registers are 64 bits wide'
complete -c gcc -d 'Assume that floating-point registers are 32 bits wide'
complete -c gcc -d 'Assume that floating-point registers are 64 bits wide'
complete -c gcc -d 'Assume that the floating-point coprocessor only supports singleprecision operations'
complete -c gcc -d 'Assume that the floating-point coprocessor supports double-precision operations'
complete -c gcc -d 'Use the MIPS DSP ASE'
complete -c gcc -d 'Do not use the MIPS DSP ASE'
complete -c gcc -d 'Use paired-single floating-point instructions'
complete -c gcc -d 'Do not use paired-single floating-point instructions'
complete -c gcc -d 'Use the MIPS-3D ASE'
complete -c gcc -d 'Do not use the MIPS-3D ASE'
complete -c gcc -d 'Force "long" types to be 64 bits wide'
complete -c gcc -d 'Force "long", "int", and pointer types to be 32 bits wide'
complete -c gcc -d 'Assume that all symbols have 32-bit values, regardless of the selected ABI'
complete -c gcc -d 'Do not assume that all symbols have 32-bit values, regardless of the selected ABI'
complete -c gcc -d 'Allocate variables read-only data section, then small data section, otherwise in data'
complete -c gcc -d 'Do not allocate variables to the read-only data section first'
complete -c gcc -d 'Put uninitialized "const" variables in the read-only data section'
complete -c gcc -d 'Put uninitialized "const" variables in the read-only data section'
complete -c gcc -d 'Enable use of the "%hi()" and "%lo()" assembler relocation operators'
complete -c gcc -d 'Disable use of the "%hi()" and "%lo()" assembler relocation operators'
complete -c gcc -d 'Use assembler relocation operators when dealing with symbolic addresses'
complete -c gcc -d 'Do not use assembler relocation operators when dealing with symbolic addresses'
complete -c gcc -d 'Trap on integer division by zero'
complete -c gcc -d 'Do not trap on integer division by zero'
complete -c gcc -d 'Check for division by zero with a trap'
complete -c gcc -d 'Check for division by zero with a break'
complete -c gcc -d 'Force the use of "memcpy()" for non-trivial block moves'
complete -c gcc -d 'Do not force the use of "memcpy()" for non-trivial block moves'
complete -c gcc -d 'Enable use of the "mad", "madu" and "mul" instructions, as provided by the R4650 ISA'
complete -c gcc -d 'Disable use of the "mad", "madu" and "mul" instructions, as provided by the R4650 ISA'
complete -c gcc -d 'Enable floating point multiply-accumulate instructions'
complete -c gcc -d 'Disable floating point multiply-accumulate instructions'
complete -c gcc -d 'Tell the MIPS assembler to not run its preprocessor over user assembler files'
complete -c gcc -d 'Work around certain R4000 CPU errata'
complete -c gcc -d 'Does not work around certain R4000 CPU errata'
complete -c gcc -d 'Work around certain R4400 CPU errata'
complete -c gcc -d 'Does not work around certain R4400 CPU errata'
complete -c gcc -d 'Work around certain VR4120 errata'
complete -c gcc -d 'Does not work around certain VR4120 errata'
complete -c gcc -d 'Work around the VR4130 "mflo"/"mfhi" errata'
complete -c gcc -d 'Work around certain SB-1 CPU core errata'
complete -c gcc -d 'Does not work around certain SB-1 CPU core errata'
complete -c gcc -d 'Enable use of Branch Likely instructions'
complete -c gcc -d 'Disable use of Branch Likely instructions'
complete -c gcc -d 'Specifies whether FP exceptions are enabled'
complete -c gcc -d 'Specifies whether FP exceptions are enabled'
complete -c gcc -d 'Intrinsic library functions are being compiled, passing all values in registers'
complete -c gcc -d 'Intrinsic library functions are NOT being compiled'
complete -c gcc -d 'Generate floating-point comparison instructions that compare with respect to the "rE" epsilon register'
complete -c gcc -d 'Generate floating-point comparison instructions that compare with respect to the "rE" epsilon register'
complete -c gcc -d 'Use zero-extending load instructions for short reads by default'
complete -c gcc -d 'Make the result of a division yielding a remainder have the same sign as the divisor'
complete -c gcc -d 'Make the result of a division yielding a remainder have the same sign as the divisor'
complete -c gcc -d 'Prepend a : to all global symbols, so the assembly code can be used with the "PREFIX" assembly directive'
complete -c gcc -d 'Do not prepend a : to all global symbols, so the assembly code can be used with the "PREFIX" assembly directive'
complete -c gcc -d 'Generate an executable in the ELF format'
complete -c gcc -d 'Use probable-branch instructions'
complete -c gcc -d 'Do not use probable-branch instructions'
complete -c gcc -d 'Generate code that uses base addresses'
complete -c gcc -d 'Do not generate code that uses base addresses'
complete -c gcc -d 'Force generated code to have a single exit point in each function'
complete -c gcc -d 'Do not force generated code to have a single exit point in each function'
complete -c gcc -d 'Generate code to avoid bugs in the multiply instructions for the MN10300 processors'
complete -c gcc -d 'Do not generate code to avoid bugs in the multiply instructions for the MN10300 processors'
complete -c gcc -d 'Generate code which uses features specific to the AM33 processor'
complete -c gcc -d 'Do not generate code which uses features specific to the AM33 processor'
complete -c gcc -d 'When generating a function which returns a pointer, return the pointer in both "a0" and "d0"'
complete -c gcc -d 'Do not link in the C run-time initialization object file'
complete -c gcc -d 'Use byte loads and stores when generating code'
complete -c gcc -d 'Do not use byte loads and stores when generating code'
complete -c gcc -d 'Use hardware FPP floating point'
complete -c gcc -d 'Return floating-point results in ac0 (fr0 in Unix assembler syntax)'
complete -c gcc -d 'Return floating-point results in memory'
complete -c gcc -d 'Generate code for a PDP-11/40'
complete -c gcc -d 'Generate code for a PDP-11/45'
complete -c gcc -d 'Generate code for a PDP-11/10'
complete -c gcc -d 'Use inline "movmemhi" patterns for copying memory'
complete -c gcc -d 'Do not use inline "movmemhi" patterns for copying memory'
complete -c gcc -d 'Use 16-bit "int"'
complete -c gcc -d 'Use 16-bit "int"'
complete -c gcc -d 'Use 32-bit "int"'
complete -c gcc -d 'Use 32-bit "int"'
complete -c gcc -d 'Use 64-bit "float"'
complete -c gcc -d 'Use 64-bit "float"'
complete -c gcc -d 'Use 32-bit "float"'
complete -c gcc -d 'Use 32-bit "float"'
complete -c gcc -d 'Use "abshi2" pattern'
complete -c gcc -d 'Do not use "abshi2" pattern'
complete -c gcc -d 'Pretend that branches are expensive'
complete -c gcc -d 'Do not pretend that branches are expensive'
complete -c gcc -d 'Generate code for a system with split I&D'
complete -c gcc -d 'Generate code for a system without split I&D'
complete -c gcc -d 'Use Unix assembler syntax'
complete -c gcc -d 'Use DEC assembler syntax'
complete -c gcc -d 'Select which mnemonics to use in the generated assembler code'
complete -c gcc -d 'Select which mnemonics to use in the generated assembler code'
complete -c gcc -d 'Generate code to compute division as reciprocal estimate and iterative refinement'
complete -c gcc -d 'Do not generate code to compute division as reciprocal estimate and iterative refinement'
complete -c gcc -d 'Use AltiVec instructions'
complete -c gcc -d 'Generate VRSAVE instructions when generating AltiVec code'
complete -c gcc -d 'Generate VRSAVE instructions when generating AltiVec code'
complete -c gcc -d 'Allow ld and ld'
complete -c gcc -d 'Use a BSS '
complete -c gcc -d 'Enable the generation of ISEL instructions'
complete -c gcc -d 'Disable the generation of ISEL instructions'
complete -c gcc -d 'Enable the generation of SPE simd instructions'
complete -c gcc -d 'Enable the generation of floating point operations on the general purpose registers'
complete -c gcc -d 'Allocate full Table Of Contents'
complete -c gcc -d 'No floats in Table Of Contents'
complete -c gcc -d 'No sums in Table Of Contents'
complete -c gcc -d 'Only one Table Of Contents entry per file'
complete -c gcc -d 'Enable 64-bit AIX ABI and calling convention'
complete -c gcc -d 'Enable 32-bit AIX ABI and calling convention'
complete -c gcc -d 'Conform more closely to IBM XL compiler semantics when using AIX-compatible ABI'
complete -c gcc -d 'Support IBM RS/6000 SP Parallel Environment (PE)'
complete -c gcc -d 'Override ABI-defined alignment of larger types on their natural size-based boundary'
complete -c gcc -d 'Follow ABI-specified alignment rules'
complete -c gcc -d 'Use load multiple word instructions and the store multiple word instructions'
complete -c gcc -d 'Use load string and store string word instructions to save registers and do small block moves'
complete -c gcc -d 'Use load or store instructions that update the base register to the calculated memory location'
complete -c gcc -d 'macOS: compile code so that its external references are relocatable'
complete -c gcc -d '=priority Set priority of dispatch-slot restricted instructions in second scheduling pass'
complete -c gcc -d 'Which dependences are considered costly by the target during instruction scheduling'
complete -c gcc -d 'Which nop insertion scheme to use during the second scheduling pass'
complete -c gcc -d 'Return all structures in memory (as specified by the AIX ABI)'
complete -c gcc -d 'Return structures smaller than 8 bytes in registers (as specified by the SVR4 ABI)'
complete -c gcc -d 'PowerPC: assume that all calls to variable argument functions are properly prototyped'
complete -c gcc -d 'PowerPC: does not assume that all calls to variable argument functions are properly prototyped'
complete -c gcc -d 'PowerPC: startup module is crt0, stdlib is libmvme.a'
complete -c gcc -d 'PowerPC: startup module is crt0, stdlib is libads.a'
complete -c gcc -d 'PowerPC: startup module is crt0, stdlib is libyk.a'
complete -c gcc -d 'PowerPC: specify that you are compiling for a VxWorks system'
complete -c gcc -d 'Specify that you are compiling for the WindISS simulation environment'
complete -c gcc -d 'PowerPC: set PPC_EMB bit in the ELF header to indicate eabi extended relocations'
complete -c gcc -d 'Adhere to EABI'
complete -c gcc -d 'Disable optimizations that use the small data section'
complete -c gcc -d 'PowerPC: emit register names in the assembly language output using symbolic forms'
complete -c gcc -d 'PowerPC: do not emit register names in the assembly language output using symbolic forms'
complete -c gcc -d 'Default to making all function calls indirectly'
complete -c gcc -d 'These switches control the size of "long double" type'
complete -c gcc -d 'These switches control the size of "long double" type'
complete -c gcc -d 'Store the address of the caller’s frame as backchain pointer into callee’s stack frame'
complete -c gcc -d 'Do not store the address of the caller’s frame as backchain pointer into callee’s stack frame'
complete -c gcc -d 'Use the packed stack layout'
complete -c gcc -d 'Do not use the packed stack layout'
complete -c gcc -d 'Generate code using the "bras" instruction to do subroutine calls'
complete -c gcc -d 'Do not generate code using the "bras" instruction to do subroutine calls'
complete -c gcc -d 'When -m31 is specified, generate code compliant to the GNU/Linux for S/390 ABI'
complete -c gcc -d 'When -mzarch is specified, generate code using the instructions available on z/Architecture'
complete -c gcc -d 'When -mzarch is specified, generate code using the instructions available on z/Architecture'
complete -c gcc -d 'Generate (or do not generate) code using the "mvcle" instruction to perform block moves'
complete -c gcc -d 'Generate (or do not generate) code using the "mvcle" instruction to perform block moves'
complete -c gcc -d 'Add in TPF OS specific branches to trace routines in the operating system'
complete -c gcc -d 'Do not add in TPF OS specific branches to trace routines in the operating system'
complete -c gcc -d '=framesize Emit a warning if the current function exceeds the given frame size'
complete -c gcc -d 'Emit a warning if the function calls alloca or uses dynamically sized arrays'
complete -c gcc -d 'Generate code for the SH1'
complete -c gcc -d 'Generate code for the SH2'
complete -c gcc -d 'Generate code for the SH2e'
complete -c gcc -d 'Generate code for the SH3'
complete -c gcc -d 'Generate code for the SH3e'
complete -c gcc -d 'Generate code for the SH4 without a floating-point unit'
complete -c gcc -d 'Generate code for the SH4 with a single-precision-only FPU'
complete -c gcc -d 'Generate code for the SH4 assuming the FPU is single-precision by default'
complete -c gcc -d 'Generate code for the SH4'
complete -c gcc -d 'Generate code for the SH4al-dsp, or for a SH4a without using FPU'
complete -c gcc -d 'Generate code for the SH4a, without double-precision floating point operations'
complete -c gcc -d 'Generate code for the SH4a assuming the FPU is single-precision by default'
complete -c gcc -d 'Generate code for the SH4a'
complete -c gcc -d 'Same as -m4a-nofpu, except that it implicitly passes -dsp to the assembler'
complete -c gcc -d 'Compile code for the processor in big endian mode'
complete -c gcc -d 'Compile code for the processor in little endian mode'
complete -c gcc -d 'Align doubles at 64-bit boundaries'
complete -c gcc -d 'Use 32-bit offsets in "switch" tables'
complete -c gcc -d 'Enable the use of the instruction "fmovd"'
complete -c gcc -d 'Comply with the calling conventions defined by Renesas'
complete -c gcc -d 'Comply with the calling conventions defined by Renesas'
complete -c gcc -d 'Comply with the old calling conventions defined for GCC before Renesas'
complete -c gcc -d 'Mark the "MAC" register as call-clobbered, even if -mhitachi is given'
complete -c gcc -d 'Increase IEEE-compliance of floating-point code'
complete -c gcc -d 'Dump instruction size and location in the assembly code'
complete -c gcc -d 'Optimize for space instead of speed'
complete -c gcc -d 'For PIC: function calls using the Global Offset Table, not Procedure Linkage Table'
complete -c gcc -d '=number Set the cost to assume for a multiply insn'
complete -c gcc -d '=name Set the name of the library function used for 32 bit signed division to name'
complete -c gcc -d 'Throttle unrolling to avoid thrashing target registers'
complete -c gcc -d 'Enable the use of the indexed addressing mode for SHmedia32/SHcompact'
complete -c gcc -d '=number Set the cost assumed for the gettr instruction to number'
complete -c gcc -d 'Assume pt* instructions won’t trap'
complete -c gcc -d 'Assume symbols might be invalid'
complete -c gcc -d 'Use global registers 2 through 4, SPARC SVR4 ABI-reserved for applications'
complete -c gcc -d 'Generate output containing library calls for floating point'
complete -c gcc -d 'Generate quad-word (long double) floating point instructions'
complete -c gcc -d 'Generate library calls for quad-word (long double) floating point instructions'
complete -c gcc -d 'Assume that doubles have 8 byte alignment'
complete -c gcc -d 'Assume that doubles have 8 byte alignment'
complete -c gcc -d 'Assumes that structures should have 8 byte alignment'
complete -c gcc -d 'Does not assume that structures should have 8 byte alignment'
complete -c gcc -d 'With -shared: do not pass -z text to the linker'
complete -c gcc -d 'With -mv8plus, GCC generates code for the SPARC-V8+ ABI'
complete -c gcc -d 'With -mv8plus, GCC generates code for the SPARC-V8+ ABI'
complete -c gcc -d 'Take advantage of the UltraSPARC Visual Instruction Set extensions'
complete -c gcc -d 'Assume that the stack pointer, and frame pointer if present, are offset by -2047'
complete -c gcc -d 'Add support for multithreading'
complete -c gcc -d 'Identify the versions of each tool used by the compiler, in a "'
complete -c gcc -d 'Refrain from adding "'
complete -c gcc -d 'Generates code for the big or small memory model'
complete -c gcc -d 'Generates code for the big or small memory model'
complete -c gcc -d 'Generates code for the big or small memory model'
complete -c gcc -d 'Generates code for the big or small memory model'
complete -c gcc -d 'Allow allocation of general integer operands into the block count register BK'
complete -c gcc -d 'Disallow allocation of general integer operands into the block count register BK'
complete -c gcc -d 'Enable generation of code using decrement and branch, DBcond(D), instructions'
complete -c gcc -d 'Disable generation of code using decrement and branch, DBcond(D), instructions'
complete -c gcc -d 'Enable repeat block sequences using the RPTB instruction for zero overhead looping'
complete -c gcc -d 'Disable repeat block sequences using the RPTB instruction for zero overhead looping'
complete -c gcc -d 'Enable the use of the single instruction repeat instruction RPTS'
complete -c gcc -d 'Disable the use of the single instruction repeat instruction RPTS'
complete -c gcc -d 'Try to emit an assembler syntax that the TI assembler (asm30) is happy with'
complete -c gcc -d 'Use registers (stack) for passing arguments to functions'
complete -c gcc -d 'Use registers (stack) for passing arguments to functions'
complete -c gcc -d 'Allow the generation of parallel instructions'
complete -c gcc -d 'Allow the generation of parallel instructions'
complete -c gcc -d 'Allow the generation of MPY││ADD/MPY││SUB parallel instructions, with -mparallel-insns'
complete -c gcc -d 'Disallow the generation of MPY││ADD/MPY││SUB parallel instructions, with -mparallel-insns'
complete -c gcc -d 'Do not use external functions to save/restore registers at function prologue/epilogue'
complete -c gcc -d 'Do use external functions to save/restore registers at function prologue/epilogue'
complete -c gcc -d '=n Put static/global variables under n bytes into tiny data area register "ep" points to'
complete -c gcc -d '=n Put static/global variables under n bytes into small data area register "gp" points to'
complete -c gcc -d '=n Put static/global variables under n bytes into the first 32 kilobytes of memory'
complete -c gcc -d 'Specify that the target processor is the V850'
complete -c gcc -d 'Specify that the target processor is the V850E1'
complete -c gcc -d 'Specify that the target processor is the V850E'
complete -c gcc -d 'Suppress generation of CALLT instruction for the v850e/v850e1 flavors of v850 architecture'
complete -c gcc -d 'Ouput certain jump instructions, only compatible with GNU assembler'
complete -c gcc -d 'Output code for g-format floating point numbers instead of d-format'
complete -c gcc -d 'Enable or disable use of "CONST16" instructions for loading constant values'
complete -c gcc -d 'Enable or disable use of "CONST16" instructions for loading constant values'
complete -c gcc -d 'Control the treatment of literal pools'
complete -c gcc -d 'Control the treatment of literal pools'
complete -c gcc -d 'Tell assembler to automatically align instructions to reduce branch penalties'
complete -c gcc -d 'Tell assembler to not automatically align instructions to reduce branch penalties'
complete -c gcc -d 'Tell assembler to translate direct calls to indirect calls'
complete -c gcc -d 'Generates traps for signed overflow on addition, subtraction, multiplication operations'
complete -c gcc -d 'Assume that signed arithmetic overflow wraps around using twos-complement representation'
complete -c gcc -d 'Enable exception handling'
complete -c gcc -d 'Allow trapping instructions to throw exceptions'
complete -c gcc -d 'Like -fexceptions, but only generate needed static data'
complete -c gcc -d 'Generate unwind table in dwarf2 format'
complete -c gcc -d 'Return "short" "struct" and "union" values in memory like longer ones, rather than in registers'
complete -c gcc -d 'Return "struct" and "union" values in registers when possible'
complete -c gcc -d 'Allocate to an "enum" type only as many bytes as it needs for the declared range of possible values'
complete -c gcc -d 'Use the same size for "double" as for "float"'
complete -c gcc -d 'Override the underlying type for wchar_t to be short unsigned int'
complete -c gcc -d 'Requests that the data and non-"const" variables of this compilation be shared data rather than private data'
complete -c gcc -d 'In C, allocate even uninitialized global variables in the data section of the object file'
complete -c gcc -d 'Ignore the #ident directive'
complete -c gcc -d 'Don’t output a "'
complete -c gcc -d 'Put extra commentary information in the generated assembly code to make it more readable'
complete -c gcc -d 'Emit position-independent code (PIC) usable in shared library'
complete -c gcc -d 'Emit position-independent code, usable in shared library, avoid global offset table size limits'
complete -c gcc -d 'Like -fpic, but position independent code can be only linked into executables'
complete -c gcc -d 'fpie but harder'
complete -c gcc -d 'Do not use jump tables for switch statements'
complete -c gcc -d 'Treat register as a fixed register; generated code should not refer to it'
complete -c gcc -d 'Treat the register named reg as an allocable register that is clobbered by function calls'
complete -c gcc -d 'Treat the register named reg as an allocable register saved by functions'
complete -c gcc -d 'Without a value specified, pack all structure members together without holes'
complete -c gcc -d 'Generate instrumentation calls for entry and exit to functions'
complete -c gcc -d 'Generate code to verify that you do not go beyond the boundary of the stack'
complete -c gcc -d 'Generate code to ensure that the stack does not grow beyond the value of a register'
complete -c gcc -d 'Generate code to ensure that the stack does not grow beyond the address of a symbol'
complete -c gcc -d 'Specify the possible relationships among parameters and between parameters and global data'
complete -c gcc -d 'Specify the possible relationships among parameters and between parameters and global data'
complete -c gcc -d 'Specify the possible relationships among parameters and between parameters and global data'
complete -c gcc -d 'Change the way C symbols are represented in the object file'
complete -c gcc -d '=model Alter the thread-local storage model to be used'
complete -c gcc -d 'Set the default ELF image symbol visibility'
complete -c gcc -d 'Enable handling of OpenMP directives "#pragma omp" in C/C++ and "!$omp" in Fortran'
