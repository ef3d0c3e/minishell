complete -c composer -d 'User script'
complete -c composer -l 'timeout' -d 'Sets script timeout in seconds, or 0 for never'
complete -c composer -l 'dev' -d 'Sets the dev mode'
complete -c composer -l 'no-dev' -d 'Disables the dev mode'
complete -c composer -l 'list' -d 'List scripts'
complete -c composer -d 'Short information about Composer'
complete -c composer -d 'Create an archive of this composer package'
complete -c composer -d 'Check that platform requirements are satisfied'
complete -c composer -d 'Set config options'
complete -c composer -d 'Create new project from a package into given directory'
complete -c composer -d 'Shows which packages depend on the given package'
complete -c composer -d 'Diagnoses the system to identify common errors'
complete -c composer -d 'Dumps the autoloader'
complete -c composer -d 'Executes a vendored binary/script'
complete -c composer -d 'Allows running commands in the global composer dir ($COMPOSER_HOME)'
complete -c composer -d 'Displays help for a command'
complete -c composer -d 'Creates a basic composer.json file in current directory'
complete -c composer -d 'Install dependencies from composer.lock or composer.json'
complete -c composer -d 'Show information about licenses of dependencies'
complete -c composer -d 'Lists commands'
complete -c composer -d 'Shows a list of installed packages with available updates'
complete -c composer -d 'Shows which packages prevent the given package from being installed'
complete -c composer -d 'Removes a package from the require or require-dev'
complete -c composer -d 'Adds required packages to your composer.json and installs them'
complete -c composer -d 'Run the scripts defined in composer.json'
complete -c composer -d 'Search for packages'
complete -c composer -d 'Updates composer.phar to the latest version'
complete -c composer -d 'Show information about packages'
complete -c composer -d 'Show a list of locally modified packages'
complete -c composer -d 'Shows package suggestions'
complete -c composer -d 'Update dependencies according to composer.json, and update composer.lock'
complete -c composer -d 'Validates a composer.json'
complete -c composer -d 'Shows which packages cause the given package to be installed'
complete -c composer -d 'Shows which packages prevent the given package from being installed'
complete -c composer -l 'format' -d 'Format of the resulting archive: tar or zip'
complete -c composer -l 'dir' -d 'Write the archive to this directory'
complete -c composer -l 'file' -d 'Write the archive with the given file name. Note that the format will be appended'
complete -c composer -l 'ignore-filters' -d 'Ignore filters when saving package'
complete -c composer -l 'homepage' -d 'Open the homepage instead of the repository URL'
complete -c composer -l 'show' -d 'Only show the homepage or repository URL'
complete -c composer -l 'no-dev' -d 'Disables checking of require-dev packages requirements'
complete -c composer -l 'global' -d 'Apply command to the global config file'
complete -c composer -l 'editor' -d 'Open editor'
complete -c composer -l 'auth' -d 'Affect auth config file (only used for --editor)'
complete -c composer -l 'unset' -d 'Unset the given setting-key'
complete -c composer -l 'list' -d 'List configuration settings'
complete -c composer -l 'file' -d 'If you want to choose a different composer.json or config.json'
complete -c composer -l 'absolute' -d 'Returns absolute paths when fetching *-dir config values instead of relative'
complete -c composer -l 'stability' -d 'Minimum-stability allowed (unless a version is specified)'
complete -c composer -l 'prefer-source' -d 'Forces installation from package sources when possible, including VCS information'
complete -c composer -l 'prefer-dist' -d 'Forces installation from package dist even for dev versions'
complete -c composer -l 'repository' -d 'Pick a different repository (as url or json config) to look for the package'
complete -c composer -l 'repository-url' -d 'DEPRECATED: Use --repository instead'
complete -c composer -l 'dev' -d 'Enables installation of require-dev packages (enabled by default, only present for BC)'
complete -c composer -l 'no-dev' -d 'Disables installation of require-dev packages'
complete -c composer -l 'no-custom-installers' -d 'DEPRECATED: Use no-plugins instead'
complete -c composer -l 'no-scripts' -d 'Whether to prevent execution of all defined scripts in the root package'
complete -c composer -l 'no-progress' -d 'Do not output download progress'
complete -c composer -l 'no-secure-http' -d 'Disable secure-http while installing the root package. (This is a BAD IDEA)'
complete -c composer -l 'keep-vcs' -d 'Whether to prevent deleting the vcs folder'
complete -c composer -l 'remove-vcs' -d 'Whether to force deletion of the vcs folder without prompting'
complete -c composer -l 'no-install' -d 'Whether to skip installation of the package dependencies'
complete -c composer -l 'ignore-platform-reqs' -d 'Ignore platform requirements (php & ext- packages)'
complete -c composer -l 'recursive' -d 'Recursively resolves up to the root package'
complete -c composer -l 'tree' -d 'Prints the results as a nested tree'
complete -c composer -l 'no-scripts' -d 'Skips the execution of all scripts defined in composer.json file'
complete -c composer -l 'optimize' -d 'Optimizes PSR0 and PSR4 packages to be loaded with classmaps too, good for production'
complete -c composer -l 'classmap-authoritative' -d 'Autoload classes from the classmap only. Implicitly enables `--optimize`'
complete -c composer -l 'apcu' -d 'Use APCu to cache found/not-found classes'
complete -c composer -l 'no-dev' -d 'Disables autoload-dev rules'
complete -c composer -l 'list'
complete -c composer -l 'xml' -d 'To output help as XML'
complete -c composer -l 'format' -d 'The output format (txt, xml, json, or md)'
complete -c composer -l 'raw' -d 'To output raw command help'
complete -c composer -l 'name' -d 'Name of the package'
complete -c composer -l 'description' -d 'Description of package'
complete -c composer -l 'author' -d 'Author name of package'
complete -c composer -l 'type' -d 'Type of package (e.g. library, project, metapackage, composer-plugin)'
complete -c composer -l 'homepage' -d 'Homepage of package'
complete -c composer -l 'require' -d 'Package to require with a version constraint, e.g. foo/bar:1.0.0 or foo/bar=1.0.0 or "foo/bar 1.0.0"'
complete -c composer -l 'require-dev' -d 'Package to require for development with a version constraint, e.g. foo/bar:1.0.0 or foo/bar=1.0.0 or "foo/bar 1.0.0"'
complete -c composer -l 'stability' -d 'Minimum stability (empty or one of: stable, RC, beta, alpha, dev)'
complete -c composer -l 'license' -d 'License of package'
complete -c composer -l 'repository' -d 'Add custom repositories, either by URL or using JSON arrays'
complete -c composer -l 'prefer-source' -d 'Forces installation from package sources when possible, including VCS information'
complete -c composer -l 'prefer-dist' -d 'Forces installation from package dist even for dev versions'
complete -c composer -l 'dry-run' -d 'Outputs the operations but will not execute anything (implicitly enables --verbose)'
complete -c composer -l 'dev' -d 'Enables installation of require-dev packages (enabled by default, only present for BC)'
complete -c composer -l 'no-dev' -d 'Disables installation of require-dev packages'
complete -c composer -l 'no-custom-installers' -d 'DEPRECATED: Use no-plugins instead'
complete -c composer -l 'no-autoloader' -d 'Skips autoloader generation'
complete -c composer -l 'no-scripts' -d 'Skips the execution of all scripts defined in composer.json file'
complete -c composer -l 'no-progress' -d 'Do not output download progress'
complete -c composer -l 'no-suggest' -d 'Do not show package suggestions'
complete -c composer -l 'optimize-autoloader' -d 'Optimize autoloader during autoloader dump'
complete -c composer -l 'classmap-authoritative' -d 'Autoload classes from the classmap only. Implicitly enables `--optimize-autoloader`'
complete -c composer -l 'apcu-autoloader' -d 'Use APCu to cache found/not-found classes'
complete -c composer -l 'ignore-platform-reqs' -d 'Ignore platform requirements (php & ext- packages)'
complete -c composer -l 'format' -d 'Format of the output: text or json'
complete -c composer -l 'no-dev' -d 'Disables search in require-dev packages'
complete -c composer -l 'xml' -d 'To output list as XML'
complete -c composer -l 'raw' -d 'To output raw command list'
complete -c composer -l 'format' -d 'The output format (txt, xml, json, or md)'
complete -c composer -l 'outdated' -d 'Show only packages that are outdated'
complete -c composer -l 'all' -d 'Show all installed packages with their latest versions'
complete -c composer -l 'direct' -d 'Shows only packages that are directly required by the root package'
complete -c composer -l 'strict' -d 'Return a non-zero exit code when there are outdated packages'
complete -c composer -l 'minor-only' -d 'Show only packages that have minor SemVer-compatible updates. Use with the --outdated option'
complete -c composer -l 'format' -d 'Format of the output: text or json'
complete -c composer -l 'recursive' -d 'Recursively resolves up to the root package'
complete -c composer -l 'tree' -d 'Prints the results as a nested tree'
complete -c composer -l 'dev' -d 'Removes a package from the require-dev section'
complete -c composer -l 'no-progress' -d 'Do not output download progress'
complete -c composer -l 'no-update' -d 'Disables the automatic update of the dependencies'
complete -c composer -l 'no-scripts' -d 'Skips the execution of all scripts defined in composer.json file'
complete -c composer -l 'update-no-dev' -d 'Run the dependency update with the --no-dev option'
complete -c composer -l 'update-with-dependencies' -d 'Allow inherited dependencies to be updated with explicit dependencies (default)'
complete -c composer -l 'no-update-with-dependencies' -d 'Disallow inherited dependencies to be updated with explicit dependencies'
complete -c composer -l 'ignore-platform-reqs' -d 'Ignore platform requirements (php & ext- packages)'
complete -c composer -l 'optimize-autoloader' -d 'Optimize autoloader during autoloader dump'
complete -c composer -l 'classmap-authoritative' -d 'Autoload classes from the classmap only. Implicitly enables `--optimize-autoloader`'
complete -c composer -l 'apcu-autoloader' -d 'Use APCu to cache found/not-found classes'
complete -c composer -l 'dev' -d 'Add requirement to require-dev'
complete -c composer -l 'prefer-source' -d 'Forces installation from package sources when possible, including VCS information'
complete -c composer -l 'prefer-dist' -d 'Forces installation from package dist even for dev versions'
complete -c composer -l 'no-progress' -d 'Do not output download progress'
complete -c composer -l 'no-suggest' -d 'Do not show package suggestions'
complete -c composer -l 'no-update' -d 'Disables the automatic update of the dependencies'
complete -c composer -l 'no-scripts' -d 'Skips the execution of all scripts defined in composer.json file'
complete -c composer -l 'update-no-dev' -d 'Run the dependency update with the --no-dev option'
complete -c composer -l 'update-with-dependencies' -d 'Allows inherited dependencies to be updated, except those that are root requirements'
complete -c composer -l 'update-with-all-dependencies' -d 'Allows all inherited dependencies to be updated, including those that are root requirements'
complete -c composer -l 'ignore-platform-reqs' -d 'Ignore platform requirements (php & ext- packages)'
complete -c composer -l 'prefer-stable' -d 'Prefer stable versions of dependencies'
complete -c composer -l 'prefer-lowest' -d 'Prefer lowest versions of dependencies'
complete -c composer -l 'sort-packages' -d 'Sorts packages when adding/updating a new dependency'
complete -c composer -l 'optimize-autoloader' -d 'Optimize autoloader during autoloader dump'
complete -c composer -l 'classmap-authoritative' -d 'Autoload classes from the classmap only. Implicitly enables `--optimize-autoloader`'
complete -c composer -l 'apcu-autoloader' -d 'Use APCu to cache found/not-found classes'
complete -c composer -l 'only-name' -d 'Search only in name'
complete -c composer -l 'type' -d 'Search for a specific package type'
complete -c composer -l 'rollback' -d 'Revert to an older installation of composer'
complete -c composer -l 'clean-backups' -d 'Delete old backups during an update, leave only current version of composer'
complete -c composer -l 'no-progress' -d 'Do not output download progress'
complete -c composer -l 'update-keys' -d 'Prompt user for a key update'
complete -c composer -l 'stable' -d 'Force an update to the stable channel'
complete -c composer -l 'preview' -d 'Force an update to the preview channel'
complete -c composer -l 'snapshot' -d 'Force an update to the snapshot channel'
complete -c composer -l 'set-channel-only' -d 'Only store the channel as the default one and then exit'
complete -c composer -l 'all' -d 'List all packages'
complete -c composer -l 'installed' -d 'List installed packages only (enabled by default, only present for BC)'
complete -c composer -l 'platform' -d 'List platform packages only'
complete -c composer -l 'available' -d 'List available packages only'
complete -c composer -l 'self' -d 'Show the root package information'
complete -c composer -l 'name-only' -d 'List package names only'
complete -c composer -l 'path' -d 'Show package paths'
complete -c composer -l 'tree' -d 'List the dependencies as a tree'
complete -c composer -l 'latest' -d 'Show the latest version'
complete -c composer -l 'outdated' -d 'Show the latest version but only for packages that are outdated'
complete -c composer -l 'minor-only' -d 'Show only packages that have minor SemVer-compatible updates. Use with the --outdated option'
complete -c composer -l 'direct' -d 'Shows only packages that are directly required by the root package'
complete -c composer -l 'strict' -d 'Return a non-zero exit code when there are outdated packages'
complete -c composer -l 'format' -d 'Format of the output: text or json'
complete -c composer -l 'by-package' -d 'Groups output by suggesting package'
complete -c composer -l 'by-suggestion' -d 'Groups output by suggested package'
complete -c composer -l 'no-dev' -d 'Exclude suggestions from require-dev packages'
complete -c composer -l 'prefer-source' -d 'Forces installation from package sources when possible, including VCS information'
complete -c composer -l 'prefer-dist' -d 'Forces installation from package dist even for dev versions'
complete -c composer -l 'dry-run' -d 'Outputs the operations but will not execute anything (implicitly enables --verbose)'
complete -c composer -l 'dev' -d 'Enables installation of require-dev packages (enabled by default, only present for BC)'
complete -c composer -l 'no-dev' -d 'Disables installation of require-dev packages'
complete -c composer -l 'lock' -d 'Only updates the lock file hash to suppress warning about the lock file being out of date'
complete -c composer -l 'no-custom-installers' -d 'DEPRECATED: Use no-plugins instead'
complete -c composer -l 'no-autoloader' -d 'Skips autoloader generation'
complete -c composer -l 'no-scripts' -d 'Skips the execution of all scripts defined in composer.json file'
complete -c composer -l 'no-progress' -d 'Do not output download progress'
complete -c composer -l 'no-suggest' -d 'Do not show package suggestions'
complete -c composer -l 'with-dependencies' -d 'Add deps of whitelisted packages to whitelist, except those defined in root package'
complete -c composer -l 'with-all-dependencies' -d 'Add deps of whitelisted packages to whitelist, including those defined in root package'
complete -c composer -s 'v' -l 'verbose' -d 'Shows more details including new commits pulled in when updating packages'
complete -c composer -s 'o' -l 'optimize-autoloader' -d 'Optimize autoloader during autoloader dump'
complete -c composer -s 'a' -l 'classmap-authoritative' -d 'Autoload classes from the classmap only. Implicitly enables `--optimize-autoloader`'
complete -c composer -l 'apcu-autoloader' -d 'Use APCu to cache found/not-found classes'
complete -c composer -l 'ignore-platform-reqs' -d 'Ignore platform requirements (php & ext- packages)'
complete -c composer -l 'prefer-stable' -d 'Prefer stable versions of dependencies'
complete -c composer -l 'prefer-lowest' -d 'Prefer lowest versions of dependencies'
complete -c composer -s 'i' -l 'interactive' -d 'Interactive interface with autocompletion to select the packages to update'
complete -c composer -l 'root-reqs' -d 'Restricts the update to your first degree dependencies'
complete -c composer -l 'no-check-all' -d 'Do not validate requires for overly strict/loose constraints'
complete -c composer -l 'no-check-lock' -d 'Do not check if lock file is up to date'
complete -c composer -l 'no-check-publish' -d 'Do not check for publish errors'
complete -c composer -l 'with-dependencies' -d 'Also validate the composer.json of all installed dependencies'
complete -c composer -l 'strict' -d 'Return a non-zero exit code for warnings as well as errors'
complete -c composer -s 'q' -l 'quiet' -d 'Do not output any message'
complete -c composer -s 'v' -l 'verbose' -d 'Verbose mode (pass multiple times for even verboser mode)'
complete -c composer -l 'ansi' -d 'Force ANSI output'
complete -c composer -l 'no-ansi' -d 'Disable ANSI output'
complete -c composer -s 'n' -l 'no-interaction' -d 'Do not ask any interactive question'
complete -c composer -l 'profile' -d 'Display timing and memory usage information'
complete -c composer -l 'no-plugins' -d 'Whether to disable plugins'
complete -c composer -s 'd' -l 'working-dir' -d 'If specified, use the given directory as working directory'
complete -c composer -l 'no-cache' -d 'Prevent use of the cache'
