complete -c zig -s 'h' -l 'help' -d 'Print command-specific usage'
complete -c zig -d 'Build project from build.zig'
complete -c zig -d 'Copy a package into global cache and print its hash'
complete -c zig -d 'Initialize a Zig package in the current directory'
complete -c zig -d 'Create executable from source or object files'
complete -c zig -d 'Create library from source or object files'
complete -c zig -d 'Create object from source or object files'
complete -c zig -d 'Perform unit testing'
complete -c zig -d 'Create executable and run immediately'
complete -c zig -d 'Look for simple compile errors in any set of files'
complete -c zig -d 'Reformat Zig source into canonical form'
complete -c zig -d 'Minimize a bug report'
complete -c zig -d 'Convert C code to Zig code'
complete -c zig -d 'Use Zig as a drop-in archiver'
complete -c zig -d 'Use Zig as a drop-in C compiler'
complete -c zig -d 'Use Zig as a drop-in C++ compiler'
complete -c zig -d 'Use Zig as a drop-in dlltool.exe'
complete -c zig -d 'Use Zig as a drop-in lib.exe'
complete -c zig -d 'Use Zig as a drop-in ranlib'
complete -c zig -d 'Use Zig as a drop-in objcopy'
complete -c zig -d 'Use Zig as a drop-in rc.exe'
complete -c zig -d 'Print lib path, std path, cache directory, and version'
complete -c zig -d 'Print help for `zig`'
complete -c zig -d 'View standard library documentation in a browser'
complete -c zig -d 'Display native libc paths file or validate one'
complete -c zig -d 'List available compilation targets'
complete -c zig -d 'Print version number'
complete -c zig -d 'Print Zen of Zig'
complete -c zig -s 'p' -l 'prefix' -d 'Where to install files (default: zig-out)'
complete -c zig -l 'prefix-lib-dir' -d 'Where to install libraries'
complete -c zig -l 'prefix-exe-dir' -d 'Where to install executables'
complete -c zig -l 'prefix-include-dir' -d 'Where to install C header files'
complete -c zig -l 'release' -d 'Request release mode'
complete -c zig -d 'Integrate with system-installed Darling'
complete -c zig -d 'Don'"'"'t integrate with system-installed Darling (default)'
complete -c zig -d 'Integrate with system-installed QEMU'
complete -c zig -d 'Don'"'"'t integrate with system-installed QEMU (default)'
complete -c zig -l 'glibc-runtimes' -d 'Enhances QEMU integration'
complete -c zig -d 'Rely on Rosetta'
complete -c zig -d 'Don'"'"'t rely on Rosetta (default)'
complete -c zig -d 'Integrate with system-installed Wasmtime'
complete -c zig -d 'Don'"'"'t integrate with system-installed Wasmtime (default)'
complete -c zig -d 'Integrate with system-installed Wine'
complete -c zig -d 'Don'"'"'t integrate with system-installed Wine (default)'
complete -c zig -s 'l' -l 'list-steps' -d 'Print available steps'
complete -c zig -l 'verbose' -d 'Print commands before executing them'
complete -c zig -l 'color' -d 'Enable/Disable colored error messages'
complete -c zig -l 'prominent-compile-errors' -d 'Output human-readable compile errors'
complete -c zig -s 'j' -d 'Limit concurrent jobs (default is to use all CPU cores)'
complete -c zig -l 'maxrss' -d 'Limit memory usage (default is to use available memory)'
complete -c zig -l 'skip-oom-steps' -d 'skip steps that would exceed --maxrss'
complete -c zig -l 'fetch' -d 'Exit after fetching dependency tree'
complete -c zig -d 'Specify the compilation target'
complete -c zig -d 'Specify CPU features to add/subtract'
complete -c zig -d 'Path to interpreter on the target system'
complete -c zig -d 'Optimizations on and safety on'
complete -c zig -l 'search-prefix' -d 'Add a path to look for binaries, libraries, headers'
complete -c zig -l 'sysroot' -d 'Set the system root directory (usually /)'
complete -c zig -l 'libc' -d 'Provide a file which specifies libc paths'
complete -c zig -l 'system' -d 'Disable package fetching; enable all integrations'
complete -c zig -d 'lines of reference trace shown per compile error'
complete -c zig -d 'Disable reference trace'
complete -c zig -l 'build-file' -d 'Override path to `build.zig`'
complete -c zig -l 'cache-dir' -d 'Override path to zig cache directory'
complete -c zig -l 'global-cache-dir' -d 'Override path to global Zig cache directory'
complete -c zig -l 'zig-lib-dir' -d 'Override path to Zig lib directory'
complete -c zig -l 'build-runner' -d 'Override path to build runner'
complete -c zig -l 'seed' -d 'For shuffling dependency traversal order (default: random)'
complete -c zig -l 'debug-log' -d 'Enable debugging the compiler'
complete -c zig -l 'debug-pkg-config' -d 'Fail if unknown pkg-config flags encountered'
complete -c zig -l 'verbose-link' -d 'Enable compiler debug output for linking'
complete -c zig -l 'verbose-air' -d 'Enable compiler debug output for Zig AIR'
complete -c zig -l 'verbose-llvm-ir' -d 'Enable compiler debug output for LLVM IR'
complete -c zig -l 'verbose-llvm-bc' -d 'Enable compiler debug output for LLVM BC'
complete -c zig -l 'verbose-cimport' -d 'Enable compiler debug output for C imports'
complete -c zig -l 'verbose-cc' -d 'Enable compiler debug output for C compilation'
complete -c zig -l 'verbose-llvm-cpu-features' -d 'Enable compiler debug output for LLVM CPU features'
complete -c zig -l 'color' -d 'Enable/Disable colored error messages'
complete -c zig -s 't' -d 'Output ZIR in text form to stdout'
complete -c zig -l 'watch' -d 'Enable compiler REPL'
complete -c zig -l 'color' -d 'Enable/Disable colored error messages'
complete -c zig -d 'Output machine code (default)'
complete -c zig -d 'Don'"'"'t output machine code'
complete -c zig -d 'Output assembly code'
complete -c zig -d 'Don'"'"'t output assembly code (default)'
complete -c zig -d 'Produce a file containing LLVM IR'
complete -c zig -d 'Don'"'"'t produce a file containing LLVM IR (default)'
complete -c zig -d 'Produce a file containing LLVM bitcode'
complete -c zig -d 'Don'"'"'t produce a file containing LLVM bitcode (default)'
complete -c zig -d 'Generate a C header file'
complete -c zig -d 'Don'"'"'t generate a C header file (default)'
complete -c zig -d 'Create the documentation'
complete -c zig -d 'Don'"'"'t produce the documentation (default)'
complete -c zig -d 'Write analysis JSON file'
complete -c zig -d 'Don'"'"'t write analysis JSON file (default)'
complete -c zig -d 'Produce an import library file (default)'
complete -c zig -d 'Don'"'"'t produce an import library file'
complete -c zig -l 'show-builtin' -d 'Output the source of `@import("builtin")`'
complete -c zig -l 'cache-dir' -d 'Override the local cache directory'
complete -c zig -l 'global-cache-dir' -d 'Override the global cache directory'
complete -c zig -l 'zig-lib-dir' -d 'Override path to Zig installation lib directory'
complete -c zig -l 'enable-cache' -d 'Output to cache directory'
complete -c zig -d 'Specify the compilation target'
complete -c zig -d 'Specify target CPU and feature set'
complete -c zig -d 'Limit range of code and data virtual addresses'
complete -c zig -d 'Force-enable the "red-zone"'
complete -c zig -d 'Force-disable the "red-zone"'
complete -c zig -d 'Omit the stack frame pointer'
complete -c zig -d 'Store the stack frame pointer'
complete -c zig -d 'Execution model (WASI)'
complete -c zig -l 'name' -d 'Override root name'
complete -c zig -l 'pkg-begin' -d 'Make pkg available to import and push current pkg'
complete -c zig -l 'pkg-end' -d 'Pop current pkg'
complete -c zig -l 'main-pkg-path' -d 'Set the directory of the root package'
complete -c zig -d 'Force-enable Position Independent Code'
complete -c zig -d 'Force-disable Position Independent Code'
complete -c zig -d 'Force-enable Position Independent Executable'
complete -c zig -d 'Force-disable Position Independent Executable'
complete -c zig -d 'Force-enable Link Time Optimization'
complete -c zig -d 'Force-disable Link Time Optimization'
complete -c zig -d 'Enable stack probing in unsafe builds'
complete -c zig -d 'Disable stack probing in safe builds'
complete -c zig -d 'Enable C undefined behavior detection in unsafe builds'
complete -c zig -d 'Disable C undefined behavior detection in safe builds'
complete -c zig -d 'Include valgrind client requests in release builds'
complete -c zig -d 'Omit valgrind client requests in debug builds'
complete -c zig -d 'Enable Thread Sanitizer'
complete -c zig -d 'Disable Thread Sanitizer'
complete -c zig -d 'Mark exported functions as DLL exports (Windows)'
complete -c zig -d 'Force-disable marking exported functions as DLL exports'
complete -c zig -d 'Always produce unwind table entries for all functions'
complete -c zig -d 'Never produce unwind table entries'
complete -c zig -d 'Force using LLVM'
complete -c zig -d 'Prevent using LLVM'
complete -c zig -d 'Force using Clang'
complete -c zig -d 'Prevent using Clang'
complete -c zig -d 'Force using bootstrap compiler'
complete -c zig -d 'Prevent using bootstrap compiler'
complete -c zig -d 'Code assumes there is only one thread'
complete -c zig -d 'Code may not assume there is only one thread'
complete -c zig -l 'strip' -d 'Omit debug symbols'
complete -c zig -d 'Add directory to AFTER include search path'
complete -c zig -d 'Add directory to SYSTEM include search path'
complete -c zig -s 'I' -d 'Add directory to include search path'
complete -c zig -s 'D' -d 'Define the C macro'
complete -c zig -l 'libc' -d 'Provide a file which specifies libc paths'
complete -c zig -d 'Set extra flags for the next positional C source files'
complete -c zig -d 'Places each function in a separate section'
complete -c zig -s 'l' -l 'library' -d 'Link against system library (only if actually used)'
complete -c zig -l 'needed-library' -d 'Link against system library (even if unused)'
complete -c zig -s 'L' -l 'library-directory' -d 'Add a directory to the library search path'
complete -c zig -s 'T' -l 'script' -d 'Use a custom linker script'
complete -c zig -l 'version-script' -d 'Provide a version .map file'
complete -c zig -l 'dynamic-linker' -d 'Set the dynamic interpreter path'
complete -c zig -l 'sysroot' -d 'Set the system root directory'
complete -c zig -l 'version' -d 'Dynamic library semver'
complete -c zig -l 'entry' -d 'Set the entrypoint symbol name'
complete -c zig -d 'Override the default SONAME value'
complete -c zig -d 'Disable emitting a SONAME'
complete -c zig -d 'Force using LLD'
complete -c zig -d 'Prevent using LLD'
complete -c zig -d 'Always include compiler-rt symbols'
complete -c zig -d 'Prevent including compiler-rt symbols'
complete -c zig -d 'Add all symbols to the dynamic symbol table'
complete -c zig -d 'Add directory to the runtime library search path'
complete -c zig -d 'Ensure adding rpath for each used dynamic library'
complete -c zig -d 'Prevent adding rpath for each used dynamic library'
complete -c zig -d 'Allows undefined symbols in shared libraries'
complete -c zig -d 'Disallows undefined symbols in shared libraries'
complete -c zig -l 'eh-frame-hdr' -d 'Enable C++ exception handling by passing `--eh-frame-hdr` to linker'
complete -c zig -l 'emit-relocs' -d 'Enable output of relocation sections for post build tools'
complete -c zig -d 'Force output to be dynamically linked'
complete -c zig -d 'Force output to be statically linked'
complete -c zig -d 'Bind global references locally'
complete -c zig -l 'stack' -d 'Override default stack size'
complete -c zig -l 'image-base' -d 'Set base address for executable image'
complete -c zig -d 'Link against framework (Darwin)'
complete -c zig -s 'F' -d 'Add search path for frameworks (Darwin)'
complete -c zig -d 'Add dylib'"'"'s install name (Darwin)'
complete -c zig -l 'import-memory' -d 'Import memory from the environment (Wasm)'
complete -c zig -l 'initial-memory' -d 'Initial size of the linear memory (Wasm)'
complete -c zig -l 'max-memory' -d 'Maximum size of the linear memory (Wasm)'
complete -c zig -l 'global-base' -d 'Where to start to place global data (Wasm)'
complete -c zig -l 'export' -d 'Force a symbol to be exported (Wasm)'
complete -c zig -l 'test-filter' -d 'Skip tests that do not match filter'
complete -c zig -l 'test-name-prefix' -d 'Add prefix to all tests'
complete -c zig -l 'test-cmd' -d 'Specify test execution command'
complete -c zig -l 'test-cmd-bin' -d 'Appends test binary path to `--test-cmd`'
complete -c zig -l 'test-evented-io' -d 'Runs the test in evented I/O mode'
complete -c zig -l 'test-no-exec' -d 'Compiles test binary without running it'
complete -c zig -d 'Print timing diagnostics'
complete -c zig -d 'Print stack size diagnostics'
complete -c zig -l 'verbose-link' -d 'Display linker invocations'
complete -c zig -l 'verbose-cc' -d 'Display C compiler invocations'
complete -c zig -l 'verbose-air' -d 'Enable compiler debug output for Zig AIR'
complete -c zig -l 'verbose-mir' -d 'Enable compiler debug output for Zig MIR'
complete -c zig -l 'verbose-llvm-ir' -d 'Enable compiler debug output for LLVM IR'
complete -c zig -l 'verbose-cimport' -d 'Enable compiler debug output for C imports'
complete -c zig -l 'verbose-llvm-cpu-features' -d 'Enable compiler debug output for LLVM CPU features'
complete -c zig -l 'debug-log' -d 'Enable printing debug/info log messages for scope'
complete -c zig -l 'debug-compile-errors' -d 'Crash with helpful diagnostics at the first compile error'
complete -c zig -l 'debug-link-snapshot' -d 'Enable dumping of the linker'"'"'s state in JSON'
complete -c zig -l 'color' -d 'Enable/Disable colored error messages'
complete -c zig -l 'stdin' -d 'Use stdin and stdout for I/O'
complete -c zig -l 'check' -d 'Check if the input is formatted'
complete -c zig -l 'ast-check' -d 'Run `zig ast-check` on every file'
complete -c zig -d 'Specify the compilation target'
