complete -c tofu -d 'Print version information'
complete -c tofu -d 'Show help'
complete -c tofu -d 'Build or change infrastructure'
complete -c tofu -d 'Destroy infrastructure'
complete -c tofu -d 'Skip interactive approval'
complete -c tofu -d 'Path to backup the existing state file'
complete -c tofu -d 'Show only error summaries'
complete -c tofu -d 'Don'"'"'t hold a state lock'
complete -c tofu -d 'Duration to retry a state lock'
complete -c tofu -d 'Ask for input for variables if not directly set'
complete -c tofu -d 'If specified, output won'"'"'t contain any color'
complete -c tofu -d 'Limit the number of concurrent operations'
complete -c tofu -d 'Path to a Terraform state file'
complete -c tofu -d 'Path to write state'
complete -c tofu -d 'Interactive console for Terraform interpolations'
complete -c tofu -d 'Path to a Terraform state file'
complete -c tofu -d 'Set a variable in the Terraform configuration'
complete -c tofu -d 'Set variables from a file'
complete -c tofu -d 'Rewrite config files to canonical format'
complete -c tofu -d 'Don'"'"'t list files whose formatting differs'
complete -c tofu -d 'Don'"'"'t write to source files'
complete -c tofu -d 'Display diffs of formatting changes'
complete -c tofu -d 'Check if the input is formatted'
complete -c tofu -d 'If specified, output won'"'"'t contain any color'
complete -c tofu -d 'Also process files in subdirectories'
complete -c tofu -d 'Download and install modules for the configuration'
complete -c tofu -d 'Check modules for updates'
complete -c tofu -d 'If specified, output won'"'"'t contain any color'
complete -c tofu -d 'Create a visual graph of Terraform resources'
complete -c tofu -d 'Use specified plan file instead of current directory'
complete -c tofu -d 'Highlight any cycles in the graph'
complete -c tofu -d 'Output plan graph'
complete -c tofu -d 'Output plan graph assuming refresh only'
complete -c tofu -d 'Output plan graph assuming destroy'
complete -c tofu -d 'Output apply graph'
complete -c tofu -d 'Import existing infrastructure into Terraform'
complete -c tofu -d 'Path to backup the existing state file'
complete -c tofu -d 'Path to a directory of configuration files'
complete -c tofu -d 'Allow import without resource block'
complete -c tofu -d 'Disable interactive input prompts'
complete -c tofu -d 'Don'"'"'t hold a state lock'
complete -c tofu -d 'Duration to retry a state lock'
complete -c tofu -d 'If specified, output won'"'"'t contain any color'
complete -c tofu -d 'Path to a Terraform state file'
complete -c tofu -d 'Path to write state'
complete -c tofu -d 'Set a variable in the Terraform configuration'
complete -c tofu -d 'Set variables from a file'
complete -c tofu -d 'Initialize a new or existing Terraform configuration'
complete -c tofu -d 'Disable backend initialization'
complete -c tofu -d 'Disable backend initialization'
complete -c tofu -d 'Backend configuration'
complete -c tofu -d 'Suppress prompts about copying state data'
complete -c tofu -d 'Copy the module into target directory before init'
complete -c tofu -d 'Disable downloading modules for this configuration'
complete -c tofu -d 'Disable interactive prompts'
complete -c tofu -d 'Don'"'"'t hold state lock'
complete -c tofu -d 'Duration to retry a state lock'
complete -c tofu -d 'If specified, output won'"'"'t contain any color'
complete -c tofu -d 'Directory containing plugin binaries'
complete -c tofu -d 'Ignore any saved configuration'
complete -c tofu -d 'Reconfigure backend, migrating existing state'
complete -c tofu -d 'Install latest dependencies, ignoring lockfile'
complete -c tofu -d 'Set dependency lockfile mode to readonly'
complete -c tofu -d 'Ignore local and remote backend compatibility check'
complete -c tofu -d 'Retrieves auth token for the given hostname'
complete -c tofu -d 'Removes auth token for the given hostname'
complete -c tofu -d 'Read an output from a state file'
complete -c tofu -d 'Path to the state file to read'
complete -c tofu -d 'If specified, output won'"'"'t contain any color'
complete -c tofu -d 'Print output in JSON format'
complete -c tofu -d 'Print raw strings directly'
complete -c tofu -d 'Generate and show an execution plan'
complete -c tofu -d 'Show only error summaries'
complete -c tofu -d 'Return detailed exit codes'
complete -c tofu -d 'Ask for input for variables if not directly set'
complete -c tofu -d 'Don'"'"'t hold a state lock during the operation'
complete -c tofu -d 'Duration to retry a state lock'
complete -c tofu -d 'If specified, output won'"'"'t contain any color'
complete -c tofu -d 'Write a plan file to the given path'
complete -c tofu -d 'Limit the number of concurrent operations'
complete -c tofu -d 'Path to a Terraform state file'
complete -c tofu -d 'Select "destroy" planning mode'
complete -c tofu -d 'Select "refresh only" planning mode'
complete -c tofu -d 'Skip checking for external changes'
complete -c tofu -d 'Force replacement of resource using its address'
complete -c tofu -d 'Resource to target'
complete -c tofu -d 'Set a variable in the Terraform configuration'
complete -c tofu -d 'Set variables from a file'
complete -c tofu -d 'Print tree of modules with their provider requirements'
complete -c tofu -d 'Update local state file against real resources'
complete -c tofu -d 'Show only error summaries'
complete -c tofu -d 'Path to backup the existing state file'
complete -c tofu -d 'Ask for input for variables if not directly set'
complete -c tofu -d 'Don'"'"'t hold a state lock'
complete -c tofu -d 'Duration to retry a state lock'
complete -c tofu -d 'If specified, output won'"'"'t contain any color'
complete -c tofu -d 'Path to a Terraform state file'
complete -c tofu -d 'Path to write state'
complete -c tofu -d 'Resource to target'
complete -c tofu -d 'Set a variable in the Terraform configuration'
complete -c tofu -d 'Set variables from a file'
complete -c tofu -d 'Inspect Terraform state or plan'
complete -c tofu -d 'If specified, output won'"'"'t contain any color'
complete -c tofu -d 'Produce output in JSON format'
complete -c tofu -d 'Advanced state management'
complete -c tofu -d 'List resources in state'
complete -c tofu -d 'Move an item in the state'
complete -c tofu -d 'Pull current state and output to stdout'
complete -c tofu -d 'Update remote state from local state'
complete -c tofu -d 'Replace provider in the state'
complete -c tofu -d 'Remove instance from the state'
complete -c tofu -d 'Show a resource in the state'
complete -c tofu -d 'Manually mark a resource for recreation'
complete -c tofu -d 'Succeed even if resource is missing'
complete -c tofu -d 'Path to backup the existing state file'
complete -c tofu -d 'Don'"'"'t hold a state lock'
complete -c tofu -d 'Duration to retry a state lock'
complete -c tofu -d 'Ignore local and remote backend compatibility check'
complete -c tofu -d 'Path to a Terraform state file'
complete -c tofu -d 'Path to write state'
complete -c tofu -d 'Runs automated test of shared modules'
complete -c tofu -d 'Show only error summaries'
complete -c tofu -d 'Also write test results to provided JUnit XML file'
complete -c tofu -d 'If specified, output won'"'"'t contain any color'
complete -c tofu -d 'Manually unmark a resource as tainted'
complete -c tofu -d 'Succeed even if resource is missing'
complete -c tofu -d 'Path to backup the existing state file'
complete -c tofu -d 'Don'"'"'t hold a state lock'
complete -c tofu -d 'Duration to retry a state lock'
complete -c tofu -d 'Ignore local and remote backend compatibility check'
complete -c tofu -d 'Path to a Terraform state file'
complete -c tofu -d 'Path to write state'
complete -c tofu -d 'Validate the Terraform files'
complete -c tofu -d 'Produce output in JSON format'
complete -c tofu -d 'If specified, output won'"'"'t contain any color'
complete -c tofu -d 'Print the Terraform version'
complete -c tofu -d 'Workspace management'
complete -c tofu -d 'List workspaces'
complete -c tofu -d 'Select an workspace'
complete -c tofu -d 'Create a new workspace'
complete -c tofu -d 'Delete an existing workspace'
