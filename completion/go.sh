complete -c go -s 'a' -d 'force rebuild'
complete -c go -s 'n' -d 'print the commands but do not run them'
complete -c go -s 'p' -d 'number parallel builds (default=#cpus)'
complete -c go -d 'enable data race detection'
complete -c go -d 'enable interoperation with memory sanitizer'
complete -c go -s 'v' -d 'print packages being built'
complete -c go -d 'print and preserve work directory'
complete -c go -s 'x' -d 'print the commands'
complete -c go -d 'arguments to pass on each go tool asm invocation'
complete -c go -d 'build mode to use'
complete -c go -d 'name of compiler to use, as in runtime'
complete -c go -d 'gccgo compiler/linker flags'
complete -c go -d 'go compiler flags'
complete -c go -d 'suffix for installation directory'
complete -c go -d 'linker flags'
complete -c go -d 'link against shared libraries previously created with -buildmode=shared'
complete -c go -d 'module download mode to use'
complete -c go -d 'leave newly-created directories in the module cache writable'
complete -c go -d 'read (and possibly write) an alternate go.mod'
complete -c go -d 'install and load all packages from dir instead of the usual locations'
complete -c go -d 'build tags'
complete -c go -d 'remove all file system paths from the resulting executable'
complete -c go -d 'a program to use to invoke toolchain programs'
complete -c go -d 'module download mode to use'
complete -c go -d 'compile packages and dependencies'
complete -c go -d 'remove object files'
complete -c go -s 'i' -d 'remove the corresponding installed archive or binary'
complete -c go -s 'n' -d 'print the command that would be executed without running'
complete -c go -s 'r' -d 'recursively clean all the dependencies of package named by the import paths'
complete -c go -s 'x' -d 'clean to print remove commands as it executes them'
complete -c go -d 'remove the entire go build cache'
complete -c go -d 'expire all test results in the go build cache'
complete -c go -d 'remove the entire module download cache'
complete -c go -d 'run godoc on package sources'
complete -c go -d 'show all the documentation for the package'
complete -c go -s 'c' -d 'respect case when matching symbols'
complete -c go -d 'treat a command (package main) like a regular package'
complete -c go -d 'one-line representation for each symbol'
complete -c go -d 'show the full source code for the symbol'
complete -c go -s 'u' -d 'show documentation for unexported as well as exported symbols'
complete -c go -d 'print Go environment information'
complete -c go -d 'print the environment in JSON format'
complete -c go -s 'u' -d 'set NAME to default values'
complete -c go -s 'w' -d 'set default values for config variables'
complete -c go -d 'run go tool fix on packages'
complete -c go -d 'run gofmt on package sources'
complete -c go -s 'n' -d 'prints commands that would be executed'
complete -c go -s 'x' -d 'prints commands as they are executed'
complete -c go -d 'download and install packages and dependencies'
complete -c go -s 'd' -d 'stop after downloading the packages; don'"'"'t install'
complete -c go -d 'run fix tool on packages before resolving dependencies or building'
complete -c go -s 'u' -d 'update remote packages'
complete -c go -s 'v' -d 'verbose progress and debug output'
complete -c go -s 't' -d 'also download the packages required to build the tests'
complete -c go -d 'flag permits fetching & resolving domains using insecure schemes'
complete -c go -d 'Generate runs commands described by directives within existing files.'
complete -c go -s 'n' -d 'prints commands that would be executed'
complete -c go -s 'x' -d 'prints commands as they are executed'
complete -c go -s 'v' -d 'prints the names of packages and files as they are processed'
complete -c go -d 'prints the names of packages and files as they are processed'
complete -c go -d 'get help on topic'
complete -c go -d 'start a bug report'
complete -c go -d 'compile packages and dependencies'
complete -c go -d 'remove object files and cached files'
complete -c go -d 'show documentation for package or symbol'
complete -c go -d 'print Go environment information'
complete -c go -d 'update packages to use new APIs'
complete -c go -d 'gofmt (reformat) package sources'
complete -c go -d 'generate Go files by processing source'
complete -c go -d 'download and install packages and dependencies'
complete -c go -d 'compile and install packages and dependencies'
complete -c go -d 'list packages or modules'
complete -c go -d 'module maintenance'
complete -c go -d 'compile and run Go program'
complete -c go -d 'test packages'
complete -c go -d 'run specified go tool'
complete -c go -d 'print Go version'
complete -c go -d 'report likely mistakes in packages'
complete -c go -d 'build modes'
complete -c go -d 'calling between Go and C'
complete -c go -d 'build and test caching'
complete -c go -d 'environment variables'
complete -c go -d 'file types'
complete -c go -d 'the go.mod file'
complete -c go -d 'GOPATH environment variable'
complete -c go -d 'legacy GOPATH go get'
complete -c go -d 'module proxy protocol'
complete -c go -d 'import path syntax'
complete -c go -d 'modules, module versions, and more'
complete -c go -d 'module-aware go get'
complete -c go -d 'module authentication using go.sum'
complete -c go -d 'module configuration for non-public modules'
complete -c go -d 'package lists and patterns'
complete -c go -d 'testing flags'
complete -c go -d 'testing functions'
complete -c go -d 'compile and install packages and dependencies'
complete -c go -d 'list packages'
complete -c go -s 'e' -d 'tolerate erroneous packages'
complete -c go -s 'f' -d 'pass in template for formatting'
complete -c go -d 'print in JSON format'
complete -c go -d 'list of build tags'
complete -c go -s 'm' -d 'list modules instead of packages'
complete -c go -d 'compile and run Go program'
complete -c go -d 'test packages'
complete -c go -s 'c' -d 'compile the test binary to pkg.test but do not run it'
complete -c go -s 'i' -d 'install dependent packages, but don'"'"'t run tests'
complete -c go -d 'run specified go tool'
complete -c go -d 'target tool'
complete -c go -s 'n' -d 'print the command that would be executed but not execute it'
complete -c go -d 'print Go version'
complete -c go -d 'vet packages'
complete -c go -s 'n' -d 'print the command that would be executed'
complete -c go -s 'x' -d 'prints commands as they are executed'
complete -c go -d 'module maintenance'
complete -c go -d 'download modules to local cache'
complete -c go -d 'edit go.mod from tools or scripts'
complete -c go -d 'print module requirement graph'
complete -c go -d 'initialize new module in current directory'
complete -c go -d 'add missing and remove unused modules'
complete -c go -d 'make vendored copy of dependencies'
complete -c go -d 'verify dependencies have expected content'
complete -c go -d 'explain why packages or modules are needed'
