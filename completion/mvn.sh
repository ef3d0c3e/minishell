complete -c mvn -l 'also-make' -d 'If project list is specified, also build projects required by the list'
complete -c mvn -l 'also-make-dependents' -d 'If project list is specified, also build projects that depend on projects on the list'
complete -c mvn -l 'batch-mode' -d 'Run in non-interactive (batch) mode'
complete -c mvn -l 'builder' -d 'The id of the build strategy to use'
complete -c mvn -l 'strict-checksums' -d 'Fail the build if checksums don'"'"'t match'
complete -c mvn -l 'lax-checksums' -d 'Warn if checksums don'"'"'t match'
complete -c mvn -l 'check-plugin-updates' -d 'Ineffective, only kept for backward compatibility'
complete -c mvn -l 'define' -d 'Define a system property'
complete -c mvn -l 'errors' -d 'Produce execution error messages'
complete -c mvn -l 'encrypt-master-password' -d 'Encrypt master security password'
complete -c mvn -l 'encrypt-password' -d 'Encrypt server password'
complete -c mvn -l 'file' -d 'Force the use of an alternate POM file (or directory with pom.xml)'
complete -c mvn -l 'fail-at-end' -d 'Only fail the build afterwards; allow all non-impacted builds to continue'
complete -c mvn -l 'fail-fast' -d 'Stop at first failure in reactorized builds'
complete -c mvn -l 'fail-never' -d 'NEVER fail the build, regardless of project result'
complete -c mvn -l 'global-settings' -d 'Alternate path for the global settings file'
complete -c mvn -l 'help' -d 'Display help information'
complete -c mvn -l 'log-file' -d 'Log file to where all build output will go'
complete -c mvn -l 'legacy-local-repository' -d 'Use Maven 2 Legacy Local Repository behaviour, ie no use of _remote.repositories'
complete -c mvn -l 'non-recursive' -d 'Do not recurse into sub-projects'
complete -c mvn -l 'no-plugin-registry' -d 'Ineffective, only kept for backward compatibility'
complete -c mvn -l 'no-plugin-updates' -d 'Ineffective, only kept for backward compatibility'
complete -c mvn -l 'no-snapshot-updates' -d 'Suppress SNAPSHOT updates'
complete -c mvn -l 'offline' -d 'Work offline'
complete -c mvn -l 'projects' -d 'Comma-delimited list of specified reactor projects to build instead of all projects'
complete -c mvn -l 'quiet' -d 'Quiet output - only show errors'
complete -c mvn -l 'resume-from' -d 'Resume reactor from specified project'
complete -c mvn -l 'settings' -d 'Alternate path for the user settings file'
complete -c mvn -l 'threads' -d 'Thread count, for instance 2.0C where C is core multiplied'
complete -c mvn -l 'toolchains' -d 'Alternate path for the user toolchains file'
complete -c mvn -l 'update-snapshots' -d 'Forces a check for missing releases and updated snapshots on remote repositories'
complete -c mvn -l 'update-plugins' -d 'Ineffective, only kept for backward compatibility'
complete -c mvn -l 'show-version' -d 'Display version information WITHOUT stopping build'
complete -c mvn -l 'version' -d 'Display version information'
complete -c mvn -l 'debug' -d 'Produce execution debug output'
complete -c mvn -l 'activate-profiles' -d 'Comma-delimited list of profiles to activate'
complete -c mvn -l 'projects' -d 'Projects to build'
complete -c mvn -d 'Skipping JUnit Tests'
complete -c mvn -d 'Build installer (if profile is available in project)'
complete -c mvn -d 'Use release profile (create javadoc and attach sources)'
complete -c mvn -d 'Run surefire tests with debugging on port 5005'
complete -c mvn -d 'Skip Javadoc generation'
complete -c mvn -d 'Clean the build'
complete -c mvn -d 'Display help information on maven-clean-plugin'
complete -c mvn -d 'Compiles application sources'
complete -c mvn -d 'Display help information on maven-compiler-plugin'
complete -c mvn -d 'Compiles application test sources'
complete -c mvn -d 'Display help information on maven-deploy-plugin'
complete -c mvn -d 'Installs the artifact in the remote repository'
complete -c mvn -d 'Deploys an artifact to remote repository'
complete -c mvn -d 'Display help information on maven-failsafe-plugin'
complete -c mvn -d 'Run integration tests using Surefire'
complete -c mvn -d 'Verify integration tests ran using Surefire'
complete -c mvn -d 'Installs the project'"'"'s main artifact, and any other artifacts attached by other plugins in the lifecycle, to the local repository'
complete -c mvn -d 'Display help information on maven-install-plugin'
complete -c mvn -d 'Installs a file in the local repository'
complete -c mvn -d 'Copy resources for the test source code to the test output directory'
complete -c mvn -d 'Copy resources of the configured plugin attribute resources'
complete -c mvn -d 'Display help information on maven-resources-plugin'
complete -c mvn -d 'Copy resources for the main source code to the main output directory'
complete -c mvn -d 'Adds the site descriptor (site.xml) to the list of files to be installed/deployed'
complete -c mvn -d 'Deploys the generated site'
complete -c mvn -d 'Displays the effective site descriptor'
complete -c mvn -d 'Display help information on maven-site-plugin'
complete -c mvn -d 'Bundle the site output into a JAR to deploy'
complete -c mvn -d 'Start the site up, rendering documents as requested for faster editing (with Jetty web server)'
complete -c mvn -d 'Generates the site for a single project'
complete -c mvn -d 'Deploys the generated site to a local staging or mock directory'
complete -c mvn -d 'Deploys the generated site to a staging or mock URL'
complete -c mvn -d 'Display help information on maven-surefire-plugin'
complete -c mvn -d 'Run tests using Surefire'
complete -c mvn -d 'Display help information on maven-verifier-plugin'
complete -c mvn -d 'Verify the existence of files and optionally check content against a regex'
complete -c mvn -d 'Builds J2EE Enterprise Archive (EAR) files'
complete -c mvn -d 'Generates the EAR deployment descriptor file(s)'
complete -c mvn -d 'Display help information on maven-ear-plugin'
complete -c mvn -d 'Build an EJB (and optional client) from the current project'
complete -c mvn -d 'Display help information on maven-ejb-plugin'
complete -c mvn -d 'Display help information on maven-jar-plugin'
complete -c mvn -d 'Build a JAR from the current project'
complete -c mvn -d 'Build a JAR of the test classes for the current project'
complete -c mvn -d 'Display help information on maven-rar-plugin'
complete -c mvn -d 'Builds J2EE Resource Adapter Archive (RAR) files'
complete -c mvn -d 'Display help information on maven-shade-plugin'
complete -c mvn -d 'Mojo that performs shading delegating to the Shader component'
complete -c mvn -d 'Aggregate sources for all modules in an aggregator project'
complete -c mvn -d 'This plugin bundles all the sources into a jar archive'
complete -c mvn -d 'Bundle all the test sources into a jar archive (goal)'
complete -c mvn -d 'Bundle all the test sources into a jar archive (plugin)'
complete -c mvn -d 'This plugin bundles all the test sources into a jar archive'
complete -c mvn -d 'Display help information on maven-source-plugin'
complete -c mvn -d 'This goal bundles all the sources into a jar archive'
complete -c mvn -d 'Generate a changelog report'
complete -c mvn -d 'Generate a file activity report'
complete -c mvn -d 'Generate a developer activity report'
complete -c mvn -d 'Display help information on maven-changelog-plugin'
complete -c mvn -d 'Goal which validate the changes.xml file'
complete -c mvn -d 'Check that changes.xml has the necessary data for a release announcement'
complete -c mvn -d 'Goal which downloads issues from GitHub and generates a report'
complete -c mvn -d 'Goal which generate an announcement from the announcement template'
complete -c mvn -d 'Goal which downloads issues from the Issue Tracking System and generates a report'
complete -c mvn -d 'Goal which creates a nicely formatted Changes Report in html format from a changes.xml file'
complete -c mvn -d 'Goal which sends an announcement through email'
complete -c mvn -d 'Goal which downloads issues from the Issue Tracking System and generates a report'
complete -c mvn -d 'Display help information on maven-changes-plugin'
complete -c mvn -d 'Perform Checkstyle analysis'
complete -c mvn -d 'Perform Checkstyle analysis and generate an HTML report'
complete -c mvn -d 'Perform Checkstyle analysis and generate an aggregate HTML report'
complete -c mvn -d 'Display help information on maven-checkstyle-plugin'
complete -c mvn -d 'Generate a Description of a Project (DOAP) file'
complete -c mvn -d 'Display help information on maven-doap-plugin'
complete -c mvn -d 'Checks a plugin'"'"'s documentation for the standard minimums'
complete -c mvn -d 'Display help information on maven-docck-plugin'
complete -c mvn -d 'Generates documentation for the Java code in an aggregator project'
complete -c mvn -d 'Bundles Javadoc for main Java code into a jar'
complete -c mvn -d 'Fix Javadoc documentation and tags for the Java code for the project'
complete -c mvn -d 'Display help information on maven-javadoc-plugin'
complete -c mvn -d 'Bundle the Javadoc into a jar'
complete -c mvn -d 'Generate documentation'
complete -c mvn -d 'Generate documentation'
complete -c mvn -d 'Bundle AbstractJavadocMojo.javadocDirectory'
complete -c mvn -d 'Generates documentation for the Java Test code'
complete -c mvn -d 'Bundle documentation for Java Test Code into a jar'
complete -c mvn -d 'Fix Javadoc documentation and tags for the Test Java code'
complete -c mvn -d 'Bundles the Javadoc documentation for test Java code into a jar'
complete -c mvn -d 'Generates documentation for the Java Test code'
complete -c mvn -d 'Generate documentation for the Java Test code'
complete -c mvn -d 'Bundle TestJavadocJar.testJavadocDirectory'
complete -c mvn -d 'Generates a combined JXR report in an aggregating project'
complete -c mvn -d 'Display help information on maven-jxr-plugin'
complete -c mvn -d 'Creates an html-based, cross referenced version of Java source code for a project'
complete -c mvn -d 'Generates a combined JXR report for test code in an aggregating project'
complete -c mvn -d 'Creates an html-based, cross referenced version of Java source code for a project'"'"'s test sources'
complete -c mvn -d 'Generates a Linkcheck report'
complete -c mvn -d 'Display help information on maven-linkcheck-plugin'
complete -c mvn -d 'Fail the build if there were any PMD violations in the source code'
complete -c mvn -d 'Creates a report for PMD'"'"'s CPD tool. See http://pmd.sourceforge.net/cpd.html for more detail'
complete -c mvn -d 'Fail the build if there were any CPD violations in the source code'
complete -c mvn -d 'Display help information on maven-pmd-plugin'
complete -c mvn -d 'Creates a PMD report'
complete -c mvn -d 'Generates the Project Continuous Integration System report'
complete -c mvn -d 'Generates the Project Dependencies report'
complete -c mvn -d 'Generates the Dependency Convergence report for reactor builds'
complete -c mvn -d 'Generates code snippets to be added to build tools'
complete -c mvn -d 'Generates the Project Dependency Management report'
complete -c mvn -d 'Generates the Project Distribution Management report'
complete -c mvn -d 'Display help information on maven-project-info-reports-plugin'
complete -c mvn -d 'Generates the project index page'
complete -c mvn -d 'Generates the Project Issue Tracking report'
complete -c mvn -d 'Generates the Project License report'
complete -c mvn -d 'Generates the Mailing List report'
complete -c mvn -d 'Generates the Project Modules report'
complete -c mvn -d 'Generates the Project Plugin Management report'
complete -c mvn -d 'Generates the Project Plugins report'
complete -c mvn -d 'Generates the Project Team report'
complete -c mvn -d 'Generates the Project Source Code Management (SCM) report'
complete -c mvn -d 'Generates the project information reports summary'
complete -c mvn -d 'Create Failsafe Test Report html '
complete -c mvn -d 'Display help information on maven-surefire-report-plugin'
complete -c mvn -d 'Create Surefire Test Report html'
complete -c mvn -d 'Create Surefire Test Report html'
complete -c mvn -d 'Generate Ant build files'
complete -c mvn -d 'Clean all Ant build files'
complete -c mvn -d 'Display help information on maven-ant-plugin'
complete -c mvn -d 'Display help information on maven-antrun-plugin'
complete -c mvn -d 'Maven AntRun Mojo'
complete -c mvn -d 'Crawl a Maven repository (filesystem, not HTTP) and creates a catalog file'
complete -c mvn -d 'Retrieve an archetype from the remote repository'
complete -c mvn -d 'Creates an archetype project from the current project'
complete -c mvn -d 'Generate new project from an archetype, or update project if using a partial archetype'
complete -c mvn -d 'Display help information on maven-archetype-plugin'
complete -c mvn -d 'Execute the archetype integration tests'
complete -c mvn -d 'Build a JAR from the current Archetype project'
complete -c mvn -d 'Updates the local catalog'
complete -c mvn -d 'Assemble an application bundle or distribution'
complete -c mvn -d 'Assemble an application bundle or distribution from an assembly descriptor'
complete -c mvn -d 'Assemble an application bundle or distribution'
complete -c mvn -d 'Like assembly:attached, but ignore the <formats/> section'
complete -c mvn -d 'Assemble an application bundle or distribution from an assembly descriptor'
complete -c mvn -d 'Display help information on maven-assembly-plugin'
complete -c mvn -d 'Assemble an application bundle or distribution from an assembly descriptor'
complete -c mvn -d 'Unpack project dependencies. Currently supports dependencies of type jar and zip'
complete -c mvn -d 'Analyzes the dependencies of this project'
complete -c mvn -d 'Look for dependency mismatches in your dependencyManagement section'
complete -c mvn -d 'Determine duplicate dependencies'
complete -c mvn -d 'Analyze the dependencies of this project'
complete -c mvn -d 'Analyze the dependencies of this project and produce a report'
complete -c mvn -d 'Output a classpath string of dependencies from the local repository to a file or log'
complete -c mvn -d 'Copy a list of artifacts from the repository to defined locations'
complete -c mvn -d 'Copy the project dependencies from the repository to a defined location'
complete -c mvn -d 'Displays all ancestor POMs of the project'
complete -c mvn -d 'Resolves a single artifact, eventually transitively, from the specified remote repositories'
complete -c mvn -d 'Resolve all project dependencies'
complete -c mvn -d 'Display help information on maven-dependency-plugin'
complete -c mvn -d 'Displays the list of dependencies for this project'
complete -c mvn -d 'Resolve all project dependencies and then lists the repositories used'
complete -c mvn -d 'Set a property pointing to the artifact file for each project dependency'
complete -c mvn -d 'Remove the project dependencies from the local repository, and optionally re-resolve them'
complete -c mvn -d 'Resolve project dependencies'
complete -c mvn -d 'Resolve all project plugins and reports and their dependencies'
complete -c mvn -d 'Resolve the project source dependencies from the repository'
complete -c mvn -d 'Displays the dependency tree for this project'
complete -c mvn -d 'Retrieve a list of artifacts from the repository and unpacks them in a defined location'
complete -c mvn -d 'Unpack the project dependencies from the repository to a defined location'
complete -c mvn -d 'Display the current platform information'
complete -c mvn -d 'Execute the defined enforcer-rules once per module'
complete -c mvn -d 'Display help information on maven-enforcer-plugin'
complete -c mvn -d 'Display help information on maven-gpg-plugin'
complete -c mvn -d 'Sign project artifact, the POM, and attached artifacts with GnuPG for deployment'
complete -c mvn -d 'Signs artifacts and installs the artifact in the remote repository'
complete -c mvn -d 'Displays the supported Plugin expressions used by Maven'
complete -c mvn -d 'Displays a list of the profiles which are currently active for this build'
complete -c mvn -d 'Displays the calculated settings as XML for this project'
complete -c mvn -d 'Displays a list of the platform details like system properties and environment variables'
complete -c mvn -d 'Displays the effective POM as an XML for this build, with the active profiles factored in'
complete -c mvn -d 'Display help information on maven-help-plugin'
complete -c mvn -d 'Displays a list of available profiles under the current project'
complete -c mvn -d 'Displays the attributes for a Maven Plugin / goals (aka Mojo - Maven plain Old Java Object)'
complete -c mvn -d 'Evaluates Maven expressions given by the user in an interactive mode'
complete -c mvn -d 'Display help information on maven-invoker-plugin'
complete -c mvn -d 'Installs the project artifacts of the main build into the local repository'
complete -c mvn -d 'Execute integration test Maven projects, collecting a log in the project directory'
complete -c mvn -d 'Generate a report based on the results of the Maven invocations'
complete -c mvn -d 'Execute integration test Maven projects, collect a log, and output the results'
complete -c mvn -d 'Check the results of maven-invoker-plugin integration tests'
complete -c mvn -d 'Display help information on maven-jarsigner-plugin'
complete -c mvn -d 'Signs a project artifact and attachments using jarsigner'
complete -c mvn -d 'Checks the signatures of a project artifact and attachments using jarsigner'
complete -c mvn -d 'Apply one or more patches to project sources'
complete -c mvn -d 'Display help information on maven-patch-plugin'
complete -c mvn -d 'Display help information on maven-pdf-plugin'
complete -c mvn -d 'Generates a PDF document for a project'
complete -c mvn -d 'Update the user plugin registry (if it'"'"'s in use) to reflect the version we'"'"'re installing'
complete -c mvn -d 'Generates the Plugin'"'"'s documentation report'
complete -c mvn -d 'Generate Xdoc files for the project mojos or goals'
complete -c mvn -d 'Inject any plugin-specific artifact metadata to the project'"'"'s artifact, for subsequent installation and deployment'
complete -c mvn -d 'Display help information on maven-plugin-plugin'
complete -c mvn -d 'Generates a HelpMojo class'
complete -c mvn -d 'Generate a plugin descriptor'
complete -c mvn -d 'Perform a release from SCM'
complete -c mvn -d 'Rollback changes made by a previous release'
complete -c mvn -d 'Prepare for a release in SCM, fully resolving dependencies for the purpose of producing a '"'"'release POM'"'"''
complete -c mvn -d 'Perform a release from SCM to a staging repository'
complete -c mvn -d 'Update the POM versions for a project'
complete -c mvn -d 'Prepare for a release in SCM'
complete -c mvn -d 'Clean up after a release preparation'
complete -c mvn -d 'Display help information on maven-release-plugin'
complete -c mvn -d 'Branch a project in SCM'
complete -c mvn -d 'Pull down resourceBundles and process them'
complete -c mvn -d 'Display help information on maven-remote-resources-plugin'
complete -c mvn -d 'Bundle up resources that should be considered as a remote-resource'
complete -c mvn -d 'Goal which creates an upload bundle for a project built with Maven'
complete -c mvn -d 'Packs artifacts already available in a local repository in a bundle for an upload requests'
complete -c mvn -d 'Display help information on maven-repository-plugin'
complete -c mvn -d 'Display the modification status of the files in the configured scm url'
complete -c mvn -d 'Branch the project'
complete -c mvn -d 'Validate scm connection string'
complete -c mvn -d 'Commit changes to the configured scm url'
complete -c mvn -d 'Display the difference of the working copy with the latest copy in the configured scm url'
complete -c mvn -d 'Update the local working copy with the latest source from the configured scm url'
complete -c mvn -d 'Add a file set to the project'
complete -c mvn -d 'Mark a set of files for deletion'
complete -c mvn -d 'Unedit/unlock a set of files'
complete -c mvn -d 'Pull the project source from the configured scm and execute the configured goals'
complete -c mvn -d 'Get a fresh copy of the latest source from the configured scm url'
complete -c mvn -d 'Tag the project'
complete -c mvn -d 'Edit/lock a set of files'
complete -c mvn -d 'This mojo will fail the build if there is any local modifications'
complete -c mvn -d 'Get the list of project files'
complete -c mvn -d 'Dump changelog contents to console. It is mainly used to test maven-scm-api'"'"'s changelog command'
complete -c mvn -d 'Display help information on maven-scm-plugin'
complete -c mvn -d 'Get a fresh exported copy of the latest source from the configured scm url'
complete -c mvn -d 'Updates all projects in a multi project build'
complete -c mvn -d 'Publish a content to scm'
complete -c mvn -d 'Display help information on maven-scm-publish-plugin'
complete -c mvn -d 'Empty goal, provided only to set loose the lifecycle'
complete -c mvn -d 'Copies artifacts from one repository to another repository'
complete -c mvn -d 'Display help information on maven-stage-plugin'
complete -c mvn -d 'Display help information on maven-toolchains-plugin'
complete -c mvn -d 'Check that toolchains requirements are met by currently configured toolchains'
complete -c mvn -d 'Deletes the .project, .classpath, .wtpmodules files and .settings folder used by Eclipse'
complete -c mvn -d 'Configure Eclipse Workspace features'
complete -c mvn -d 'Generate Eclipse configuration files'
complete -c mvn -d 'Display help information on maven-eclipse-plugin'
complete -c mvn -d 'Install plugins resolved from the Maven repository system into an Eclipse instance'
complete -c mvn -d 'Generates MyEclipse configuration files'
complete -c mvn -d 'Deletes configuration files used by MyEclipse'
complete -c mvn -d 'Generates the rad-6 configuration files'
complete -c mvn -d 'Deletes the config files used by Rad-6. the files .j2ee and the file .websettings'
complete -c mvn -d 'Removes the not-available marker files from the repository'
complete -c mvn -d 'For the entire workspace: resolve references to the M2_REPO classpath variable'
complete -c mvn -d 'Add eclipse artifacts from an eclipse installation to the local repo'
complete -c mvn -d 'Builds a deployable JBoss Hibernate exploded Archive'
complete -c mvn -d 'Builds a deployable JBoss ESB Archive'
complete -c mvn -d 'Builds a deployable JBoss ESB exploded Archive'
complete -c mvn -d 'Builds a deployable JBoss AOP Archive'
complete -c mvn -d 'Builds a deployable JBoss Spring Archive'
complete -c mvn -d 'Builds a deployable JBoss Hibernate Archive'
complete -c mvn -d 'Display help information on jboss-packaging-maven-plugin'
complete -c mvn -d 'Builds a deployable JBoss Process Archive'
complete -c mvn -d 'Builds a deployable JBoss Service Archive'
complete -c mvn -d 'Builds a deployable JBoss Service in place exploded Archive'
complete -c mvn -d 'Builds a deployable JBoss Service exploded Archive'
complete -c mvn -d 'Execute the WebSphere command-line administration tool with the specified arguments'
complete -c mvn -d 'Lists all the applications installed on a WebSphere Server or Cell'
complete -c mvn -d 'Starts a standalone server instance'
complete -c mvn -d 'Start an application on a WebSphere Server or in a WebSphere Cell'
complete -c mvn -d 'Cleans out temporary resources and generated sources'
complete -c mvn -d 'Stop a standalone server instance'
complete -c mvn -d 'Stop an application on a WebSphere Server or in a WebSphere Cell'
complete -c mvn -d 'Executes ServiceDeploy command on archive (Ear, Zip or Jar), produce a deployable ear file'
complete -c mvn -d 'Installs an EAR into WebSphere Application Server'
complete -c mvn -d 'Generate default IBM WebSphere Bindings for the specified EAR file'
complete -c mvn -d 'Executes the endpoint enabler ant task on the EAR archive'
complete -c mvn -d 'Creates Java classes and deployment descriptor templates from a WSDL file'
complete -c mvn -d 'Display help information on was6-maven-plugin'
complete -c mvn -d 'Generates EJB RMIC stub sources'
complete -c mvn -d 'Uninstall an existing application from a WebSphere Server or Cell'
complete -c mvn -d 'Stop an artifact on Weblogic server(s) or cluster(s)'
complete -c mvn -d 'Start an artifact on Weblogic server(s) or cluster(s)'
complete -c mvn -d 'Undeploy artifacts from Weblogic server(s) or cluster(s)'
complete -c mvn -d 'Run the weblogic appc compiler against an artifact'
complete -c mvn -d 'Runs Client Gen on a given WSDL'
complete -c mvn -d 'List the atifacts on Weblogic server(s) or cluster(s)'
complete -c mvn -d 'Display help information on weblogic-maven-plugin'
complete -c mvn -d 'This class generates wsdl from ear/war package'
complete -c mvn -d 'Redeploy artifact on Weblogic server(s) or cluster(s)'
complete -c mvn -d 'Runs the JWSC compiler task for web service enabled code'
complete -c mvn -d 'Runs Service Gen on a given WSDL'
complete -c mvn -d 'Deploy an artifact to Weblogic servers(s) or cluster(s)'
complete -c mvn -d 'Display help information on antlr-maven-plugin'
complete -c mvn -d 'Generates Antlr documentation from grammar files'
complete -c mvn -d 'Generates files based on grammar files with Antlr tool'
complete -c mvn -d 'Creates an AspectJ HTML report using the ajdoc tool and format'
complete -c mvn -d 'Weaves all main classes'
complete -c mvn -d 'Create eclipse configuration of aspectJ'
complete -c mvn -d 'Display help information on aspectj-maven-plugin'
complete -c mvn -d 'Weaves all test classes'
complete -c mvn -d 'A Plugin for generating WSDL files using Axis Java2WSDL'
complete -c mvn -d 'Display help information on axistools-maven-plugin'
complete -c mvn -d 'A Plugin for generating stubs for WSDL files using Axis WSDL2Java'
complete -c mvn -d 'Utility for turning xml into Axis deployment operations (wraps org.apache.axis.utils.Admin)'
complete -c mvn -d 'Display help information on castor-maven-plugin'
complete -c mvn -d 'Use Castor MappingTool to generate mapping files from a set of Classes'
complete -c mvn -d 'Use Castor MappingTool to generate mapping files from a single Class'
complete -c mvn -d 'A mojo that uses Castor to generate a collection of javabeans from an XSD'
complete -c mvn -d 'Commons-attributes compiler'
complete -c mvn -d 'Commons-attributes compiler for tests'
complete -c mvn -d 'Runs the project with a debugger port hook (optionally suspended)'
complete -c mvn -d 'Merges GWT servlet elements into deployment descriptor (and non GWT servlets into shell)'
complete -c mvn -d 'Display help information on gwt-maven-plugin'
complete -c mvn -d 'Invokes the GWT Compiler'
complete -c mvn -d 'Add GWT java source code and module descriptor as resources to project jar'
complete -c mvn -d 'Copy GWT java source code and module descriptor as resources in the build outputDirectory'
complete -c mvn -d 'see http://code.google.com/webtoolkit/doc/latest/DevGuideCompileReport.html#Usage'
complete -c mvn -d 'Creates CSS interfaces for css files'
complete -c mvn -d 'Runs GWT modules with Super Dev Mode'
complete -c mvn -d 'Goal which creates Eclipse lauch configurations for GWTTestCases'
complete -c mvn -d 'Mimic surefire to run GWTTestCases during integration-test phase, until SUREFIRE-508 is fixed'
complete -c mvn -d 'Cleanup the webapp directory for GWT module compilation output'
complete -c mvn -d 'Goal which generate Async interface'
complete -c mvn -d 'Creates I18N interfaces for constants and messages files'
complete -c mvn -d 'Runs the project in the GWT (Classic or Super) Dev Mode for development'
complete -c mvn -d 'Goal which creates Eclipse lauch configurations for GWT modules'
complete -c mvn -d ''"'"'hbm2doc'"'"' generates html documentation a'"'"'la javadoc for the database schema'
complete -c mvn -d 'Generate a set of .hbm files'
complete -c mvn -d 'Generate a set of DAOs'
complete -c mvn -d 'Execute a HQL query statements'
complete -c mvn -d 'Goal for '"'"'cglib'"'"' or '"'"'javassist'"'"' instrumentation'
complete -c mvn -d ''"'"'AntRun'"'"' wrapper'
complete -c mvn -d ''"'"'hbmtemplate'"'"' generic exporter that can be controlled by a user provided template or class'
complete -c mvn -d ''"'"'hbm2cfgxml'"'"' generates a hibernate.cfg.xml'
complete -c mvn -d ''"'"'hbm2ddl'"'"' lets you run schemaexport and schemaupdate which generates the appropriate SQL DDL'
complete -c mvn -d 'Display help information on hibernate3-maven-plugin'
complete -c mvn -d ''"'"'hbmlint'"'"' scans mappings for errors'
complete -c mvn -d ''"'"'hbm2java'"'"' is a java code generator'
complete -c mvn -d 'Process CORBA IDL test files in IDLJ'
complete -c mvn -d 'Display help information on idlj-maven-plugin'
complete -c mvn -d 'Process CORBA IDL files in IDLJ'
complete -c mvn -d 'Parse a JJTree grammar file (*.jjt) and transform it to source files and a JavaCC grammar file'
complete -c mvn -d 'Parses a JTB file and transforms it into source for an AST and a JavaCC grammar'
complete -c mvn -d 'JJDoc takes a JavaCC parser specification and produces documentation for the BNF grammar'
complete -c mvn -d 'Preprocess *.jtb grammar files and generate a parser with parse tree actions'
complete -c mvn -d 'Display help information on javacc-maven-plugin'
complete -c mvn -d 'Preprocess decorated grammar files (*.jjt) and generate a parser with parse tree actions'
complete -c mvn -d 'Parse a JavaCC grammar file (*.jj) and transform it to Java source files'
complete -c mvn -d 'Display help information on jaxb2-maven-plugin'
complete -c mvn -d 'Mojo that creates XML schema(s) from compile-scope Java sources or binaries'
complete -c mvn -d 'Mojo that creates XML schema(s) from test-scope Java testSources or binaries'
complete -c mvn -d 'Mojo that creates test-scope Java source or binaries from XML schema'
complete -c mvn -d 'Mojo that creates compile-scope Java source or binaries from XML schema'
complete -c mvn -d 'Generates the Schema from the JDO mappings and the enhanced class files'
complete -c mvn -d 'Provides detailed information about the database - limits and datatypes support'
complete -c mvn -d 'Deletes all database tables required for a set of JDO MetaData files from the database schema'
complete -c mvn -d 'Provides a detailed information about the database schema'
complete -c mvn -d 'Validates database tables required for a set of JDO MetaData files for correct structure'
complete -c mvn -d 'Goal which reports on the test source files using JSLint'
complete -c mvn -d 'Goal which reports on the source files using JSLint'
complete -c mvn -d 'Display help information on jslint-maven-plugin'
complete -c mvn -d 'Test goal implementation of the generate html mojo'
complete -c mvn -d 'Main goal implementation of the generate html mojo'
complete -c mvn -d 'Test goal implementation of the import mojo'
complete -c mvn -d 'Main goal implementation of the import mojo'
complete -c mvn -d 'Display help information on js-import-maven-plugin'
complete -c mvn -d 'Processes Application model classes and enhances them by running Open JPA Enhancer tool'
complete -c mvn -d 'Display help information on openjpa-maven-plugin'
complete -c mvn -d 'Processes Application model classes and enhances them by running Open JPA Enhancer tool'
complete -c mvn -d 'Executes the schema generation via the OpenJPA MappingTool'
complete -c mvn -d 'Executes the SQL generation via the OpenJPA MappingTool'
complete -c mvn -d 'Display help information on rmic-maven-plugin'
complete -c mvn -d 'Compiles rmi stubs and skeleton classes from a remote implementation class'
complete -c mvn -d 'Compiles rmi stubs and skeleton classes from a remote implementation class'
complete -c mvn -d 'Creates a jar containing the rmic generated classes'
complete -c mvn -d 'A plugin for processing grammar files in SableCC'
complete -c mvn -d 'Translates SQLJ source code using the SQLJ Translator'
complete -c mvn -d 'Cleans out generated stale resources'
complete -c mvn -d 'Display help information on sqlj-maven-plugin'
complete -c mvn -d 'Display help information on xdoclet-maven-plugin'
complete -c mvn -d 'Runs XDoclet'
complete -c mvn -d 'Parse xsd files and produces a corresponding object model based on the Apache XML Beans parser'
complete -c mvn -d 'Display help information on xmlbeans-maven-plugin'
complete -c mvn -d 'Parse xsd files and produces a corresponding object model based on the Apache XML Beans parser'
complete -c mvn -d 'Create the NetBeans auto update site definition'
complete -c mvn -d 'Package branding resources for NetBeans platform/IDE based application'
complete -c mvn -d 'Build installers for Mavenized NetBeans application'
complete -c mvn -d 'Create the NetBeans module clusters from reactor'
complete -c mvn -d 'Create the NetBeans module clusters/application for the '"'"'nbm-application'"'"' packaging projects'
complete -c mvn -d 'Display help information on nbm-maven-plugin'
complete -c mvn -d 'Generate NetBeans module system specific manifest entries'
complete -c mvn -d 'Create the NetBeans module artifact (nbm file), part of '"'"'nbm'"'"' lifecycle/packaging'
complete -c mvn -d 'Run NetBeans with additional module clusters, to be used with nbm:cluster'
complete -c mvn -d 'Run a branded application on top of NetBeans Platform'
complete -c mvn -d 'Create a standalone application out of the composed clusters of nbm-application'
complete -c mvn -d 'Create webstartable binaries for a '"'"'nbm-application'"'"''
complete -c mvn -d 'Generate a report from the Clirr output'
complete -c mvn -d 'Check for compatibility between two arbitrary artifact sets'
complete -c mvn -d 'Display help information on clirr-maven-plugin'
complete -c mvn -d 'Check for compatibility with previous version'
complete -c mvn -d 'Check for compatibility with previous version without forking the project'
complete -c mvn -d 'Check the coverage for unit tests from last instrumentation'
complete -c mvn -d 'Check the coverage for unit and integration tests from last instrumentation'
complete -c mvn -d 'Clean up the files that Cobertura Maven Plugin has created during instrumentation'
complete -c mvn -d 'Generate Cobertura report on unit tests'
complete -c mvn -d 'Generate Cobertura report on unit and integration tests'
complete -c mvn -d 'Output the contents of Cobertura'"'"'s data file to the command line'
complete -c mvn -d 'Display help information on cobertura-maven-plugin'
complete -c mvn -d 'Instrument the compiled classes'
complete -c mvn -d 'Goal which produces a changelog report based on the Subversion logs'
complete -c mvn -d 'Display help information on scmchangelog-maven-plugin'
complete -c mvn -d 'Display help information on sonar-maven-plugin'
complete -c mvn -d 'Analyze project'
complete -c mvn -d 'Scans the source files for tags and generates a report on their occurrences'
complete -c mvn -d 'Display help information on taglist-maven-plugin'
complete -c mvn -d 'Check the build if for any Method with a ccn greater than a limit in the source code'
complete -c mvn -d 'Display help information on javancss-maven-plugin'
complete -c mvn -d 'Generates a JavaNCSS report based on this module'"'"'s source code'
complete -c mvn -d 'Run JDepend and generate a site report'
complete -c mvn -d 'Display help information on jdepend-maven-plugin'
complete -c mvn -d 'Run JDepend and generate a site report'
complete -c mvn -d 'Create a CodeNarc Report'
complete -c mvn -d 'Display help information on codenarc-maven-plugin'
complete -c mvn -d 'Open the findbugs GUI to browse the report'
complete -c mvn -d 'Display help information on findbugs-maven-plugin'
complete -c mvn -d 'Use fitnesse.runner.TestRunner to get result of a remote FitNesse web page execution'
complete -c mvn -d 'Display help information on fitnesse-maven-plugin'
complete -c mvn -d 'Use fitnesse.runner.TestRunner to call a remote FitNesse web page and run the tests locally'
complete -c mvn -d 'Generates a FitNesse report from a FitNesse web server'
complete -c mvn -d 'Start the Selenium server'
complete -c mvn -d 'Starts an Xvfb instance suitable for handling X11 displays for headless systems'
complete -c mvn -d 'Stop the Selenium server'
complete -c mvn -d 'Run a suite of HTML Selenese tests'
complete -c mvn -d 'Display help information on selenium-maven-plugin'
complete -c mvn -d 'Display help information on webtest-maven-plugin'
complete -c mvn -d 'Grep through a set of files to find text strings and fail build if matches are found'
complete -c mvn -d 'Remove temporary data from running the Canoo WebTests'
complete -c mvn -d 'Runs a Canoo WebTest defined in an ANT script'
complete -c mvn -d 'Runs a Canoo WebTest in a loop until an error or failure occurs'
complete -c mvn -d 'Prints the configuration settings'
complete -c mvn -d 'Creates the HTML report for a test run based on XSLT'
complete -c mvn -d 'Check webtest result file for test failures'
complete -c mvn -d 'Invokes JMeter'
complete -c mvn -d 'Checks the latest performancetests to verify that performance targets have been met'
complete -c mvn -d 'Invokes the JMeter gui'
complete -c mvn -d 'Analyzes output from JMeter'
complete -c mvn -d 'Display help information on chronos-jmeter-maven-plugin'
complete -c mvn -d 'Save a snapshot of the currently executed test to enable later historic reports'
complete -c mvn -d 'Display help information on chronos-surefire-maven-plugin'
complete -c mvn -d 'Collect the execution of each performed unittest, and compare to previous times'
complete -c mvn -d 'Creates a historic report of performance test results'
complete -c mvn -d 'Creates a report of the currently executed performancetest in html format'
complete -c mvn -d 'Display help information on chronos-report-maven-plugin'
complete -c mvn -d 'Generate API Signature from at least one of: java runtime, module dependencies/module classes'
complete -c mvn -d 'Checks the classes compiled by this module'
complete -c mvn -d 'Display help information on animal-sniffer-maven-plugin'
complete -c mvn -d 'Generates JSW based daemon wrappers'
complete -c mvn -d 'Assembles the artifacts and generates bin scripts for the configured applications'
complete -c mvn -d 'Creates an appassembler repository'
complete -c mvn -d 'Display help information on appassembler-maven-plugin'
complete -c mvn -d 'Parse a version string and set properties containing the component parts of the version'
complete -c mvn -d 'Define one or many properties as a result of a Beanshell script invocation'
complete -c mvn -d 'Add more resource directories to the POM'
complete -c mvn -d 'Store the maven core version in a property maven.version'
complete -c mvn -d 'Attach additional artifacts to be installed and deployed'
complete -c mvn -d 'Add test source directories to the POM'
complete -c mvn -d 'Resolve the latest released version of this project'
complete -c mvn -d 'Retrieve current host IP address and place it under a configurable project property'
complete -c mvn -d 'Reserve a list of random not in use network ports and place them in project properties'
complete -c mvn -d 'Remove project'"'"'s artifacts from local repository'
complete -c mvn -d 'Add more source directories to the POM'
complete -c mvn -d 'Add more test resource directories to the POM'
complete -c mvn -d 'Get number of CPUs, place it under a configurable project property'
complete -c mvn -d 'Sets a property based on the current date and time'
complete -c mvn -d 'Sets a property by applying a regex replacement rule to a supplied value'
complete -c mvn -d 'Sets a property by applying a regex replacement rule to a supplied value'
complete -c mvn -d 'Display help information on build-helper-maven-plugin'
complete -c mvn -d 'Give a timestamp available through one or more properties'
complete -c mvn -d 'Create a build number'
complete -c mvn -d 'Display help information on buildnumber-maven-plugin'
complete -c mvn -d 'Set project properties for changeSet/changeSetDate from the current hg repository'
complete -c mvn -d 'Display help information on cassandra-maven-plugin'
complete -c mvn -d 'Loads a cassandra-cli bscript into a Cassandra instance'
complete -c mvn -d 'Deletes the Cassandra home directory that we create for running Cassandra'
complete -c mvn -d 'Starts a Cassandra instance in the background'
complete -c mvn -d 'Loads a CassandraUnit DataSet into a Cassandra instance'
complete -c mvn -d 'Stops a background Cassandra instance'
complete -c mvn -d 'Runs nodetool repair on a Cassandra instance'
complete -c mvn -d 'Executes cql statements from maven'
complete -c mvn -d 'Stops a background Cassandra instance'
complete -c mvn -d 'Runs nodetool flush on a Cassandra instance'
complete -c mvn -d 'Runs Cassandra in the foreground'
complete -c mvn -d 'Starts a Cassandra instance in the background'
complete -c mvn -d 'Runs nodetool cleanup on a Cassandra instance'
complete -c mvn -d 'Runs nodetool compact on a Cassandra instance'
complete -c mvn -d 'Display help information on ditaot-maven-plugin'
complete -c mvn -d 'Display DITA Open Toolkit'"'"'s built-in version'
complete -c mvn -d 'Generate http://www.dita-op.org'"'"'s Eclipse configuration to allow editing'
complete -c mvn -d 'Display DITA Open Toolkit'"'"'s common Ant properties usage'
complete -c mvn -d 'Convert DITA Open Toolkit'"'"'s Microsoft CHM output file, produced by htmlhelp transtype, to pure HTML set of files'
complete -c mvn -d 'Execute DITA Open Toolkit'"'"'s Ant command line to transform DITA files to desired output format'
complete -c mvn -d 'A Plugin for executing external programs'
complete -c mvn -d 'Display help information on exec-maven-plugin'
complete -c mvn -d 'Executes the supplied java class in the current VM with the enclosing project'"'"'s dependencies as classpath'
complete -c mvn -d 'A Mojo that deletes a generated keystore file'
complete -c mvn -d 'To export a certificate from a keystore'
complete -c mvn -d 'To change the key password of an entry of a keystore'
complete -c mvn -d 'To generate a secret key into a keystore'
complete -c mvn -d 'To import all entries of a keystore to another keystore'
complete -c mvn -d 'To change the store password of a keystore'
complete -c mvn -d 'To import a certificate into a keystore'
complete -c mvn -d 'To generate certificate request'
complete -c mvn -d 'To list entries in a keystore'
complete -c mvn -d 'To print the content of a certificate request'
complete -c mvn -d 'To print the content of a certificate'
complete -c mvn -d 'To delete an entry alias from a keystore'
complete -c mvn -d 'Display help information on keytool-maven-plugin'
complete -c mvn -d 'To generate a key pair into a keystore'
complete -c mvn -d 'To change an entry alias into a keystore'
complete -c mvn -d 'To print the content of a CRL file'
complete -c mvn -d 'To generate certificate from a certificate request from a keystore'
complete -c mvn -d 'Display help information on latex-maven-plugin'
complete -c mvn -d 'LaTeX documents building goal'
complete -c mvn -d 'Generates a report of all third-parties detected in the module'
complete -c mvn -d 'The goal to check if the state of header on project source files'
complete -c mvn -d 'Goal to generate the third-party license file'
complete -c mvn -d 'Updates (or creates) the license file according to the licenseName'
complete -c mvn -d 'Display help information on license-maven-plugin'
complete -c mvn -d 'Fork executions of add-third-party for the leaf projects of the module tree'
complete -c mvn -d 'Display all available licenses'
complete -c mvn -d 'Displays all the available comment style to box file headers'
complete -c mvn -d 'The goal to update (or add) the header on project source files'
complete -c mvn -d 'Download the license files of all the current project'"'"'s dependencies, and generate a summary file containing a list of all dependencies and their licenses'
complete -c mvn -d 'Generate the scan results as part of the site'
complete -c mvn -d 'Generate an Ounce application file'
complete -c mvn -d 'Allows an on demand scan of an application and the optional publishing of the results'
complete -c mvn -d 'This mojo generates an Ounce project file'
complete -c mvn -d 'This mojo generates an Ounce project file'
complete -c mvn -d 'Display help information on ounce-maven-plugin'
complete -c mvn -d 'Construct the RPM file and attaches it as a secondary artifact'
complete -c mvn -d 'Display help information on rpm-maven-plugin'
complete -c mvn -d 'Construct the RPM file'
complete -c mvn -d 'Makes the rpm version and release attributes available as properties'
complete -c mvn -d 'Call mvn siteskinner:skin on a maven project'
complete -c mvn -d 'Display help information on siteskinner-maven-plugin'
complete -c mvn -d 'Display help information on sql-maven-plugin'
complete -c mvn -d 'Executes SQL against a database'
complete -c mvn -d 'List all files in the archive'
complete -c mvn -d 'Display an archive'"'"'s list to console'
complete -c mvn -d 'Copy an archive/directory to another archive/directory'
complete -c mvn -d 'Remove a set of files from an existing archive'
complete -c mvn -d 'Copy a set of files in and out of an existing archive'
complete -c mvn -d 'Move a single file or multiple files (via FileSet) between archives or directories'
complete -c mvn -d 'Display help information on truezip-maven-plugin'
complete -c mvn -d 'Update open archives immediately, flush cached data to disk'
complete -c mvn -d 'Removes the initial backup of the pom, thereby accepting the changes'
complete -c mvn -d 'Compare dependency versions of current project to another'
complete -c mvn -d 'Generates a report of available updates for the dependencies of a project'
complete -c mvn -d 'Displays all dependencies that have newer versions available'
complete -c mvn -d 'Displays any updates of the project'"'"'s parent project'
complete -c mvn -d 'Displays all plugins that have newer versions available'
complete -c mvn -d 'Displays properties that are linked to artifact versions and have updates available'
complete -c mvn -d 'Replace -SNAPSHOT versions with a release version, downgrading if necessary'
complete -c mvn -d 'Display help information on versions-maven-plugin'
complete -c mvn -d 'Resolve unlocked snapshot dependencies to the locked timestamp versions'
complete -c mvn -d 'Generates a report of available updates for the plugins of a project'
complete -c mvn -d 'Generates a report of available updates for properties of a project'
complete -c mvn -d 'Resolve dependency version ranges to the specific version being used in the build'
complete -c mvn -d 'Restores the pom from the initial backup'
complete -c mvn -d 'Sets the current project'"'"'s version and based on that change propagates that change onto any child modules as necessary'
complete -c mvn -d 'Resolve unlocked snapshot dependencies to the locked timestamp versions'
complete -c mvn -d 'Scan the current projects child modules, and update versions'
complete -c mvn -d 'Sets the parent version to the latest parent version'
complete -c mvn -d 'Sets properties to the latest versions of specific artifacts'
complete -c mvn -d 'Sets a property to the latest version in a given range of associated artifacts'
complete -c mvn -d 'Replaces any release versions with the latest release version'
complete -c mvn -d 'Replaces any release versions with the latest snapshot version (if it has been deployed)'
complete -c mvn -d 'Replaces any version with the latest version'
complete -c mvn -d 'Replaces any release versions with the next release version (if it has been released)'
complete -c mvn -d 'Replaces any release versions with the next snapshot version (if it has been deployed)'
complete -c mvn -d 'Replaces any version with the latest version'
complete -c mvn -d 'Replaces any versions with the corresponding version from the reactor'
complete -c mvn -d 'Replaces any -SNAPSHOT versions with the corresponding release version'
complete -c mvn -d 'Copy files from one VFS to another VFS'
complete -c mvn -d 'Display help information on vfs-maven-plugin'
complete -c mvn -d 'Display file list of a virtual file system'
complete -c mvn -d 'Merge Maven repository from one VFS to another VFS'
complete -c mvn -d 'Move files from a virtual file system to another'
complete -c mvn -d 'Remove files from a virtual file system'
complete -c mvn -d 'The ValidatorMojo'"'"'s task is the validation of XML files against a given schema'
complete -c mvn -d 'Display help information on xml-maven-plugin'
complete -c mvn -d 'The TransformMojo is used for transforming a set of files using a common stylesheet'
complete -c mvn -d 'Release a closed Nexus staging repo into a permanent Nexus repo for general consumption'
complete -c mvn -d 'Closes a Nexus staging repository'
complete -c mvn -d 'Alternative deploy mojo, that will select proper DeployStrategy to perform deploys'
complete -c mvn -d 'Promotes a closed Nexus staging repository into a Nexus Build Promotion Profile'
complete -c mvn -d 'Deploy locally staged artifacts from nexus-staging repository'
complete -c mvn -d 'Drops a Nexus staging repository that is either open or closed'
complete -c mvn -d 'Promotes a closed Nexus staging repository into a Nexus Build Promotion Profile'
complete -c mvn -d 'Display help information on nexus-staging-maven-plugin'
complete -c mvn -d 'Drops a Nexus staging repository that is either open or closed'
complete -c mvn -d 'Deploy staged artifacts from local repository'
complete -c mvn -d 'Release a closed Nexus staging repo into a permanent Nexus repo for general consumption'
complete -c mvn -d 'Lists staging repositories accessible by current user available on Nexus'
complete -c mvn -d 'Lists staging profiles accessible by current user available on Nexus'
complete -c mvn -d 'Closes a Nexus staging repository'
complete -c mvn -d 'Delete unused indexes from application'
complete -c mvn -d 'Starts the App Engine development server and does not wait'
complete -c mvn -d 'Start the specified backend'
complete -c mvn -d 'Stops the App Engine development server'
complete -c mvn -d 'Roll back a previously in-progress update'
complete -c mvn -d 'Start the specified module version'
complete -c mvn -d 'Change the default version, but more gently than set_default_version'
complete -c mvn -d 'Update application dispatch.xml'
complete -c mvn -d 'App Engine endpoints get-client-lib … command'
complete -c mvn -d 'Debug the specified VM Runtime instance'
complete -c mvn -d 'Set the default serving version'
complete -c mvn -d 'Runs the datanucleus enhancer'
complete -c mvn -d 'Create or update an app version'
complete -c mvn -d 'Maven project version is dot based, e.g '"'"'1.9.15'"'"' , whereas appengine-web.xml is dash based, e.g'
complete -c mvn -d 'Configure the specified backend'
complete -c mvn -d 'Update application cron jobs'
complete -c mvn -d 'Runs the App Engine development server'
complete -c mvn -d 'Delete the specified backend'
complete -c mvn -d 'Update the specified backend or all backends'
complete -c mvn -d 'Update application indexes'
complete -c mvn -d 'Update application task queue definitions'
complete -c mvn -d 'Stop the specified module version'
complete -c mvn -d 'Rollback an in-progress update'
complete -c mvn -d 'Update application DoS protection configuration'
complete -c mvn -d 'App Engine endpoints get-discovery-doc command'
complete -c mvn -d 'Stop the specified backend'
complete -c mvn -d 'Creates an Android Archive (aar) file'
complete -c mvn -d 'Creates the apk file'
complete -c mvn -d 'Creates the apklib file'
complete -c mvn -d 'Connect external IP addresses to the ADB server'
complete -c mvn -d 'Deploys the apk(s) of the current project(s) to all attached devices and emulators'
complete -c mvn -d 'Deploys a specified Android application apk to attached devices and emulators'
complete -c mvn -d 'Deploys all directly declared dependencies of <type>apk</type> in this project'"'"'s pom'
complete -c mvn -d 'DevicesMojo lists all attached devices and emulators found with the android debug bridge'
complete -c mvn -d 'Converts compiled Java classes to the Android dex format'
complete -c mvn -d 'Disconnect external IP addresses from the ADB server'
complete -c mvn -d 'After compiled Java classes use emma tool'
complete -c mvn -d 'EmulatorStartMojo can start the Android Emulator with a specified Android Virtual Device (avd)'
complete -c mvn -d 'EmulatorStartMojo can stop the Android Emulator with a specified Android Virtual Device (avd)'
complete -c mvn -d 'EmulatorStopeAllMojo will stop all attached devices'
complete -c mvn -d 'Generates R.java based on resources specified by the resources configuration parameter'
complete -c mvn -d 'Display help information on android-maven-plugin'
complete -c mvn -d 'Runs the instrumentation apk on device'
complete -c mvn -d 'Internal'
complete -c mvn -d 'Internal'
complete -c mvn -d 'LintMojo can run the lint command against the project'
complete -c mvn -d 'Manifest Merger V2 AndroidManifest.xml file'
complete -c mvn -d 'Updates various version attributes present in the AndroidManifest.xml file'
complete -c mvn -d 'Execute tests using UI/Application Exerciser Monkey'
complete -c mvn -d 'Execute monkey runner programs'
complete -c mvn -d 'Use ProGuard byte code obfuscator, minimzer, and optimizer'
complete -c mvn -d 'Copy file or directory from all the attached (or specified) devices/emulators'
complete -c mvn -d 'Copy file to all the attached (or specified) devices/emulators'
complete -c mvn -d 'Undeploys and the deploys the apks of the current projects to attached devices and emulators'
complete -c mvn -d 'Reploys a specified Android application apk to attached devices and emulators'
complete -c mvn -d 'Runs the first Activity shown in the top-level launcher as determined by its Intent filters'
complete -c mvn -d 'Can execute tests using ui uiautomator'
complete -c mvn -d 'Undeploys the apk(s) of the current project(s) to all attached devices and emulators'
complete -c mvn -d 'Undeploys a specified Android application apk from attached devices and emulators'
complete -c mvn -d 'Unpack libraries code and dependencies into target'
complete -c mvn -d 'ZipalignMojo can run the zipalign command against the apk'
complete -c mvn -d 'Removes any Liquibase updater locks from the current database'
complete -c mvn -d 'Writes a Liquibase tag to the database'
complete -c mvn -d 'Drops all database objects in the configured schema(s)'
complete -c mvn -d 'Generate SQL to update the database to the current version'
complete -c mvn -d 'Lists all Liquibase updater locks on the current database'
complete -c mvn -d 'Liquibase Migration Maven plugin'
complete -c mvn -d 'Marks all unapplied changes to the database as applied in the change log'
complete -c mvn -d 'Clears all checksums in the current changelog, so they will be recalculated next update'
complete -c mvn -d 'Generates dbDocs against the database'
complete -c mvn -d 'Generates SQL to rollback the database to the specified pointing attributes '"'"'rollbackCount'"'"', '"'"'rollbackTag'"'"''
complete -c mvn -d 'Prints which changesets need to be applied to the database'
complete -c mvn -d 'Generates SQL that marks all unapplied changes as applied'
complete -c mvn -d 'Applies the DatabaseChangeLogs to the database, testing rollback'
complete -c mvn -d 'Display help information on liquibase-maven-plugin'
complete -c mvn -d 'Invokes Liquibase rollbacks on a database'
complete -c mvn -d 'Generates SQL to rollback the database to current state after the next update'
complete -c mvn -d 'Generates a diff between the specified database and the reference database'
complete -c mvn -d 'Applies the DatabaseChangeLogs to the database'
complete -c mvn -d 'Generates SQL that marks all unapplied changes as applied'
complete -c mvn -d 'Creates an SQL migration script using the provided DatabaseChangeLog(s)'
complete -c mvn -d 'Finishes a release'
complete -c mvn -d 'Starts a hotfix'
complete -c mvn -d 'Finishes a hotfix'
complete -c mvn -d 'Finishes a feature branch'
complete -c mvn -d 'Updates the pom versions in the current branch by adding a build number label'
complete -c mvn -d 'Starts a release'
complete -c mvn -d 'Starts a feature branch'
complete -c mvn -d 'Display help information on spring-boot-maven-plugin'
complete -c mvn -d 'Repackage JAR and WAR for use with java -jar'
complete -c mvn -d 'Run an executable archive application'
