// vi:syntax=c
#include "tests.def"

DO_TEST(pipe, WITH_ENV(({"PATH=/bin:/usr/bin", NULL}),
	SHELL_TEST_ERR("|", "", "", 2)
	SHELL_TEST_ERR("true |", "", "", 2)
	SHELL_TEST_ERR("| true", "", "", 2)

	SHELL_TEST("false | true", "", "", "", 0)
	SHELL_TEST("true | false", "", "", "", 1)
	WITH_OPTS(({{"pipefail", 1}, {NULL, 0}}),
		SHELL_TEST("false | true", "", "", "", 1)
		SHELL_TEST("true | false", "", "", "", 1)
	)

	REPEAT(10,
		char	*cmd;
		WITH_RANDOM_TEXT(RANDOM_VALUE(10, 60), ran, " \t\n\r\f\v\a\b\"(){}[]*+,-./!#$%&~<>=?",
			ft_asprintf(&cmd, "echo -n '%s' | cat -", ran);
			SHELL_TEST(cmd, "", ran, "", 0)
			free(cmd);
			ft_asprintf(&cmd, "echo -n '%s' | cat - | cat", ran);
			SHELL_TEST(cmd, "", ran, "", 0)
			free(cmd);
			ft_asprintf(&cmd, "echo -n '%s' | cat - | cat | cat ", ran);
			SHELL_TEST(cmd, "", ran, "", 0)
			free(cmd);
		)
	)

	WITH_RANDOM_TEXT(50, ran, "0123456789ABCDEF",
		REPEAT(10,
			size_t	idx = RANDOM_VALUE(1, 30);
			char	*cmd;
			ft_asprintf(&cmd, "cat - | head -c %zu | tail -c 1", idx);
			char str[2] = {ran[idx - 1], 0};
			SHELL_TEST(cmd, ran, str, "", 0);
			free(cmd);
		)
	)

	SHELL_TEST("echo ABCDEF | grep A", "", "ABCDEF\n", "", 0);
	SHELL_TEST("echo ABCDEF | grep N", "", "", "", 1);
	SHELL_TEST("echo ABCDEF 1>&2", "", "", "ABCDEF\n", 0);
	SHELL_TEST("echo ABCDEF 1>&2 | grep N", "", "", "ABCDEF\n", 1);
	SHELL_TEST("echo ABCDEF 1>&2 |& grep A", "", "ABCDEF\n", "", 0);
	SHELL_TEST("echo ABCDEF 1>&2 |& grep N", "", "", "", 1);

	// -- 2. Pipeline with builtins that change state (only last stage can affect shell state) --
	SHELL_TEST("true | export A=5", "", "", "", 0)
	SHELL_TEST("export A=0; export A=3 | true; echo $A", "", "0\n", "", 0) // export in pipe has no effect

	// -- 3. Variable scope: changes inside a pipeline should not affect parent shell --
	SHELL_TEST("A=init; A=val | cat; echo $A", "", "init\n", "", 0) // $A remains 'init'

	// -- 4. SIGPIPE test: Grep exits before cat finishes writing (shouldn't crash) --
	SHELL_TEST("yes | head -n 1", "", "y\n", "", 0)

	// -- 5. Builtins and external mixed pipelines --
	SHELL_TEST("echo a | cat | wc -l", "", "1\n", "", 0)
	SHELL_TEST("cd / ; pwd", "", "/\n", "", 0)

	// -- 6. Redirection with pipeline stages --
	SHELL_TEST("echo abc | cat - > /dev/null", "", "", "", 0)
	SHELL_TEST("echo abc | cat - 2>&1", "", "abc\n", "", 0)

	// -- 7. Quoting and special chars across pipes --
	SHELL_TEST("echo 'A | B' | grep B", "", "A | B\n", "", 0)
	SHELL_TEST("echo 'a  b  c' | tr -s ' ' | wc -w", "", "3\n", "", 0)

	// -- 8. Side-effect only in last stage --
	SHELL_TEST("true | false", "", "", "", 1)
	SHELL_TEST("true | true", "", "", "", 0)

	// -- 9. Return status with pipefail --
	WITH_OPTS(({{"pipefail", 1}, {NULL, 0}}),
			SHELL_TEST("true | false | true", "", "", "", 1)
			SHELL_TEST("false | true | false", "", "", "", 1)
			SHELL_TEST("true | true | true", "", "", "", 0)
	)

	// -- 10. Subshell inside a pipeline --
	SHELL_TEST("(echo sub) | cat", "", "sub\n", "", 0)
	SHELL_TEST("(exit 42)", "", "", "", 42)
	SHELL_TEST("(exit 42) | cat", "", "", "", 0)

	// -- 11. Multiple pipelines in sequence --
	SHELL_TEST("echo 1 | cat ; echo 2 | cat", "", "1\n2\n", "", 0)

	// -- 12. Stress: long pipeline --
	REPEAT(5,
			SHELL_TEST("yes | cat | cat | cat | head -n 1", "", "y\n", "", 0)
	)

	// -- 1. Pipe where the second process exits before first finishes (broken pipe) --
	SHELL_TEST("yes | head -n 1", "", "y\n", "", 0) // SIGPIPE must not crash or hang

	// -- 2. Pipeline with stderr-only output in first stage --
	SHELL_TEST("(echo ERR 1>&2) | cat", "", "", "ERR\n", 0)

	// -- 3. Combine stdout + stderr over pipes manually (no |&) --
	SHELL_TEST("bash -c 'echo out; echo err 1>&2' |& cat", "", "out\nerr\n", "", 0)

	// -- 4. Read from pipeline inside command substitution --
	SHELL_TEST("echo $(echo hi | tr a-z A-Z)", "", "HI\n", "", 0)

	// -- 5. Pipeline with function in middle --
	SHELL_TEST("f() { tr a-z A-Z; }; echo foo | f | cat", "", "FOO\n", "", 0)

	// -- 6. Pipe with read built-in: should only affect subshell --
	//SHELL_TEST("echo abc | { read a; echo $a; }; echo $a", "", "abc\n\n", "", 0)

	// -- 7. Pipe with exec modifying descriptors --
	//SHELL_TEST("exec 3>&1 | cat", "", "", "", 0) // should not crash

	// -- 10. Pipeline that reads from a file on the left side --
	SHELL_TEST("echo 123 > tmp_pipefile; cat tmp_pipefile | grep 2", "", "123\n", "", 0)

	// -- 11. Pipe with process that sleeps (for zombie race testing) --
	SHELL_TEST("echo hi | (sleep 0.1; cat)", "", "hi\n", "", 0)

	// -- 12. Read from stdin and pipe it to two consumers (tee) --
	SHELL_TEST("echo input | tee /dev/null | cat", "", "input\n", "", 0)

	// -- 13. Side-effect testing: echo writes, but later pipe fails --
	SHELL_TEST("echo OUTPUT | false", "", "", "", 1)

	// -- 14. A pipeline where all processes fail (with pipefail) --
	WITH_OPTS(({{"pipefail", 1}, {NULL, 0}}),
			SHELL_TEST("false | false | false", "", "", "", 1)
			)

	// -- 15. Multiple pipeline stages with final failure --
	SHELL_TEST("echo OK | cat | false", "", "", "", 1)

	// -- 16. Redirecting output in middle stage of a pipeline --
	SHELL_TEST("echo abc | tee tmpfile | cat", "", "abc\n", "", 0)

	// -- 18. Bash: a=b command1 | command2 â€” should not leak a to outer shell --
	SHELL_TEST("a=x; a=y echo z | cat; echo $a", "", "z\nx\n", "", 0)
))
